<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ratears</title>
  
  <subtitle>ratears&#39;s blog</subtitle>
  <link href="https://ratears.github.io/dev.ratears.life/atom.xml" rel="self"/>
  
  <link href="https://ratears.github.io/dev.ratears.life/"/>
  <updated>2023-03-30T12:39:41.000Z</updated>
  <id>https://ratears.github.io/dev.ratears.life/</id>
  
  <author>
    <name>ratears</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《分布式协议与算法实战》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/</id>
    <published>2023-03-30T12:39:41.000Z</published>
    <updated>2023-03-30T12:39:41.000Z</updated>
    
    <content type="html"><![CDATA[<br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;学习备注&quot;&gt;&lt;a href=&quot;#学习备注&quot; class=&quot;headerlink&quot; title=&quot;学习备注&quot;&gt;&lt;/a&gt;学习备注&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Good Learning Method</title>
    <link href="https://ratears.github.io/dev.ratears.life/Good-Learning-Method/"/>
    <id>https://ratears.github.io/dev.ratears.life/Good-Learning-Method/</id>
    <published>2023-03-30T10:15:40.000Z</published>
    <updated>2023-03-30T10:15:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h1><ul><li><a class="link"   href="https://www.zhihu.com/topic/19566266/top-answers" >学习方法<i class="fas fa-external-link-alt"></i></a></li></ul><h2 id="如何戒掉手机去认真学习？"><a href="#如何戒掉手机去认真学习？" class="headerlink" title="如何戒掉手机去认真学习？"></a><a class="link"   href="https://www.zhihu.com/question/341554416/answer/848670278" >如何戒掉手机去认真学习？<i class="fas fa-external-link-alt"></i></a></h2><ul><li><strong>不得不说，我们绝大多数人，没有那么强烈的渴望改变，渴望有钱，渴望有地位，渴望有尊严，学习对我们来说，也没有那么重要的意义。</strong>所以，手机就成了学习的障碍，麻将成了学习的障碍，任何一件事都成为学习的障碍。</li></ul><ul><li><strong>第一阶段：向钱看齐，激发对金钱的渴望</strong><ul><li><strong>如果你没有动力，就把赚钱作为第一目的。</strong></li></ul></li><li><strong>第二阶段：逼自己，死读书（学习）</strong><ul><li>当你有了一个明确的目标时，你还静不下心学习时，这时候就需要死磕自己<strong>。死读书，我用的办法就是抄书，边读边抄书，就像小时候写家庭作业。</strong></li></ul></li><li><strong>第三阶段：向前看齐，寻找榜样的力量</strong><ul><li><strong>在你的领域寻找一个榜样。先模仿学习，然后在寻求超越。</strong></li><li>在心理学上有个专业的名词，叫“<a class="link"   href="https://www.zhihu.com/search?q=%E7%9F%A5%E8%AF%86%E7%9A%84%E8%AF%85%E5%92%92&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:848670278%7D" >知识的诅咒<i class="fas fa-external-link-alt"></i></a>”，说的是当我们知道一件事的时，很难想象不知道这件事的人，是怎样一种心理状态。其实就是默认，我们知道这件事，所以人也应该知道这件事。反过来就是说，如果我们不知道一件事，也很难想象出知道这件事对我们的好处。</li><li>为了打破这种知识诅咒，提高自己竞争力，也是为学习这件事加上催化剂。需要找到你所在领域里的一个标杆，也就是大家共识的牛人。以此为标准，去学习，向前看齐。</li></ul></li><li><strong>第四阶段：组队学习，或找一个私人教练</strong><ul><li>在学习之前压上赌注，也就是先付出一部分，你就想要得到回报，而继续坚持下去。</li><li><strong>你只有逼自己一次，达到顶峰体验过这种巅峰的感觉，你就不会允许自己失败，而有足够的动力，去克服学习障碍。包括玩手机、玩麻将、玩大烟枪等等。</strong></li></ul></li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习方法&quot;&gt;&lt;a href=&quot;#学习方法&quot; class=&quot;headerlink&quot; title=&quot;学习方法&quot;&gt;&lt;/a&gt;学习方法&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.zhihu.com/topic/1956</summary>
      
    
    
    
    <category term="Learning" scheme="https://ratears.github.io/dev.ratears.life/Categories/Learning/"/>
    
    <category term="Method" scheme="https://ratears.github.io/dev.ratears.life/Categories/Learning/Method/"/>
    
    
    <category term="Learning" scheme="https://ratears.github.io/dev.ratears.life/Tags/Learning/"/>
    
    <category term="Method" scheme="https://ratears.github.io/dev.ratears.life/Tags/Method/"/>
    
  </entry>
  
  <entry>
    <title>Spring 注解驱动开发</title>
    <link href="https://ratears.github.io/dev.ratears.life/Spring-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/"/>
    <id>https://ratears.github.io/dev.ratears.life/Spring-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</id>
    <published>2023-03-30T08:35:41.000Z</published>
    <updated>2023-03-30T08:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件注册"><a href="#组件注册" class="headerlink" title="组件注册"></a>组件注册</h1><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><ul><li>告诉Spring这是一个配置类</li><li>配置类 &lt;==&gt; 配置文件</li></ul><h2 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h2><ul><li>给容器中注册一个Bean;类型为返回值的类型，id默认是用方法名作为id</li><li>也可以指定id</li></ul><h2 id="ComponentScans"><a href="#ComponentScans" class="headerlink" title="@ComponentScans"></a>@ComponentScans</h2><ul><li><p>开启注解扫描；指定要扫描的包或规则</p></li><li><p>@ComponentScans 的扫描（过滤）规则</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScans(</span></span><br><span class="line"><span class="meta">value = &#123;</span></span><br><span class="line"><span class="meta">@ComponentScan(value=&quot;com.atguigu&quot;,includeFilters = &#123;</span></span><br><span class="line"><span class="meta">/*@Filter(type=FilterType.ANNOTATION,classes=&#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">@Filter(type=FilterType.ASSIGNABLE_TYPE,classes=&#123;BookService.class&#125;),*/</span></span><br><span class="line"><span class="meta">@Filter(type=FilterType.CUSTOM,classes=&#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;,useDefaultFilters = false)</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="comment">//@ComponentScan  value:指定要扫描的包</span></span><br><span class="line"><span class="comment">//excludeFilters = Filter[] ：指定扫描的时候按照什么规则排除那些组件</span></span><br><span class="line"><span class="comment">//includeFilters = Filter[] ：指定扫描的时候只需要包含哪些组件</span></span><br><span class="line"><span class="comment">//FilterType.ANNOTATION：按照注解</span></span><br><span class="line"><span class="comment">//FilterType.ASSIGNABLE_TYPE：按照给定的类型；</span></span><br><span class="line"><span class="comment">//FilterType.ASPECTJ：使用ASPECTJ表达式</span></span><br><span class="line"><span class="comment">//FilterType.REGEX：使用正则指定</span></span><br><span class="line"><span class="comment">//FilterType.CUSTOM：使用自定义规则</span></span><br></pre></td></tr></table></figure><h2 id="Scope"><a href="#Scope" class="headerlink" title="@Scope"></a>@Scope</h2><ul><li>@Scope 调整（设置）组件作用域<ul><li>singleton：单实例的（默认值）：ioc容器启动会调用方法创建对象放到ioc容器中。以后每次获取就是直接从容器（map.get()）中拿</li><li>prototype：多实例的；ioc容器启动并不会去调用方法创建对象放在容器中，每次获取的时候才会调用方法创建对象；</li><li>request：同一次请求创建一个实例</li><li>session：同一个session创建一个实例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="meta">@Bean(&quot;person&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Person <span class="title function_">person</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;给容器中添加Person....&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lazy"><a href="#Lazy" class="headerlink" title="@Lazy"></a>@Lazy</h2><ul><li>懒加载</li><li>单实例bean：默认在容器启动的时候创建对象；</li><li>懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化；</li></ul><h2 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h2><ul><li>类中组件统一设置。满足当前条件，这个类中配置的所有bean注册才能生效；</li></ul><h2 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h2><ul><li>导入组件，id默认是组件的全类名</li></ul><h2 id="给容器中注册组件"><a href="#给容器中注册组件" class="headerlink" title="给容器中注册组件"></a>给容器中注册组件</h2><ul><li>1）、包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]</li><li>2）、@Bean[导入的第三方包里面的组件]</li><li>3）、@Import[快速给容器中导入一个组件]<ul><li>1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名</li><li>2）、ImportSelector:返回需要导入的组件的全类名数组；</li><li>3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中</li></ul></li><li>4）、使用Spring提供的 FactoryBean（工厂Bean）;<ul><li>1）、默认获取到的是工厂bean调用getObject创建的对象</li><li>2）、要获取工厂Bean本身，我们需要给id前面加一个&amp;</li></ul></li></ul><h1 id="组件（Bean）生命周期"><a href="#组件（Bean）生命周期" class="headerlink" title="组件（Bean）生命周期"></a>组件（Bean）生命周期</h1><h2 id="Bean-指定初始化和销毁方法"><a href="#Bean-指定初始化和销毁方法" class="headerlink" title="Bean 指定初始化和销毁方法"></a>Bean 指定初始化和销毁方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(initMethod=&quot;init&quot;,destroyMethod=&quot;detory&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Car <span class="title function_">car</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Car</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Car</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car constructor...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... init...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detory</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;car ... detory...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;组件注册&quot;&gt;&lt;a href=&quot;#组件注册&quot; class=&quot;headerlink&quot; title=&quot;组件注册&quot;&gt;&lt;/a&gt;组件注册&lt;/h1&gt;&lt;h2 id=&quot;Configuration&quot;&gt;&lt;a href=&quot;#Configuration&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Spring" scheme="https://ratears.github.io/dev.ratears.life/Categories/Spring/"/>
    
    
    <category term="Spring" scheme="https://ratears.github.io/dev.ratears.life/Tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>《Nacos 核心原理解读+高性能微服务系统实战》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8ANacos-%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E8%AF%BB-%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8ANacos-%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E8%AF%BB-%E9%AB%98%E6%80%A7%E8%83%BD%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%B3%BB%E7%BB%9F%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/</id>
    <published>2023-03-28T12:16:59.000Z</published>
    <updated>2023-03-28T12:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初识Nacos"><a href="#初识Nacos" class="headerlink" title="初识Nacos"></a>初识Nacos</h1><h2 id="Nacos是什么"><a href="#Nacos是什么" class="headerlink" title="Nacos是什么?"></a>Nacos是什么?</h2><ul><li>Nacos官方定义:<ul><li>Nacos 是 Dynamic Naming and Configuration Service的首字母简称</li><li>一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台</li></ul></li></ul><h2 id="Nacos能干什么"><a href="#Nacos能干什么" class="headerlink" title="Nacos能干什么"></a>Nacos能干什么</h2><ul><li>注册微服务，将服务注册到管控中心</li><li>发现微服务，将服务暴露给其他服务</li><li>管理参数，提供配置参数池</li></ul><h2 id="Nacos由哪几部分组成"><a href="#Nacos由哪几部分组成" class="headerlink" title="Nacos由哪几部分组成"></a>Nacos由哪几部分组成</h2><ul><li>统一服务注册</li><li>统一服务发现</li><li>统一配置管理</li></ul><h2 id="Nacos发展前景如何"><a href="#Nacos发展前景如何" class="headerlink" title="Nacos发展前景如何"></a>Nacos发展前景如何</h2><ul><li>github 活跃</li><li>Nacos 应用广泛（很多知名、大公司都在使用Nacos）</li></ul><h2 id="Eureka的引入"><a href="#Eureka的引入" class="headerlink" title="Eureka的引入"></a>Eureka的引入</h2><ul><li>Eureka 2012年左右被引入国内</li><li>Eureka是Netflix开发的服务发现框架，本身是一个基于REST的服务，主要用于定位运行在AWS城中的中间层服务，以达到负载均衡和中间层服务故障转移的目的。</li><li>Springcloud将它集成在其子项目spring-cloud-netflix中，以实现Springcloud的服务发现功能</li></ul><h2 id="Eureka的盛行"><a href="#Eureka的盛行" class="headerlink" title="Eureka的盛行"></a>Eureka的盛行</h2><ul><li>从2013年开始，被得到广泛使用</li><li>到2015年，几乎国内的互联网大厂均在使用Eureka</li></ul><h2 id="Eureka的陨落"><a href="#Eureka的陨落" class="headerlink" title="Eureka的陨落"></a>Eureka的陨落</h2><ul><li>2018年，Nacos第一个版本正式对外发布</li><li>Eureka的使用范围逐渐缩小</li></ul><h2 id="Nacos的崛起"><a href="#Nacos的崛起" class="headerlink" title="Nacos的崛起"></a>Nacos的崛起</h2><ul><li>2019年，Nacos第一个成熟版本正式对外发布</li><li>2020年，Nacos逐渐被国内互联网大厂使用</li><li>2021年，Eureka已经被国内互联网大厂停止使用，均移步Nacos</li></ul><h2 id="Nacos主要版本介绍"><a href="#Nacos主要版本介绍" class="headerlink" title="Nacos主要版本介绍"></a>Nacos主要版本介绍</h2><h3 id="Nacos-1-4-X版本特性"><a href="#Nacos-1-4-X版本特性" class="headerlink" title="Nacos 1.4.X版本特性"></a>Nacos 1.4.X版本特性</h3><ul><li>支持SpringBoot版本到 2.6.6</li><li>解决并完善Spring权限认证相关问题</li><li>重置JRaft协议集群无Leader操作</li><li>减少 DistroProtocol初始化中的内存成本以避免OutOfMemoryError</li><li>增加NamingProxy.serversFromEndpoint的内存可见性</li><li>修复ServerListManager的迭代器并发问题</li></ul><h3 id="Nacos-2-1-X版本特性"><a href="#Nacos-2-1-X版本特性" class="headerlink" title="Nacos 2.1.X版本特性"></a>Nacos 2.1.X版本特性</h3><ul><li>支持批量注册服务</li><li>暂时移除离开 nacos 服务器节点API</li><li>添加默认模糊搜索功能</li><li>将TRACE 事件添加到服务器</li><li>在历史列表中添加版本数据比较</li><li>增强默认身份验证插件性能</li></ul><h2 id="Nacos在Linux系统上单机安装"><a href="#Nacos在Linux系统上单机安装" class="headerlink" title="Nacos在Linux系统上单机安装"></a>Nacos在Linux系统上单机安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line"></span><br><span class="line">wget https://github.com/alibaba/nacos/releases/download/1.4.4/nacos-server-1.4.4.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf nacos-server-1.4.4.tar.gz</span><br><span class="line"></span><br><span class="line">mv nacos /usr/local/</span><br><span class="line"></span><br><span class="line">cd /usr/local/nacos/bin/</span><br><span class="line"></span><br><span class="line">./startup.sh -m standalone</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;初识Nacos&quot;&gt;&lt;a href=&quot;#初识Nacos&quot; class=&quot;headerlink&quot; title=&quot;初识Nacos&quot;&gt;&lt;/a&gt;初识Nacos&lt;/h1&gt;&lt;h2 id=&quot;Nacos是什么&quot;&gt;&lt;a href=&quot;#Nacos是什么&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Nacos" scheme="https://ratears.github.io/dev.ratears.life/Categories/Nacos/"/>
    
    
    <category term="Nacos" scheme="https://ratears.github.io/dev.ratears.life/Tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>《ZooKeeper分布式专题与Dubbo微服务入门》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AZooKeeper%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98%E4%B8%8EDubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AZooKeeper%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%93%E9%A2%98%E4%B8%8EDubbo%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8%E3%80%8BStudy-Notes/</id>
    <published>2023-03-27T12:06:45.000Z</published>
    <updated>2023-03-27T12:06:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-分布式系统概念与ZooKeeper简介"><a href="#第1章-分布式系统概念与ZooKeeper简介" class="headerlink" title="第1章 分布式系统概念与ZooKeeper简介"></a>第1章 分布式系统概念与ZooKeeper简介</h1><h2 id="ZooKeeper简介"><a href="#ZooKeeper简介" class="headerlink" title="ZooKeeper简介"></a>ZooKeeper简介</h2><ul><li>中间件，提供协调服务</li><li>作用于分布式系统，发挥其优势，可以为大数据服务</li><li>支持Java，提供Java和C语言的客户端API</li></ul><br><h2 id="什么是分布式系统"><a href="#什么是分布式系统" class="headerlink" title="什么是分布式系统"></a>什么是分布式系统</h2><ul><li>很多台计算机组成一个整体，一个整体一致对外并且处理同一请求</li><li>内部的每台计算机都可以相互通信（rest/rpc）</li><li>客户端到服务端的一次请求到响应结束会经历很多台计算机</li></ul><br><h2 id="ZooKeeper的特性"><a href="#ZooKeeper的特性" class="headerlink" title="ZooKeeper的特性"></a>ZooKeeper的特性</h2><ul><li>一致性:数据一致性，数据按照顺序分批入库</li><li>原子性:事务要么成功要么失败，不会局部化</li><li>单一视图:客户端连接集群中的任一zk节点，数据都是一致的</li><li>可靠性:每次对zk的操作状态都会保存在服务端</li><li>实时性:客户端可以读取到zk服务端的最新数据</li></ul><br><br><br><h1 id="第2章-ZooKeeper安装"><a href="#第2章-ZooKeeper安装" class="headerlink" title="第2章 ZooKeeper安装"></a>第2章 ZooKeeper安装</h1><h2 id="Zookeeper主要目录结构"><a href="#Zookeeper主要目录结构" class="headerlink" title="Zookeeper主要目录结构"></a>Zookeeper主要目录结构</h2><ul><li>bin: 主要的一些运行命令</li><li>conf: 存放配置文件，其中我们需要修改zk.cfo</li><li>contrib:附加的一些功能</li><li>dist-maven:mvn编译后的目录</li><li>docs: 文档</li><li>lib:需要依赖的jar包</li><li>recipes: 案例demo代码</li><li>src: 源码</li></ul><h2 id="ZooKeeper单机版安装、配置、启动"><a href="#ZooKeeper单机版安装、配置、启动" class="headerlink" title="ZooKeeper单机版安装、配置、启动"></a>ZooKeeper单机版安装、配置、启动</h2><ul><li>环境要求：安装jdk，并配置环境变量</li><li>下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line"></span><br><span class="line">wget https://archive.apache.org/dist/zookeeper/zookeeper-3.4.11/zookeeper-3.4.11.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf zookeeper-3.4.11.tar.gz</span><br><span class="line"></span><br><span class="line">mv zookeeper-3.4.11 /usr/local/</span><br><span class="line"></span><br><span class="line">ln -s zookeeper-3.4.11/ zookeeper</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper/conf/</span><br><span class="line"></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br></pre></td></tr></table></figure><ul><li>配置文件参数说明与修改<ul><li>tickTime:用于计算的时间单元。比如如session超时:N* tickTime</li><li>initLimit:用于集群，允许从节点连接并同步到 master节点的初始化连接时间，以tickTime的倍数来表示</li><li>syncLimit:用于集群，master主节点与从节点之间发送消息请求和应答 时间长度。(心跳机制)</li><li>dataDir:必须配置，数据文件目录</li><li>dataLogDir:日志目录，如果不配置会和dataDir公用</li><li>clientPort:连接服务器的端口，默认 2181</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of milliseconds of each tick</span></span><br><span class="line">tickTime=2000</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of ticks that the initial</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">synchronization phase can take</span></span><br><span class="line">initLimit=10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of ticks that can pass between</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sending a request and getting an acknowledgement</span></span><br><span class="line">syncLimit=5</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the directory <span class="built_in">where</span> the snapshot is stored.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">do</span> not use /tmp <span class="keyword">for</span> storage, /tmp here is just</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">example sakes.</span></span><br><span class="line">dataDir=/usr/local/zookeeper/dataDir/</span><br><span class="line">dataLogDir=/usr/local/zookeeper/dataLogDir/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the port at <span class="built_in">which</span> the clients will connect</span></span><br><span class="line">clientPort=2181</span><br></pre></td></tr></table></figure><ul><li>创建数据目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/zookeeper/dataDir /usr/local/zookeeper/dataLogDir</span><br></pre></td></tr></table></figure><ul><li>配置ZooKeeper的环境变量后，启动ZooKeeper</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper/bin</span><br><span class="line"></span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure><br><br><br><h1 id="第3章-ZooKeeper基本数据模型"><a href="#第3章-ZooKeeper基本数据模型" class="headerlink" title="第3章 ZooKeeper基本数据模型"></a>第3章 ZooKeeper基本数据模型</h1><h2 id="基本数据模型介绍"><a href="#基本数据模型介绍" class="headerlink" title="基本数据模型介绍"></a>基本数据模型介绍</h2><ul><li>ZooKeeper 是一个树形结构</li><li>zk的数据模型也可以理解为linux/unix的文件目录:/usr/local/…</li><li>每一个节点都称之为 znode，它可以有子节点，也可以有数据</li><li>每个节点分为临时节点和永久节点，临时节点在客户端断开后消失</li><li>每个k节点都各自的版本号，可以通过命令行来显示节点信息</li><li>每当节点数据发生变化，那么该节点的版本号会累加(乐观锁）</li><li>删除/修改过时节点，版本号不匹配则会报错</li><li>每个zk节点存储的数据不宜过大，几K即可</li><li>节点可以设置权限acl，可以通过权限来限制用户的访问</li></ul><br><h2 id="数据模型基本操作"><a href="#数据模型基本操作" class="headerlink" title="数据模型基本操作"></a>数据模型基本操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">客户端连接</span></span><br><span class="line">cd /usr/local/zookeeper/bin/</span><br><span class="line"></span><br><span class="line">./zkCli.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看znode结构</span></span><br><span class="line">[zk: localhost:2181(CONNECTED) 1] ls /</span><br><span class="line">[zookeeper]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] ls /zookeeper</span><br><span class="line">[quota]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 3] ls /zookeeper/quota</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><br><h2 id="zk的作用体现"><a href="#zk的作用体现" class="headerlink" title="zk的作用体现"></a>zk的作用体现</h2><ul><li>master节点选举，主节点挂了以后，从节点就会接手工作并且保证这个节点是唯一的，这也是所谓首脑模式，从而保证我们的集群是高可用的</li><li>统一配置文件管理，即只需要部署一台服务器，则可以把相同的配置文件同步更新到其他所有服务器，此操作在云计算中用的特别多(假设修改了redis统一配置)</li><li>发布与订阅，类似消息队列MQ(amg，rmg…),dubbo发布者把数据存在znode上，订阅者会读取这个数据</li><li>提供分布式锁，分布式环境中不同进程之间争夺资源，类似于多线程中的锁</li><li>集群管理，集群中保证数据的强一致性</li></ul><br><br><br><h1 id="第4章-ZK基本特性与基于Linux的ZK客户端命令行学习"><a href="#第4章-ZK基本特性与基于Linux的ZK客户端命令行学习" class="headerlink" title="第4章 ZK基本特性与基于Linux的ZK客户端命令行学习"></a>第4章 ZK基本特性与基于Linux的ZK客户端命令行学习</h1><h2 id="zk常用命令操作"><a href="#zk常用命令操作" class="headerlink" title="zk常用命令操作"></a>zk常用命令操作</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/zookeeper/bin</span><br><span class="line"></span><br><span class="line">./zkCli.sh</span><br><span class="line"></span><br><span class="line">ls /</span><br><span class="line"></span><br><span class="line">stat /</span><br><span class="line"></span><br><span class="line">ls2 /</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="session的基本原理"><a href="#session的基本原理" class="headerlink" title="session的基本原理"></a>session的基本原理</h2><ul><li>客户端与服务端之间的连接存在会话</li><li>每个会话都会可以设置一个超时时间</li><li>心跳结束，session则过期</li><li>Session过期，则临时节点znode会被抛弃</li><li>心跳机制:客户端向服务端的ping包请求</li></ul><h2 id="watcher机制"><a href="#watcher机制" class="headerlink" title="watcher机制"></a>watcher机制</h2><ul><li>针对每个节点的操作，都会有一个监督者&gt; wathcer</li><li>当监控的某个对象(znode)发生了变化，则触发watcher事件</li><li>zk中的watcher是一次性的，触发后立即销毁</li><li>父节点，子节点增删改都能够触发其watcher</li><li>针对不同类型的操作，触发的watcher事件也不同:<ul><li>(子)节点创建事件</li><li>(子)节点删除事件</li><li>(子)节点数据变化事件</li></ul></li></ul><h2 id="watcher命令"><a href="#watcher命令" class="headerlink" title="watcher命令"></a>watcher命令</h2><ul><li>通过get path [watch]设置watcher</li><li>父节点增删改操作触发 watcher</li><li>子节点增删改操作触发 watcher</li></ul><ul><li>创建父节点触发:NodeCreated</li><li>修改父节点数据触发:NodeDataChanged</li><li>删除父节点触发:NodeDeleted</li></ul><ul><li>Is 为父节点设置watcher，创建子节点触发：NodeChildrenChanged</li><li>ls 为父节点设置watcher，删除子节点触发：NodeChildrenChanged</li><li>ls 为父节点设置watcher，修改子节点不触发事件</li></ul><h2 id="watcher使用场景"><a href="#watcher使用场景" class="headerlink" title="watcher使用场景"></a>watcher使用场景</h2><ul><li><p>统一资源配置</p></li><li><p>把对于软件工程师候选人考察的策略大体订立清楚</p></li></ul><h1 id="第5章-选举模式和ZooKeeper的集群安装"><a href="#第5章-选举模式和ZooKeeper的集群安装" class="headerlink" title="第5章 选举模式和ZooKeeper的集群安装"></a>第5章 选举模式和ZooKeeper的集群安装</h1><h2 id="选举模式"><a href="#选举模式" class="headerlink" title="选举模式"></a>选举模式</h2><ul><li>zk集群，主从节点，心跳机制(选举模式)</li><li>通过/zkCli.sh -server [ip]:[port] 检测集群是否配置成功</li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-分布式系统概念与ZooKeeper简介&quot;&gt;&lt;a href=&quot;#第1章-分布式系统概念与ZooKeeper简介&quot; class=&quot;headerlink&quot; title=&quot;第1章 分布式系统概念与ZooKeeper简介&quot;&gt;&lt;/a&gt;第1章 分布式系统概念与ZooKe</summary>
      
    
    
    
    <category term="ZooKeeper" scheme="https://ratears.github.io/dev.ratears.life/Categories/ZooKeeper/"/>
    
    
    <category term="ZooKeeper" scheme="https://ratears.github.io/dev.ratears.life/Tags/ZooKeeper/"/>
    
    <category term="Dubbo" scheme="https://ratears.github.io/dev.ratears.life/Tags/Dubbo/"/>
    
    <category term="microservice" scheme="https://ratears.github.io/dev.ratears.life/Tags/microservice/"/>
    
  </entry>
  
  <entry>
    <title>《技术面试官识人手册》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AF%86%E4%BA%BA%E6%89%8B%E5%86%8C%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E6%8A%80%E6%9C%AF%E9%9D%A2%E8%AF%95%E5%AE%98%E8%AF%86%E4%BA%BA%E6%89%8B%E5%86%8C%E3%80%8BStudy-Notes/</id>
    <published>2023-03-26T07:52:38.000Z</published>
    <updated>2023-03-26T07:52:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词-世事洞明皆学问，人情练达即文章：小面试，大道理"><a href="#开篇词-世事洞明皆学问，人情练达即文章：小面试，大道理" class="headerlink" title="开篇词 | 世事洞明皆学问，人情练达即文章：小面试，大道理"></a>开篇词 | 世事洞明皆学问，人情练达即文章：小面试，大道理</h2><ul><li>面试就是打造团队的第一道门槛，它可能短暂、直接地影响你一个项目的进度，也可能长期、潜在地左右你整个团队的战斗力。</li></ul><h3 id="晋升第一课，招募人才"><a href="#晋升第一课，招募人才" class="headerlink" title="晋升第一课，招募人才"></a>晋升第一课，招募人才</h3><ul><li>首先，去负责技术面试，帮助公司和团队招募人才，就是一个职业上升通道的必攻克项</li><li>面试还是一个预期和限制都很明确的快速学习机会，并且，是一个双向的学习机会<ul><li>预期：我们针对软件工程师这个特定岗位对于候选人的期待</li><li>限制：明确了双方需要在每轮短短几十分钟的时间内进行交流与合作，完成话题的讨论，或是问题的解决</li></ul></li><li>深度体验换位思考，让自己和市场保持同步</li></ul><h3 id="打造优秀团队，严把人才关"><a href="#打造优秀团队，严把人才关" class="headerlink" title="打造优秀团队，严把人才关"></a>打造优秀团队，严把人才关</h3><ul><li>总归要有一个环节把质量严格地把控好，否则就要让某个下游环节买单，下游环节不买单，那就要留给用户买单了</li></ul><h3 id="候选人成长空间"><a href="#候选人成长空间" class="headerlink" title="候选人成长空间"></a>候选人成长空间</h3><ul><li>长期看，你可以了解到哪些知识和能力是值得长期投入的；短期看，你可以了解对方的初衷和心态是怎样的。</li><li>我们还可以从中评估和强化自己的认识；面试没通过，你也不至于说挂得不明不白。</li></ul><h3 id="你的收获"><a href="#你的收获" class="headerlink" title="你的收获"></a>你的收获</h3><ul><li>面试前：我将介绍为什么要对软件工程师进行技术面试，应当覆盖哪些面试角度，以及我们该怎样去设计面试题</li><li>面试中：专栏的重中之重，我将结合实例探讨怎样主导技术面试。包括怎样把控流程，怎样进行算法和数据结构的考察，系统设计的考察，面向对象和测试能力的考察，基础知识的考察，以及行为面试的操作方法等等。</li><li>面试后：我将针对候选人的评估讨论会如何开展来介绍。包括怎样收集事实、提炼数据，怎样引导争辩、达成共识，以及最终怎样给出客观中肯的评估。</li></ul><br><br><br><h1 id="面试准备-计划篇-5讲"><a href="#面试准备-计划篇-5讲" class="headerlink" title="面试准备/计划篇 (5讲)"></a>面试准备/计划篇 (5讲)</h1><h2 id="01-评估体系：公司和团队到底需要怎样的技术人才？"><a href="#01-评估体系：公司和团队到底需要怎样的技术人才？" class="headerlink" title="01 | 评估体系：公司和团队到底需要怎样的技术人才？"></a>01 | 评估体系：公司和团队到底需要怎样的技术人才？</h2><ul><li><strong>胜兵先胜而后求战，败兵先战而后求胜</strong></li><li></li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词-世事洞明皆学问，人情练达即文章：小面试，大道理&quot;&gt;&lt;a href=&quot;#开篇词-世事</summary>
      
    
    
    
    <category term="interview" scheme="https://ratears.github.io/dev.ratears.life/Categories/interview/"/>
    
    
    <category term="interview" scheme="https://ratears.github.io/dev.ratears.life/Tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>《面试现场》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%9D%A2%E8%AF%95%E7%8E%B0%E5%9C%BA%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%9D%A2%E8%AF%95%E7%8E%B0%E5%9C%BA%E3%80%8BStudy-Notes/</id>
    <published>2023-03-24T14:17:30.000Z</published>
    <updated>2023-03-24T14:17:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词-面试，这样做会功到自然成"><a href="#开篇词-面试，这样做会功到自然成" class="headerlink" title="开篇词 | 面试，这样做会功到自然成"></a>开篇词 | 面试，这样做会功到自然成</h2><ul><li><p><strong>优点发挥得足够强，就可以弥补缺点，除非舞台不合适</strong></p><ul><li>面试官需要关注的，应该是应聘者的优点。缺点每个人都有，但是要把工作做好的话，首先凭的是优点。如果优点能发挥到位，缺点能够被其他的因素补足，那这个人就是合适的。</li></ul></li><li><p><strong>面试的核心，对于应聘者，是想方设法让面试官认可自己对职位有用的那些优点。</strong></p></li><li><p><strong>用真诚的态度，有效地表达自己的能力和价值，建立相互的信任和认可。</strong></p></li></ul><blockquote><p><strong>缺少发掘和表达自己能力的能力。</strong></p></blockquote><blockquote><p>竖一面放大镜，带你看清自己的能力结构（而不仅仅只是关注技术层面），明白培养这些能力的关键因素，并且启发你在自身经历中寻找反映这些能力的素材和故事。</p></blockquote><blockquote><p>搭一座桥，一座在面试官和求职者中间，让沟通更直接、更到位的桥。让你能够分析面试问题的意图，用有价值、有亮点的经历或观点去回答，让面试官轻而易举地看出你的能力和价值。</p></blockquote><blockquote><p>在“知彼篇”里，让应聘者明白面试官眼里的人才素质模型，这相当于面试的“考点大纲”；介绍公司整个招聘过程，带你了解面试中考查能力的一般方法，让你更容易理解面试官的意图。</p><p>在“知己篇”里，带你搞清楚什么是工作中决定个人发展的关键因素，进而明确自己该不该换工作；另一方面，明确自己的职业愿景和规划。准备一份详历，挖掘自己的能力、价值和亮点，并浓缩成一份受青睐的简历给面试官看。</p><p>在“问答篇”里，和你分析面试中常见的几类问题，包括如何解释清楚一个技术点，如何体现你在项目中的重要性等等，帮助你回答得更加精准到位。</p><p>在“贯通篇”里，重点分析几种能力：学习能力、精益能力、协作能力、管理和领导能力等等，这些能力都体现为解决问题的能力，目的是让你了解提高这些能力的关键因素，到详历中寻找合适的事例，全面精准地把你真实的能力水平展现给面试官。</p><p>在“综合篇”里，盘点面试官和应聘者的认知偏差，强调双向选择中，帮你明确该如何衡量新团队和新环境，如何处理和老东家的关系，以及从面试中学习，为长远的发展提供动力。</p></blockquote><ul><li>一个优秀的人，其职业发展的终极目标，是把自己变得更优秀</li><li>借着面试这个场景，和你聊聊一个优秀的人应该如何规划自己的职业。我希望这个专栏能让你更了解面试、更了解工作、更了解自己，并在自己的职业成熟度上有所启发，走出一条不同寻常的路。</li></ul><br><br><br><h1 id="基础：知彼篇-3讲"><a href="#基础：知彼篇-3讲" class="headerlink" title="基础：知彼篇 (3讲)"></a>基础：知彼篇 (3讲)</h1><h2 id="01-公司到底想要什么样的人？"><a href="#01-公司到底想要什么样的人？" class="headerlink" title="01 | 公司到底想要什么样的人？"></a>01 | 公司到底想要什么样的人？</h2><ul><li>公司到底想要什么样的人，面试到底在面什么?</li><li>要想提高自己通过面试的几率，你必须明确面试的内容范围和要求</li></ul><h3 id="公司眼中的好员工"><a href="#公司眼中的好员工" class="headerlink" title="公司眼中的好员工"></a>公司眼中的好员工</h3><ul><li><p>工作结果</p><ul><li>个人工作结果质量好，价值高</li><li>赋能别人做出成果</li></ul></li><li><p>看过程</p><ul><li>对工作内容、环境因素带来的工作复杂度的衡量，也体现了对个人的技能、态度的衡量</li></ul></li><li><p>面试官还要进一步看应聘者的行为是否可以被预测</p></li><li><p>信任感使你能预测对方将来的行为</p></li></ul><h3 id="应聘者的素质模型"><a href="#应聘者的素质模型" class="headerlink" title="应聘者的素质模型"></a>应聘者的素质模型</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1679720662448.5vh94c0lz3c0.webp" width="70%"><br><h4 id="1-经验（Experience）"><a href="#1-经验（Experience）" class="headerlink" title="1. 经验（Experience）"></a>1. 经验（Experience）</h4><ul><li>经验是指工作经历的对象和产出，体现为专业相关的知识和思维结构（Idea），用来指导思考和行为。</li></ul><h4 id="2-技能（Skill）"><a href="#2-技能（Skill）" class="headerlink" title="2. 技能（Skill）"></a>2. 技能（Skill）</h4><ul><li>技能是做事的能力，体现一个人的专业性。</li><li>产生 idea 的技能：针对问题，基于经验，收集、理解、分析和制定新的方案（idea），涉及理解、思考、沟通等过程。</li><li>执行 idea 的技能：运用工具，把方案（idea）应用到实践，从而解决问题。除了用到理解、思考、沟通，还需要协作团队、管理资源，甚至领导和影响他人。</li></ul><h4 id="3-潜力（Potential）"><a href="#3-潜力（Potential）" class="headerlink" title="3. 潜力（Potential）"></a>3. 潜力（Potential）</h4><ul><li>增长经验和技能的能力</li><li>学习：从不会到会，掌握一项技能的过程</li><li>创新：针对特定场景创造新事物的技能</li><li>精益：把事情越做越好的技能</li></ul><blockquote><p>如果你承认潜力，那么就说明你有成长型思维，有成长思维的人认为：技能是可以通过努力获得的，关键是要保持好奇心，平时爱思考、总结、尝试，愿意接受挑战，不怕错误和失败。因此，要在潜力上为自己的面试效果加分，你就需要注意如何在言谈及简历描述中体现这些特质。</p></blockquote><h4 id="4-动机（Motivation）"><a href="#4-动机（Motivation）" class="headerlink" title="4. 动机（Motivation）"></a>4. 动机（Motivation）</h4><ul><li><strong>做事情的内心目标、意愿和态度</strong></li><li>自燃型，也就是自我驱动的员工，他们做事动机强烈，目标明确，明白任务的意义，甚至自己寻找有意义的事，满怀激情地投入，往往超出自己的工作范围，去推动进展，取得成果，然后又奔向下一个目标。</li><li>点燃型，这类员工需要一定的激励，需要他人帮助才能找到目标和意义，一旦“激活”就能像自燃型员工一样奋力工作。</li><li>阻燃型，这类员工当一天和尚撞一天钟，给多少钱，干多少活，按工作的最低标准和最后完成时间递交任务，跟同事合作差，不乐意分享，自我保护。</li></ul><blockquote><p>人格品质，比如诚实守信、认真负责、坚毅勇敢等。这些从底层决定我们的做事动机。</p><p>职业价值观，就是在工作中区分是非、明确轻重的观念。比如，有人喜欢轻松安稳的工作，有人喜欢冒险和竞争；有人喜欢照章办事，有人则喜欢灵活自主；有人追求个人利益，有人则喜欢分享和帮助他人。</p><p>职业性格，是长久的思维和行为习惯，受环境影响固化成的心态“定势”</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>公司到底想要什么样的人呢？我们从应聘者素质模型可以看出：</p><ul><li>动机方面，公司更想要人品好，职业价值观和团队文化一致，职业性格和职位匹配的候选人；</li><li>潜力方面，公司更想要学习、创新和精益能力好的候选人；</li><li>技能和经验方面，公司想要和职位需求匹配的，如果你资历过剩，就要看公司发展需要了，如果你资历不够，那就要看你的潜力和动机了。</li></ul></li><li><p>借助素质模型，对职位描述的理解，理解以下两点：</p><ul><li>了解面试官考查的各项内容和期待，做到“知彼”，不打无准备的仗；</li><li>从个人经历中挖掘素材，突出契合职位需要的内容，以满足面试官的预期。</li></ul></li><li><p><strong>搞清楚面试官的考查要素之后，在提高和表现这些能力上受到一些启发，有的放矢地把自己呈现给面试官。</strong></p></li></ul><br><br><br><h2 id="02-想要成功面试，先要弄懂面试过程"><a href="#02-想要成功面试，先要弄懂面试过程" class="headerlink" title="02 | 想要成功面试，先要弄懂面试过程"></a>02 | 想要成功面试，先要弄懂面试过程</h2><ul><li><p>需要清楚招聘过程，知道各个环节背后：有什么人在主导，目的是什么，要注意什么，该做什么，不该做什么，以及有什么风险</p></li><li><p>从一个招聘职位出现，到招聘结束，需要清楚整个过程发生了什么？需要注意什么？以面试官的视角，增加认知，充分准备，减少失误，为面试效果加分</p></li></ul><h3 id="看懂招聘全流程，不打无准备之仗"><a href="#看懂招聘全流程，不打无准备之仗" class="headerlink" title="看懂招聘全流程，不打无准备之仗"></a>看懂招聘全流程，不打无准备之仗</h3><h4 id="1-确定职位空缺，提前预知工作的难度"><a href="#1-确定职位空缺，提前预知工作的难度" class="headerlink" title="1. 确定职位空缺，提前预知工作的难度"></a>1. 确定职位空缺，提前预知工作的难度</h4><ul><li>填补空缺：因为有前任的工作样板，工作细节清楚、职责明确，确定性高，老板对这个职位的期待也很明确，双方都可以清楚地评价人和工作的匹配度。而且，应聘者完全可以复用前任的经验轻松上手，但是因为有前任的对比，需要超越前任的表现才能获得好评。</li><li>新增职位：工作难度和职责细节往往还不清晰，在团队中还没有和其他职位形成稳定的职责接口，甚至老板对这个职位的期待可能还说不清，新人做起工作来，需要很多的探索和磨合，较难上手。但是因为没有对比，你比较容易校正老板的期待，也容易获得好评。</li></ul><h4 id="2-了解简历收集渠道和筛选过程，有的放矢"><a href="#2-了解简历收集渠道和筛选过程，有的放矢" class="headerlink" title="2. 了解简历收集渠道和筛选过程，有的放矢"></a>2. 了解简历收集渠道和筛选过程，有的放矢</h4><ul><li>内推</li><li>公司网站</li><li>社交平台</li><li>招聘网站</li><li>线下招聘会</li><li>猎头公司</li></ul><ul><li>投递简历的注意事项<ul><li>简历邮件标题至少要写清应聘职位、姓名</li><li>简历附件尽量用 PDF 格式，保证跨平台阅读的一致性</li><li>用一些稍正式的个人邮箱地址投递简历</li></ul></li></ul><ul><li>不要给自己设限，你认为的，并不一定面试官也这么认为。</li></ul><h4 id="3-面试，是谁决定了你的去留"><a href="#3-面试，是谁决定了你的去留" class="headerlink" title="3. 面试，是谁决定了你的去留"></a>3. 面试，是谁决定了你的去留</h4><ul><li>谁来决定一个应聘者面试通过与否？</li><li>面试官可能来源于三类角色：HR、部门大牛、部门经理<ul><li>hr：重点考查人才的基本面：动机（价值观、职业性格）和潜力</li><li>部门大牛：最清楚工作细节，关注应聘者在这些细节上的经验和技能，也就是解决问题的能力</li><li>部门经理：两方面兼顾，既要保证此人能胜任岗位（或者通过学习能够很快胜任），还要验证他的动机和潜力，确保他能认可公司文化，融入团队，保持稳定长远的发展。</li></ul></li><li>部门经理对自己的职位人选负责。在评价应聘者的面试表现时，他会听取 HR 和部门大牛的反馈，结合自己的体会，做出以下几种决定：<ul><li>录用</li><li>不录用：不适合本职位（不排除推荐给其他匹配的职位）。</li><li>候选，留待与后面的人作比较：不是非常理想的人选，需要再看看后面有没有更合适的（如果时间允许的话）</li><li>再面试一次：没看清，拿不准。这往往是因为面试中应聘者没能充分表达自己的能力所致</li></ul></li></ul><blockquote><p>最终，高级经理可能做最后一轮面试，以便确定你确实是符合团队需要的人员。在这一轮对话中，你会得到更多关于公司和团队的信息，这时我建议你多问多了解，以便能够更好地判断这个职位是否满足你的预期，是否符合你的职业发展规划，甚至为你判断是否要加入这个公司提供信息支持。</p></blockquote><ul><li><strong>作为应聘者，在面试阶段你的任务就是，充分展示与职位相关的、能力素质模型的要素，同时了解公司团队，建立互信。</strong></li></ul><h4 id="4-签-Offer，定薪水"><a href="#4-签-Offer，定薪水" class="headerlink" title="4. 签 Offer，定薪水"></a>4. 签 Offer，定薪水</h4><ul><li>这个阶段不能闭口不提薪水</li><li>HR 负责提供公司级别的薪水标准范围，如果部门经理的薪水诉求超过了薪水范围，会被交给上一管理层审批</li></ul><h4 id="5-入职试用期，你还不能放松警惕"><a href="#5-入职试用期，你还不能放松警惕" class="headerlink" title="5. 入职试用期，你还不能放松警惕"></a>5. 入职试用期，你还不能放松警惕</h4><ul><li>需要尽快地承担起工作职责，用能力说话，持续建立和加强同团队的信任，推动个人和团队的发展。</li></ul><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>HR 负责快速筛选简历，组织面试，确保为职位快速找到合适的人；</li><li>部门经理才是决定你面试结果的人，也是决定这份 Offer 薪资水平的人</li><li><strong>作为应聘者，你需要了解这些“利益干系人”的关注点，从而有针对性地、最大化地展示你的能力。</strong></li></ul><br><br><br><h2 id="03-面试官的面试逻辑是什么？"><a href="#03-面试官的面试逻辑是什么？" class="headerlink" title="03 | 面试官的面试逻辑是什么？"></a>03 | 面试官的面试逻辑是什么？</h2><br><br><br><h1 id="基础：知己篇-8讲"><a href="#基础：知己篇-8讲" class="headerlink" title="基础：知己篇 (8讲)"></a>基础：知己篇 (8讲)</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词-面试，这样做会功到自然成&quot;&gt;&lt;a href=&quot;#开篇词-面试，这样做会功到自然成&quot;</summary>
      
    
    
    
    <category term="interview" scheme="https://ratears.github.io/dev.ratears.life/Categories/interview/"/>
    
    
    <category term="interview" scheme="https://ratears.github.io/dev.ratears.life/Tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>《Kafka多维度系统精讲，从入门到实战开发》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AKafka%E5%A4%9A%E7%BB%B4%E5%BA%A6%E7%B3%BB%E7%BB%9F%E7%B2%BE%E8%AE%B2%EF%BC%8C%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AKafka%E5%A4%9A%E7%BB%B4%E5%BA%A6%E7%B3%BB%E7%BB%9F%E7%B2%BE%E8%AE%B2%EF%BC%8C%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%E5%BC%80%E5%8F%91%E3%80%8BStudy-Notes/</id>
    <published>2023-03-13T21:29:15.000Z</published>
    <updated>2023-03-13T21:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-课程导学与学习指南"><a href="#第1章-课程导学与学习指南" class="headerlink" title="第1章 课程导学与学习指南"></a>第1章 课程导学与学习指南</h1><br><br><br><h1 id="第2章-Kafka入门——开发环境准备"><a href="#第2章-Kafka入门——开发环境准备" class="headerlink" title="第2章 Kafka入门——开发环境准备"></a>第2章 Kafka入门——开发环境准备</h1><br><br><br><h1 id="第3章-Kafka入门——Kafka基础操作"><a href="#第3章-Kafka入门——Kafka基础操作" class="headerlink" title="第3章 Kafka入门——Kafka基础操作"></a>第3章 Kafka入门——Kafka基础操作</h1><h2 id="Kafka介绍"><a href="#Kafka介绍" class="headerlink" title="Kafka介绍"></a>Kafka介绍</h2><ul><li>官方介绍：一个分布式流处理平台</li><li>Kafka是基于zookeeper的分布式消息系统</li><li>Kafka具有高吞吐率、高性能、实时及高可靠等特点</li></ul><br><h2 id="Kafka安装"><a href="#Kafka安装" class="headerlink" title="Kafka安装"></a>Kafka安装</h2><ul><li>安装准备<ul><li>jdk-8u181-linux-x64.tar.gz（因为Kafka是scala开发的，scala是基于jdk的，固需需要安装jdk）</li><li>apache-zookeeper-3.5.7-bin.tar.gz</li><li>kafka_2.11-2.4.0.tgz</li></ul></li></ul><br><h3 id="step1-安装jdk"><a href="#step1-安装jdk" class="headerlink" title="step1 安装jdk"></a>step1 安装jdk</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备jdk安装包，并解压到 /usr/local/ 目录下</span></span><br><span class="line">tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">ln -s jdk-8u181-linux-x64 jdk1.8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">配置jdk环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文档末尾追加如下内容</span></span><br><span class="line">export JAVA_HOME=/usr/local/jdk1.8</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证jdk环境</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><br><h3 id="step2-安装zookeeper"><a href="#step2-安装zookeeper" class="headerlink" title="step2 安装zookeeper"></a>step2 安装zookeeper</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class="line">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">ln -s apache-zookeeper-3.5.7-bin zookeeper</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备配置文件</span></span><br><span class="line">cd /usr/local/zookeeper/conf/</span><br><span class="line"></span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">vim zoo.cfg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 dataDir 然后保存（生产环境应该把dataDir设置成磁盘比较大的目录）</span></span><br><span class="line">dataDir=/usr/local/zookeeper/data</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建data目录</span></span><br><span class="line">mkdir -p /usr/local/zookeeper/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动zookeeper</span></span><br><span class="line">cd /usr/local/zookeeper/bin/</span><br><span class="line">./zkServer.sh start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用zookeeper 自带的客户端连接 zookeeper</span></span><br><span class="line">cd /usr/local/zookeeper/bin/</span><br><span class="line">./zkCli.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><h3 id="step3-安装Kafka"><a href="#step3-安装Kafka" class="headerlink" title="step3 安装Kafka"></a>step3 安装Kafka</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">准备zookeeper安装包，并解压到 /usr/local/ 目录下</span></span><br><span class="line">tar -zxvf kafka_2.11-2.4.0.tar.gz -C /usr/local/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建软连接</span></span><br><span class="line">ln -s kafka_2.11-2.4.0 kafka</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置文件</span></span><br><span class="line">cd /usr/local/kafka/config/</span><br><span class="line"></span><br><span class="line">vim server.properties</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line">listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class="line"></span><br><span class="line">advertised.listeners=PLAINTEXT://192.168.146.135:9092</span><br><span class="line"></span><br><span class="line">log.dirs=/usr/local/kafka/kafka-logs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意生产环境该配置会变化，目前我们就使用如下配置，保持不变</span></span><br><span class="line">zookeeper.connect=localhost:2181</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">####################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建logs目录</span></span><br><span class="line">mkdir -p /usr/local/kafka/kafka-logs</span><br></pre></td></tr></table></figure><br><h2 id="Kafka常用命令"><a href="#Kafka常用命令" class="headerlink" title="Kafka常用命令"></a>Kafka常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意执行命令需要在kafka的根目录下</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1、启动Kafka</span></span><br><span class="line">bin/kafka-server-start.sh config/server.properties &amp;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2、停止Kafka</span></span><br><span class="line">bin/kafka-server-stop.sh</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3、创建Topic</span></span><br><span class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic jiangzh-topic</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4、查看已经创建的Topic信息</span></span><br><span class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5、发送消息</span></span><br><span class="line">bin/kafka-console-producer.sh --broker-list 192.168.61.130:9092 --topic jiangzh-topic</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6、接收消息</span></span><br><span class="line">bin/kafka-console-consumer.sh --bootstrap-server 192.168.61.130:9092 --topic jiangzh-topic --from-beginning</span><br></pre></td></tr></table></figure><br><h2 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h2><ul><li>Topic：一个虚拟的概念，由1到多个Partitions组成</li><li>Partition：实际消息存储单位</li><li>Producer：消息生产者</li><li>Consumer：消息消费者</li></ul><br><br><br><h1 id="第4章-Kafka核心API——Kafka客户端操作"><a href="#第4章-Kafka核心API——Kafka客户端操作" class="headerlink" title="第4章 Kafka核心API——Kafka客户端操作"></a>第4章 Kafka核心API——Kafka客户端操作</h1><h2 id="五类Kafka客户端-API"><a href="#五类Kafka客户端-API" class="headerlink" title="五类Kafka客户端 API"></a>五类Kafka客户端 API</h2><ul><li>AdminClient API: 允许管理和检测Topicbroker以及其它Kafka对象</li><li>Producer API: 发布消息到1个或多个topic</li><li>Consumer APl: 订阅一个或多个topic，并处理产生的消息</li><li>Streams API:高效地将输入流转换到输出流</li><li>Connector APl: 从一些源系统或应用程序中拉取数据到kafka</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32hkgl5c6x20.webp" width="60%"><br><h2 id="AdminClient客户端建立"><a href="#AdminClient客户端建立" class="headerlink" title="AdminClient客户端建立"></a>AdminClient客户端建立</h2><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3dkg228f3zm0.webp" width="70%"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminSimple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> adminClient();</span><br><span class="line">        System.out.println(<span class="string">&quot;adminClient:&quot;</span>+adminClient);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AdminClient <span class="title function_">adminClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class="line">        <span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> AdminClient.create(properties);</span><br><span class="line">        <span class="keyword">return</span> adminClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="创建Topic演示"><a href="#创建Topic演示" class="headerlink" title="创建Topic演示"></a>创建Topic演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminSimple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        AdminClient adminClient = adminClient();</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;adminClient:&quot;+adminClient);</span></span><br><span class="line">        createTopic();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createTopic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> adminClient();</span><br><span class="line">        <span class="type">short</span> <span class="variable">rs</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">NewTopic</span> <span class="variable">newTopic</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NewTopic</span>(<span class="string">&quot;demo_topic&quot;</span>,<span class="number">10</span>,rs);</span><br><span class="line">        <span class="type">CreateTopicsResult</span> <span class="variable">topics</span> <span class="operator">=</span> adminClient.createTopics(Arrays.asList(newTopic));</span><br><span class="line">        System.out.println(<span class="string">&quot;CreateTopicsResult :&quot;</span>+topics.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AdminClient <span class="title function_">adminClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">&quot;192.168.146.135:9092&quot;</span>);</span><br><span class="line">        <span class="type">AdminClient</span> <span class="variable">adminClient</span> <span class="operator">=</span> AdminClient.create(properties);</span><br><span class="line">        <span class="keyword">return</span> adminClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><br><br><br><img src="" width="60%"><br><br><br><br><h1 id="学习备注-1"><a href="#学习备注-1" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-课程导学与学习指南&quot;&gt;&lt;a href=&quot;#第1章-课程导学与学习指南&quot; class=&quot;headerlink&quot; title=&quot;第1章 课程导学与学习指南&quot;&gt;&lt;/a&gt;第1章 课程导学与学习指南&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h1 id=&quot;第2章</summary>
      
    
    
    
    <category term="MQ" scheme="https://ratears.github.io/dev.ratears.life/Categories/MQ/"/>
    
    <category term="Kafka" scheme="https://ratears.github.io/dev.ratears.life/Categories/MQ/Kafka/"/>
    
    
    <category term="Kafka" scheme="https://ratears.github.io/dev.ratears.life/Tags/Kafka/"/>
    
    <category term="MQ" scheme="https://ratears.github.io/dev.ratears.life/Tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>《Redis 核心技术与实战》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8ARedis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8ARedis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98%E3%80%8BStudy-Notes/</id>
    <published>2023-03-04T08:42:03.000Z</published>
    <updated>2023-03-04T08:42:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词-这样学Redis，才能技高一筹"><a href="#开篇词-这样学Redis，才能技高一筹" class="headerlink" title="开篇词 | 这样学Redis，才能技高一筹"></a>开篇词 | 这样学Redis，才能技高一筹</h2><h3 id="Redis-的坑"><a href="#Redis-的坑" class="headerlink" title="Redis 的坑"></a>Redis 的坑</h3><ul><li>使用 Redis 遇到的坑总的来说大致是以下四方面：<ul><li>CPU使用上的“坑”，例如数据结构的复杂度、跨CPU核的访问；</li><li>内存使用上的“坑”，例如主从同步和AOF的内存竞争；</li><li>存储持久化上的“坑”，例如在SSD上做快照的性能抖动；</li><li>网络通信上的“坑”，例如多实例时的异常网络丢包。</li></ul></li></ul><br><h3 id="为什么懂得了一个个技术点，却依然用不好Redis？"><a href="#为什么懂得了一个个技术点，却依然用不好Redis？" class="headerlink" title="为什么懂得了一个个技术点，却依然用不好Redis？"></a>为什么懂得了一个个技术点，却依然用不好Redis？</h3><ul><li>急于解决这些细微的问题，Redis 使用能力就很难得到质的提升。</li><li><strong>只关注零散的技术点，没有建立起一套完整的知识框架，缺乏系统观，但是，系统观其实是至关重要的。</strong>（在解决问题时，拥有了系统观，就意味着能有依据、有章法地定位和解决问题。）</li><li>案例分析，把Redis的长尾延迟维持在一定阈值以下：</li></ul><blockquote><p>首先，我对Redis的线程模型做了分析，我发现，对于单线程的Redis而言，任何阻塞性操作都会导致长尾延迟的产生。接着，我又开始寻找可能导致阻塞的关键因素，一开始想到的是网络阻塞，但随着对Redis网络框架的理解，我知道Redis网络IO使用了IO复用机制，并不会阻塞在单个客户端上。</p><p>再后来，我又把目光转向了键值对数据结构、持久化机制下的fork调用、主从库同步时的AOF重写，以及缓冲区溢出等多个方面。绕了一大圈子之后，这条影响长尾延迟的“证据链”才得以形成。这样一来，我也系统地掌握了影响Redis性能的关键因素路径，之后再碰到类似的问题时，我就可以轻松解决了。</p></blockquote><br><h3 id="高效地形成系统观？"><a href="#高效地形成系统观？" class="headerlink" title="高效地形成系统观？"></a>高效地形成系统观？</h3><ul><li><p>抓住主线，在自己的脑海中绘制一幅Redis全景知识图</p></li><li><p>Redis知识全景图都包括：“两大维度，三大主线</p></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.5ahfyy03lgw0.webp" width="90%"><br><h4 id="两大维度"><a href="#两大维度" class="headerlink" title="两大维度"></a>两大维度</h4><ul><li><p>系统维度：</p><ul><li>了解Redis的各项关键技术的设计原理，这些能够为你判断和推理问题打下坚实的基础，而且，你还能从中掌握一些优雅的系统设计规范，例如run-to-complete模型、epoll网络模型，这些可以应用到你后续的系统开发实践中。</li></ul></li><li><p>应用维度</p><ul><li><strong>应用场景驱动</strong><ul><li>缓存和集群是Redis的两大广泛的应用场景。提到缓存场景，你肯定会想到缓存机制、缓存替换、缓存异常等一连串的问题。</li></ul></li><li><strong>典型案例驱动</strong><ul><li>只有特定的业务场景下（比如亿级访问压力场景）才会出现，并不是普遍现象。可以用“典型案例驱动”的方式学习了。我们可以重点解读一些对Redis的“三高”特性影响较大的使用案例，例如，多家大厂在万亿级访问量和万亿级数据量的情况下对Redis的深度优化，解读这些优化实践，非常有助于你透彻地理解Redis。而且，你还可以梳理一些方法论，做成Checklist，就像是一个个锦囊，之后当你遇到问题的时候，就可以随时拿出自己的“锦囊妙计”解决问题了。</li></ul></li></ul></li></ul><h4 id="三大主线"><a href="#三大主线" class="headerlink" title="三大主线"></a>三大主线</h4><ul><li><strong>高性能主线</strong>，包括线程模型、数据结构、持久化、网络框架；</li><li><strong>高可靠主线</strong>，包括主从复制、哨兵机制；</li><li><strong>高可扩展主线</strong>，包括数据分片、负载均衡。</li></ul><h4 id="Redis-问题画像图"><a href="#Redis-问题画像图" class="headerlink" title="Redis 问题画像图"></a>Redis 问题画像图</h4><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.79lpd8yedvw0.webp" width="100%"><br><blockquote><p>举个例子，如果你遇到了Redis的响应变慢问题，对照着这张图，你就可以发现，这个问题和Redis的性能主线相关，而性能主线又和数据结构、异步机制、RDB、AOF重写相关。找到了影响的因素，解决起来也就很容易了。</p></blockquote><blockquote><p>在学习和使用的过程中，你完全可以根据你自己的方式，完善这张画像图，把你自己实践或掌握到的新知识点，按照“问题 –&gt; 主线 –&gt; 技术点”的方式梳理出来，放到这张图上。这样一来，你的积累越来越多，画像也会越来越丰富。以后在遇到问题的时候，就很容易解决了。</p></blockquote><br><h3 id="课程是如何设计的？"><a href="#课程是如何设计的？" class="headerlink" title="课程是如何设计的？"></a>课程是如何设计的？</h3><ul><li><strong>基础篇：打破技术点之间的壁垒，带你建立网状知识结构</strong><ul><li>具体讲解数据结构、线程模型、持久化等</li></ul></li></ul><ul><li><strong>实践篇：场景和案例驱动，取人之长，梳理出一套属于你自己的“武林秘籍”</strong><ul><li>“案例”层面：介绍数据结构的合理使用、避免请求阻塞和抖动、避免内存竞争和提升内存使用效率</li><li>“场景”层面：<ul><li>缓存场景：重点讲解缓存基本原理及淘汰策略，还有雪崩、穿透、污染等异常情况</li><li>集群场景：围绕集群方案优化、数据一致性、高并发访问等问题，聊聊可行的解决方案。</li></ul></li></ul></li></ul><ul><li><strong>未来篇：具有前瞻性，解锁新特性</strong><ul><li>Redis6 新特性</li><li>以及当前业界对Redis的最新探索，这会让你拥有前瞻性视角，了解Redis的发展路线图，为未来的发展提前做好准备。</li></ul></li></ul><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Redis是一个非常优秀的系统，它在CPU使用、内存组织、存储持久化和网络通信这四大方面的设计非常经典，而这些，基本涵盖了一个优秀的后端系统工程师需要掌握的核心知识和关键技术。希望你通过这个课程的学习，成长为一名优秀的系统工程师。</li></ul><br><br><br><h1 id="基础篇-10讲"><a href="#基础篇-10讲" class="headerlink" title="基础篇 (10讲)"></a>基础篇 (10讲)</h1><h2 id="01-基本架构：一个键值数据库包含什么？"><a href="#01-基本架构：一个键值数据库包含什么？" class="headerlink" title="01 | 基本架构：一个键值数据库包含什么？"></a>01 | 基本架构：一个键值数据库包含什么？</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>更好的学习方式就是先建立起“<strong>系统观</strong>”：想要深入理解和优化Redis，就必须要对它的总体架构和关键模块有一个全局的认知，然后再深入到具体的技术点。</li><li>经过这样一个过程，我们在实践中定位和解决问题时，就会轻松很多，而且你还可以把这个学习方式迁移到其他的学习活动上。彻底掌握这个学习思路，让自己的学习、工作效率更高。</li></ul><h3 id="构造简单的键值数据库-SimpleKV"><a href="#构造简单的键值数据库-SimpleKV" class="headerlink" title="构造简单的键值数据库 SimpleKV"></a>构造简单的键值数据库 SimpleKV</h3><ul><li>我们只需要关注整体架构和核心模块。我们通过剖析这个最简单的键值数据库，来迅速抓住学习和调优Redis的关键。</li><li>开始构造SimpleKV时，首先就要考虑里面可以存什么样的数据，对数据可以做什么样的操作，也就是数据模型和操作接口。</li><li>才能明白 Redis，它到底能做什么，不能做什么呢？只有先搞懂它的数据模型和操作接口，我们才能真正把“这块好钢用在刀刃上”。</li></ul><h3 id="可以存哪些数据？"><a href="#可以存哪些数据？" class="headerlink" title="可以存哪些数据？"></a>可以存哪些数据？</h3><ul><li>在对键值数据库进行选型时，一个重要的考虑因素是<strong>它支持的value类型</strong>。（例如，Memcached支持的value类型仅为String类型，而Redis支持的value类型包括了String、哈希表、列表、集合等。<strong>Redis能够在实际业务场景中得到广泛的应用，就是得益于支持多样化类型的value</strong>。）</li><li>从使用的角度来说，不同value类型的实现，不仅可以支撑不同业务的数据需求，而且也隐含着不同数据结构在性能、空间效率等方面的差异，从而导致不同的value操作之间存在着差异。</li><li>对于键值数据库而言，基本的数据模型是key-value模型</li><li>在SimpleKV中，key是String类型，而value是基本数据类型</li><li>从使用的角度来说，不同value类型的实现，不仅可以支撑不同业务的数据需求，而且也隐含着不同数据结构在性能、空间效率等方面的差异，从而导致不同的value操作之间存在着差异。</li><li><strong>理解了这背后的原理，我们才能在选择Redis value类型和优化Redis性能时，做到游刃有余。</strong></li></ul><h3 id="可以对数据做什么操作？"><a href="#可以对数据做什么操作？" class="headerlink" title="可以对数据做什么操作？"></a>可以对数据做什么操作？</h3><ul><li><p>SimpleKV需要支持的3种基本操作</p><ul><li>PUT：新写入或更新一个key-value对；</li><li>GET：根据一个key读取相应的value值；</li><li>DELETE：根据一个key删除整个key-value对。</li></ul></li><li><p><strong>有些键值数据库的新写/更新操作叫SET</strong>。新写入和更新虽然是用一个操作接口，但在实际执行时，会根据key是否存在而执行相应的新写或更新流程。</p></li><li><p><strong>根据一段key的范围返回相应的value值</strong>。因此，<strong>PUT/GET/DELETE/SCAN是一个键值数据库的基本操作集合</strong>。</p></li><li><p>实际业务场景通常还有更加丰富的需求（可以增加EXISTS操作接口，用于判断某个key是否存在）</p></li><li><p>当一个键值数据库的value类型多样化时，就需要包含相应的操作接口。（Redis的value有列表类型，因此它的接口就要包括对列表value的操作）</p></li></ul><h3 id="键值对保存在内存还是外存？"><a href="#键值对保存在内存还是外存？" class="headerlink" title="键值对保存在内存还是外存？"></a><strong>键值对保存在内存还是外存？</strong></h3><table><thead><tr><th align="center">-</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td align="center">保存在内存</td><td>读写快，内存的访问速度一般都在百ns级别</td><td>潜在的风险是一旦掉电，所有的数据都会丢失。</td></tr><tr><td align="center">保存在外存</td><td>避免数据丢失</td><td>限于磁盘的慢速读写（通常在几ms级别），键值数据库的整体性能会被拉低。</td></tr></tbody></table><ul><li><strong>如何进行设计选择，我们通常需要考虑键值数据库的主要应用场景</strong>。</li><li>缓存场景下的数据需要能快速访问但允许丢失，那么，用于此场景的键值数据库通常采用内存保存键值数据。</li></ul><ul><li>SimpleKV就采用内存保存键值数据。</li><li>SimpleKV的基本组件（大体来说，一个键值数据库包括了<strong>访问框架、索引模块、操作模块和存储模块</strong>四部分）</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677935790805.4uoprcbmpy80.webp" width="70%"><br><h3 id="采用什么访问模式？"><a href="#采用什么访问模式？" class="headerlink" title="采用什么访问模式？"></a>采用什么访问模式？</h3><h4 id="常用的两种访问模式"><a href="#常用的两种访问模式" class="headerlink" title="常用的两种访问模式"></a>常用的两种访问模式</h4><ul><li>（1）<strong>通过函数库调用的方式供外部应用使用</strong>，比如，上图中的libsimplekv.so，就是以动态链接库的形式链接到我们自己的程序中，提供键值存储功能；</li><li>（2）<strong>通过网络框架以Socket通信的形式对外提供键值对操作</strong>，这种形式可以提供广泛的键值存储服务。在上图中，我们可以看到，网络框架中包括Socket Server和协议解析。</li></ul><blockquote><p>不同的键值数据库服务器和客户端交互的协议并不相同，我们在对键值数据库进行二次开发、新增功能时，必须要了解和掌握键值数据库的通信协议，这样才能开发出兼容的客户端。</p></blockquote><blockquote><p>实际的键值数据库也基本采用上述两种方式，例如，RocksDB以动态链接库的形式使用，而Memcached和Redis则是通过网络框架访问。</p></blockquote><h4 id="I-O模型设计"><a href="#I-O模型设计" class="headerlink" title="I/O模型设计"></a>I/O模型设计</h4><ul><li>通过网络框架提供键值存储服务，一方面扩大了键值数据库的受用面，但另一方面，也给键值数据库的性能、运行模型提供了不同的设计选择，带来了一些潜在的问题。</li><li>举个例子，当客户端发送一个如下的命令后，该命令会被封装在网络包中发送给键值数据库：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT &quot;hello&quot; &quot;world&quot;</span><br></pre></td></tr></table></figure><ul><li>键值数据库网络框架接收到网络包，并按照相应的协议进行解析之后，就可以知道，客户端想写入一个键值对，并开始实际的写入流程。此时，我们会遇到一个系统设计上的问题，简单来说，就是网络连接的处理、网络请求的解析，以及数据存取的处理，是用一个线程、多个线程，还是多个进程来交互处理呢？该如何进行设计和取舍呢？我们一般把这个问题称为I/O模型设计。不同的I/O模型对键值数据库的性能和可扩展性会有不同的影响。</li><li>举个例子，如果一个线程既要处理网络连接、解析请求，又要完成数据存取，一旦某一步操作发生阻塞，整个线程就会阻塞住，这就降低了系统响应速度。如果我们采用不同线程处理不同操作，那么，某个线程被阻塞时，其他线程还能正常运行。但是，不同线程间如果需要访问共享资源，那又会产生线程竞争，也会影响系统效率，这又该怎么办呢？所以，这的确是个“两难”选择，需要我们进行精心的设计。</li><li><strong>经常听说Redis是单线程，那么，Redis又是如何做到“单线程，高性能”的呢？</strong></li></ul><br><h3 id="如何定位键值对的位置？"><a href="#如何定位键值对的位置？" class="headerlink" title="如何定位键值对的位置？"></a>如何定位键值对的位置？</h3><ul><li>SimpleKV 需要查找所要操作的键值对是否存在，这依赖于键值数据库的索引模块。<strong>索引的作用是让键值数据库根据key找到相应value的存储位置，进而执行操作</strong>。</li><li>索引的类型有很多：常见的有哈希表、B+树、字典树等</li><li>Memcached和Redis采用哈希表作为key-value索引，而RocksDB则采用跳表作为内存中key-value的索引。</li><li>一般而言，内存键值数据库（例如Redis）采用哈希表作为索引：原因在于，其键值数据基本都是保存在内存中的，而内存的高性能随机访问特性可以很好地与哈希表O(1)的操作复杂度相匹配。</li><li>SimpleKV的索引根据key找到value的存储位置即可。</li><li>对于Redis而言，它的value支持多种类型，当我们通过索引找到一个key所对应的value后，仍然需要从value的复杂结构（例如集合和列表）中进一步找到我们实际需要的数据，这个操作的效率本身就依赖于它们的实现结构。</li><li>Redis采用一些常见的高效索引结构作为某些value类型的底层数据结构，这一技术路线为Redis实现高性能访问提供了良好的支撑。</li></ul><h3 id="不同操作的具体逻辑是怎样的？"><a href="#不同操作的具体逻辑是怎样的？" class="headerlink" title="不同操作的具体逻辑是怎样的？"></a>不同操作的具体逻辑是怎样的？</h3><ul><li>SimpleKV的操作模块就实现了不同操作的具体逻辑：<ul><li>对于GET/SCAN操作而言，此时根据value的存储位置返回value值即可；</li><li>对于PUT一个新的键值对数据而言，SimpleKV需要为该键值对分配内存空间；</li><li>对于DELETE操作，SimpleKV需要删除键值对，并释放相应的内存空间，这个过程由分配器完成。</li></ul></li></ul><h3 id="如何实现重启后快速提供服务？"><a href="#如何实现重启后快速提供服务？" class="headerlink" title="如何实现重启后快速提供服务？"></a>如何实现重启后快速提供服务？</h3><ul><li>SimpleKV采用了常用的内存分配器glibc的malloc和free，因此，SimpleKV并不需要特别考虑内存空间的管理问题。<ul><li>键值数据库的键值对通常大小不一，glibc的分配器在处理随机的大小内存块分配时，表现并不好。一旦保存的键值对数据规模过大，就可能会造成较严重的内存碎片问题。</li><li>分配器是键值数据库中的一个关键因素。对于以内存存储为主的Redis而言，这点尤为重要。Redis的内存分配器提供了多种选择，分配效率也不一样</li></ul></li><li>SimpleKV重启后能快速重新提供服务，所以，在SimpleKV的存储模块中增加了持久化功能。</li><li>鉴于磁盘管理要比内存管理复杂，SimpleKV就直接采用了文件形式，将键值数据通过调用本地文件系统的操作接口保存在磁盘上。</li><li>SimpleKV只需要考虑何时将内存中的键值数据保存到文件中<ul><li>对于每一个键值对，SimpleKV都对其进行落盘保存（数据更加安全可靠，但性能受影响）</li><li>SimpleKV只是周期性地把内存中的键值数据保存到文件中（避免写盘操作的性能影响，潜在代价是数据有丢失风险）</li></ul></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677950601417.5vtydx0t9540.webp" width="90%"><br><ul><li>从SimpleKV演进到Redis，有以下几个重要变化：<ul><li>Redis主要通过网络框架进行访问，而不再是动态库了，这也使得Redis可以作为一个基础性的网络服务进行访问，扩大了Redis的应用范围。</li><li>Redis数据模型中的value类型很丰富，因此也带来了更多的操作接口，例如面向列表的LPUSH/LPOP，面向集合的SADD/SREM等。</li><li>Redis的持久化模块能支持两种方式：日志（AOF）和快照（RDB），这两种持久化方式具有不同的优劣势，影响到Redis的访问性能和可靠性。</li><li>SimpleKV是个简单的单机键值数据库，但是，Redis支持高可靠集群和高可扩展集群，因此，Redis中包含了相应的集群功能支撑模块。</li></ul></li></ul><br><br><br><h2 id="02-数据结构：快速的Redis有哪些慢操作？"><a href="#02-数据结构：快速的Redis有哪些慢操作？" class="headerlink" title="02 | 数据结构：快速的Redis有哪些慢操作？"></a>02 | 数据结构：快速的Redis有哪些慢操作？</h2><h3 id="Redis为什么这么快，快在哪里呢？"><a href="#Redis为什么这么快，快在哪里呢？" class="headerlink" title="Redis为什么这么快，快在哪里呢？"></a>Redis为什么这么快，快在哪里呢？</h3><ul><li>一个重要的表现：它接收到一个键值对操作后，能以<strong>微秒级别</strong>的速度找到数据，并快速完成操作。</li><li>它是内存数据库，所有操作都在内存上完成，内存的访问速度本身就很快。</li><li>Redis的 键值对是按一定的数据结构来组织的，操作键值对最终就是对数据结构进行增删改查操作，所以高效的数据结构是Redis快速处理数据的基础。</li><li>底层数据结构一共有6种，分别是简单动态字符串、双向链表、压缩列表、哈希表、跳表和整数数组。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/25c03cf39c78c8cb1789242cd98ae23.2i3m8lnoiya0.webp" width="100%"><br><ul><li>有些问题已经值得我们去考虑了：<ul><li>这些数据结构都是值的底层实现，键和值本身之间用什么结构组织？</li><li>为什么集合类型有那么多的底层结构，它们都是怎么组织数据的，都很快吗？</li><li>什么是简单动态字符串，和常用的字符串是一回事吗？</li></ul></li></ul><h3 id="键和值用什么结构组织？"><a href="#键和值用什么结构组织？" class="headerlink" title="键和值用什么结构组织？"></a>键和值用什么结构组织？</h3><br><br><br><h2 id="03-高性能IO模型：为什么单线程Redis能那么快？"><a href="#03-高性能IO模型：为什么单线程Redis能那么快？" class="headerlink" title="03 | 高性能IO模型：为什么单线程Redis能那么快？"></a>03 | 高性能IO模型：为什么单线程Redis能那么快？</h2><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="100%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词-这样学Redis，才能技高一筹&quot;&gt;&lt;a href=&quot;#开篇词-这样学Redis，才</summary>
      
    
    
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/"/>
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/Redis/"/>
    
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Tags/Redis/"/>
    
    <category term="Cache" scheme="https://ratears.github.io/dev.ratears.life/Tags/Cache/"/>
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Study Notes（1）：Mybatis Introduction</title>
    <link href="https://ratears.github.io/dev.ratears.life/Mybatis-Study-Notes%EF%BC%881%EF%BC%89%EF%BC%9AMybatis-Introduction/"/>
    <id>https://ratears.github.io/dev.ratears.life/Mybatis-Study-Notes%EF%BC%881%EF%BC%89%EF%BC%9AMybatis-Introduction/</id>
    <published>2023-03-03T14:37:20.000Z</published>
    <updated>2023-03-03T14:37:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="framework"><a href="#framework" class="headerlink" title="framework"></a>framework</h1><ul><li>Java常⽤框架<ul><li>SSM三⼤框架：Spring + SpringMVC + MyBatis</li><li>SpringBoot</li><li>SpringCloud</li><li>……</li></ul></li><li>框架其实就是对通⽤代码的封装，提前写好了⼀堆接⼝和类，我们可以在做项⽬的时候直接引⼊这些接⼝和类（引⼊框架），基于这些现有的接⼝和类进⾏开发，可以⼤⼤提⾼开发效率。</li><li>框架⼀般都以jar包的形式存在。(jar包中有class⽂件以及各种配置⽂件等。)</li></ul><br><br><br><h1 id="三层架构介绍"><a href="#三层架构介绍" class="headerlink" title="三层架构介绍"></a>三层架构介绍</h1><ul><li>表现层（UI）：直接跟前端打交互（⼀是接收前端ajax请求，⼆是返回json数据给前端）</li><li>业务逻辑层（BLL）：⼀是处理表现层转发过来的前端请求（也就是具体业务），⼆是将从持久层获取的数据返回到表现层。</li><li>数据访问层（DAL）：直接操作数据库完成CRUD，并将获得的数据返回到上⼀层（也就是业务逻辑层）。</li></ul><br><br><br><h1 id="JDBC-的不⾜"><a href="#JDBC-的不⾜" class="headerlink" title="JDBC 的不⾜"></a>JDBC 的不⾜</h1><ul><li>示例代码1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// sql语句写死在java程序中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into t_user(id,idCard,username,password,birth,gender,</span></span><br><span class="line"><span class="string">email,city,street,zipcode,phone,grade) values(?,?,?,?,?,?,?,?,?,?,?,?)&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 繁琐的赋值：思考⼀下，这种有规律的代码能不能通过反射机制来做⾃动化。</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">&quot;123456789&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">3</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">4</span>, <span class="string">&quot;123456&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">5</span>, <span class="string">&quot;1980-10-11&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">6</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">7</span>, <span class="string">&quot;zhangsan@126.com&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">8</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">9</span>, <span class="string">&quot;⼤兴区凉⽔河⼆街&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">10</span>, <span class="string">&quot;1000000&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">11</span>, <span class="string">&quot;16398574152&quot;</span>);</span><br><span class="line">ps.setString(<span class="number">12</span>, <span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="comment">// 执⾏SQL</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> ps.executeUpdate();</span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><br><ul><li>示例代码2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// sql语句写死在java程序中</span></span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,idCard,username,password,birth,gender,email,city,s</span></span><br><span class="line"><span class="string">treet,zipcode,phone,grade from t_user&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 思考以下循环中的所有代码是否可以使⽤反射进⾏⾃动化封装。</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">idCard</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;idCard&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;username&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">birth</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;birth&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;email&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;city&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">street</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;street&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">zipcode</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;zipcode&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">grade</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;grade&quot;</span>);</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="comment">// 给对象属性赋值</span></span><br><span class="line">user.setId(id);</span><br><span class="line">user.setIdCard(idCard);</span><br><span class="line">user.setUsername(username);</span><br><span class="line">user.setPassword(password);</span><br><span class="line">user.setBirth(birth);</span><br><span class="line">user.setGender(gender);</span><br><span class="line">user.setEmail(email);</span><br><span class="line">user.setCity(city);</span><br><span class="line">user.setStreet(street);</span><br><span class="line">user.setZipcode(zipcode);</span><br><span class="line">user.setPhone(phone);</span><br><span class="line">user.setGrade(grade);</span><br><span class="line"><span class="comment">// 添加到集合</span></span><br><span class="line">userList.add(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br></pre></td></tr></table></figure><br><ul><li>JDBC的不足<ul><li>SQL语句写死在Java程序中，不灵活。改SQL的话就要改Java代码。违背开闭原则OCP。</li><li>给?传值是繁琐的。能不能⾃动化？？？</li><li>将结果集封装成Java对象是繁琐的。能不能⾃动化？？？</li></ul></li></ul><br><br><br><h1 id="了解-MyBatis"><a href="#了解-MyBatis" class="headerlink" title="了解 MyBatis"></a>了解 MyBatis</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p></li><li><p>MyBatis本质上就是对JDBC的封装，通过MyBatis完成CRUD。</p></li></ul><br><h2 id="MyBatis-历史"><a href="#MyBatis-历史" class="headerlink" title="MyBatis 历史"></a>MyBatis 历史</h2><ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁<br>移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于<br>2013年11月迁移到Github。</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架<br>包括SQL Maps和Data Access Objects（DAO）。</li></ul><br><h2 id="ORM：对象关系映射"><a href="#ORM：对象关系映射" class="headerlink" title="ORM：对象关系映射"></a>ORM：对象关系映射</h2><ul><li>O（Object）：Java虚拟机中的Java对象</li><li>R（Relational）：关系型数据库</li><li>M（Mapping）：将Java虚拟机中的Java对象映射到数据库表中⼀⾏记录，或是将数据库表中⼀⾏记录映射成Java虚拟机中的⼀个Java对象。</li></ul><br><h2 id="MyBatis框架特点"><a href="#MyBatis框架特点" class="headerlink" title="MyBatis框架特点"></a>MyBatis框架特点</h2><ul><li><p>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p></li><li><p>⽀持定制化 SQL、存储过程、基本映射以及⾼级映射</p></li><li><p>避免了⼏乎所有的 JDBC 代码中⼿动设置参数以及获取结果集</p></li><li><p>⽀持XML开发，也⽀持注解式开发。【为了保证sql语句的灵活，所以mybatis⼤部分是采⽤XML⽅式开发。】</p></li><li><p>将接⼝和 Java 的 POJOs(Plain Ordinary Java Object，简单普通的Java对象)映射成数据库中的记录</p></li><li><p>体积⼩好学：两个jar包，两个XML配置⽂件。</p></li><li><p>完全做到sql解耦合。</p></li><li><p>提供了基本映射标签。</p></li><li><p>提供了⾼级映射标签。</p></li><li><p>提供了XML标签，⽀持动态SQL的编写。</p></li><li><p>……</p></li></ul><br><h2 id="Mybatis-和其它持久化层技术对比"><a href="#Mybatis-和其它持久化层技术对比" class="headerlink" title="Mybatis 和其它持久化层技术对比"></a>Mybatis 和其它持久化层技术对比</h2><h3 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h3><ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul><br><h3 id="Hibernate-和-JPA"><a href="#Hibernate-和-JPA" class="headerlink" title="Hibernate 和 JPA"></a>Hibernate 和 JPA</h3><ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生产的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li><li>Hibernate属于全⾃动化的ORM框架。（使用Hibernate框架的时候，不需要程序员手动编写SQL语句，SQL语句可以自动生成。所以Hibernate是一个完全的全自动化的ORM框架）</li></ul><br><h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;framework&quot;&gt;&lt;a href=&quot;#framework&quot; class=&quot;headerlink&quot; title=&quot;framework&quot;&gt;&lt;/a&gt;framework&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Java常⽤框架&lt;ul&gt;
&lt;li&gt;SSM三⼤框架：Spring + Sp</summary>
      
    
    
    
    <category term="framework" scheme="https://ratears.github.io/dev.ratears.life/Categories/framework/"/>
    
    <category term="mybatis" scheme="https://ratears.github.io/dev.ratears.life/Categories/framework/mybatis/"/>
    
    
    <category term="mybatis" scheme="https://ratears.github.io/dev.ratears.life/Tags/mybatis/"/>
    
    <category term="ORM" scheme="https://ratears.github.io/dev.ratears.life/Tags/ORM/"/>
    
    <category term="framework" scheme="https://ratears.github.io/dev.ratears.life/Tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>《高级Redis进阶课 解决Redis实际问题+掌握Redis6.x特性》Study Notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%AB%98%E7%BA%A7Redis%E8%BF%9B%E9%98%B6%E8%AF%BE-%E8%A7%A3%E5%86%B3Redis%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98-%E6%8E%8C%E6%8F%A1Redis6-x%E7%89%B9%E6%80%A7%E3%80%8BStudy-Notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%AB%98%E7%BA%A7Redis%E8%BF%9B%E9%98%B6%E8%AF%BE-%E8%A7%A3%E5%86%B3Redis%E5%AE%9E%E9%99%85%E9%97%AE%E9%A2%98-%E6%8E%8C%E6%8F%A1Redis6-x%E7%89%B9%E6%80%A7%E3%80%8BStudy-Notes/</id>
    <published>2023-03-03T02:54:21.000Z</published>
    <updated>2023-03-03T02:54:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h1><h2 id="为何Redis经久不衰？"><a href="#为何Redis经久不衰？" class="headerlink" title="为何Redis经久不衰？"></a>为何Redis经久不衰？</h2><ul><li>功能强大、丰富<ul><li>丰富的数据结构、主从、集群、持久化、模块化、哨兵</li><li>能够支撑很多的互联网应用场景，比如缓存、分布式锁队列、集合、GEO.BitMap操作等</li></ul></li><li>持续改进</li><li>高性能<ul><li>底层C语言编写，内存数据库，通讯采用epoll非阻塞I/O多路复用机制</li></ul></li><li>线程安全<ul><li>单线程-原子操作（高并发下数据安全）</li></ul></li></ul><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><h3 id="课程项目架构"><a href="#课程项目架构" class="headerlink" title="课程项目架构"></a>课程项目架构</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/e7208bb05b39a307ee763120d570664.685ja194n3w0.webp" width="70%"><br><h3 id="以问带学"><a href="#以问带学" class="headerlink" title="以问带学"></a>以问带学</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.54s59g6nhpg0.webp" width="70%"><br><h3 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h3><ul><li>网络底层</li><li>事务处理</li><li>持久化原理</li><li>主从复制原理</li><li>哨兵机制</li><li>分片存储原理</li></ul><br><h3 id="底层算法"><a href="#底层算法" class="headerlink" title="底层算法"></a>底层算法</h3><ul><li>Sorted Set底层</li><li>Bitmap、Geo算法</li><li>数据过期淘汰算法</li><li>Leader选举流程</li><li>槽位定位算法</li><li>备份迁移及其算法</li></ul><br><h3 id="性能提升方案"><a href="#性能提升方案" class="headerlink" title="性能提升方案"></a>性能提升方案</h3><ul><li>Key与Value设计规范</li><li>避免BigKey</li><li>避免耗时操作</li><li>Pipeline管道操作</li><li>连接池性能优化</li><li>子进程的开销与优化</li></ul><br><h3 id="故障解决方案"><a href="#故障解决方案" class="headerlink" title="故障解决方案"></a>故障解决方案</h3><ul><li>数据延迟</li><li>数据脏读</li><li>数据抖动</li><li>数据一致性</li><li>热点数据存储</li><li>RDB文件损坏</li></ul><br><h2 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h2><ul><li>对Redis有兴趣，但不懂如何和项目深度结合</li><li>了解Redis日常操作，但不懂得Redis底层原理</li><li>遇到Redis故障完全没有思路，不知如何解决</li></ul><br><br><br><h1 id="第2章-Redis快速入门"><a href="#第2章-Redis快速入门" class="headerlink" title="第2章 Redis快速入门"></a>第2章 Redis快速入门</h1><h2 id="章节介绍"><a href="#章节介绍" class="headerlink" title="章节介绍"></a>章节介绍</h2><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="[学习目标]"></a>[学习目标]</h3><p>1、了解Redis为什么能流行这么多年，高性能的原因<br>2、掌握Redis环境安装以及配置<br>3、了解微服务项目的构建以及SpringBoot开发</p><br><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="[理论知识]"></a>[理论知识]</h3><p>1、缓存相关中间件 (Redis、 Memcache和Ehcache) 的比较<br>2、对Redis的基本理解<br>3、微服务相关概念</p><br><h3 id="实际操作"><a href="#实际操作" class="headerlink" title="[实际操作]"></a>[实际操作]</h3><p>1、Redis安装、配置以及启动<br>2、Redis的基本命令<br>3、数据库表结构设计<br>4、SpringBoot&amp;SpringCloud项目搭建</p><br><h2 id="Redis介绍"><a href="#Redis介绍" class="headerlink" title="Redis介绍"></a>Redis介绍</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>内存数据库，速度快，也支持数据的持久化</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供Lists、 Hashes、 Sets 、Sorted Sets 等多种数据结构的存储</li><li>Redis支持数据的备份 (master-slave) 与集群 (分片存储)，以及拥有哨兵监控机制.</li><li>支持事务</li></ul><br><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>性能极高 - Redis能读的速度是110000次/s，写的速度是81000次/s</li><li>丰富的数据类型 - Redis支持 Strings、 Lists、 Hashes、Sets 、Sorted Sets 等数据类型操作</li><li>原子操作 - Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行 (事务）</li><li>丰富的特性 - Redis还支持 publish/subscribe,通知,key 过期等特性。</li></ul><br><h3 id="Redis、Memcached、-Ehcache的区别"><a href="#Redis、Memcached、-Ehcache的区别" class="headerlink" title="Redis、Memcached、 Ehcache的区别"></a>Redis、Memcached、 Ehcache的区别</h3><ul><li>这三个中间件都可以应用于缓存，但目前市面上使用Redis的场景会更多，更广泛，其原因是: Redis性能高、原子操作、支持多种数据类型，主从复制与哨兵监控，持久化操作等。</li></ul><br><h2 id="Redis的高并发"><a href="#Redis的高并发" class="headerlink" title="Redis的高并发"></a>Redis的高并发</h2><ul><li>官方的bench-mark数据: 测试完成了50个并发执行100000个请求。设置和获取的值是一个256字节字符串。结果: 读的速度是110000次/s,写的速度是81000次/s。redis尽量少写多读，符合缓存的适用要求。单机redis支撑万级，如果10万+可以采用主从复制的模式。</li></ul><br><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>Redis是纯内存数据库，所以读取速度快。</li><li>Redis使用的是非阻塞10，10多路复用，减少了线程切换时上下文的切换和竞争</li><li>Redis采用了单线程的模型，保证了每个操作的原子性，也减少了线程的上下文切换和竞争</li><li>Redis存储结构多样化，不同的数据结构对数据存储进行了优化加快读取的速度</li><li>Redis采用自己实现的事件分离器，效率比较高，内部采用非阻塞的执行方式，吞吐能力比较大</li></ol><br><h3 id="Redis的单线程"><a href="#Redis的单线程" class="headerlink" title="Redis的单线程"></a>Redis的单线程</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><ul><li>不需要各种锁的性能消耗</li><li>单线程多进程集群方案</li><li>CPU消耗</li></ul><h4 id="优劣"><a href="#优劣" class="headerlink" title="优劣"></a>优劣</h4><ul><li>单进程单线程优势<ul><li>代码更清晰，处理逻辑更简单</li><li>不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li><li>不存在多进程或者多线程导致的切换而消耗CPU</li></ul></li><li>单进程单线程弊端<ul><li>无法发挥多核CPU性能，不过可以通过在单机开多个Redis实例来完善</li></ul></li></ul><br><h3 id="I-O多路复用技术"><a href="#I-O多路复用技术" class="headerlink" title="I/O多路复用技术"></a>I/O多路复用技术</h3><ul><li>redis 采用网络I/O多路复用技术来保证在多连接的时候，系统的高吞吐量。</li></ul><br><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><ul><li>Redis2.6<ul><li>键的过期时间支持毫秒</li><li>从节点支持只读功能</li></ul></li><li>Redis2.8<ul><li>可以用bind命令绑定多个IP地址</li><li>发布订阅添加了pub/sub</li><li>Redis Sentinel第二版，相比于Redis2.6的Redis Sentinel，此版本已经变成生产可用</li></ul></li><li>Redis3.0 (里程碑)<ul><li> Redis最大的改动就是添加Redis的分布式实现Redis cluster。</li></ul></li><li>Redis3.2<ul><li>添加GEO相关功能。</li><li>新的List编码类型: quicklist。</li></ul></li><li>Redis4.0 (重大改版)<ul><li>提供了模块系统，方便第三方开发者拓展Redis的功能</li><li>提供了新的缓存剔除算法: LFU (Last Frequently Used)，并对已有算法进行了优化</li><li>提供了非阻塞del和flushall/flushdb功能，有效解决删除了bigkey可能造成的Redis阻塞.</li><li>提供了RDB-AOF混合持久化格式，充分利用了AOF和RDB各自优势。</li></ul></li><li>Redis5.0<ul><li>新的stream数据类型</li><li>客户经常连接和断开连接时性能更好</li></ul></li><li>Redis6.0<ul><li>多线程I/O。多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程</li></ul></li></ul><br><h2 id="Redis软件安装"><a href="#Redis软件安装" class="headerlink" title="Redis软件安装"></a>Redis软件安装</h2><h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget -P /usr/local/src/ https://download.redis.io/releases/redis-6.0.9.tar.gz</span><br><span class="line"></span><br><span class="line">cd /usr/local/src/</span><br><span class="line">tar -zxvf redis-6.0.9.tar.gz</span><br></pre></td></tr></table></figure><br><h3 id="确保环境依赖（升级-GCC）"><a href="#确保环境依赖（升级-GCC）" class="headerlink" title="确保环境依赖（升级 GCC）"></a>确保环境依赖（升级 GCC）</h3><ul><li>在编译 Redis 6 之前需要升级 gc 的版本，默认情况 yum 安装的 gcc 版本是 4.8.5，由于版本过低，在编译时会报如下错误。所以我们需要执行以下操作升级 GCC。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Sc1 源</span></span><br><span class="line">yum install -y centos-release-scl scl-utils-build</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 9 版本的 gcc、gcc-c++、gdb 工具链 (toolchian)</span></span><br><span class="line">yum install -y devtoolset-9-toolchain</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">临时覆盖系统原有的 gcc 引用</span></span><br><span class="line">scl enable devtoolset-9 bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 gcc 当前版本</span></span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure><br><h3 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/redis-6.0.9/</span><br><span class="line">make</span><br></pre></td></tr></table></figure><br><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/redis-6.0.9</span><br><span class="line">cd /usr/local/src/redis-6.0.9/</span><br><span class="line">make PREFIX=/usr/local/redis-6.0.9 install</span><br></pre></td></tr></table></figure><br><h3 id="创建软连接"><a href="#创建软连接" class="headerlink" title="创建软连接"></a>创建软连接</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/</span><br><span class="line">ln -s redis-6.0.9/ redis</span><br></pre></td></tr></table></figure><br><h2 id="Redis的启动"><a href="#Redis的启动" class="headerlink" title="Redis的启动"></a>Redis的启动</h2><h3 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">bin/redis-server</span><br></pre></td></tr></table></figure><br><h3 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/local/src/redis-6.0.9/redis.conf /usr/local/redis/bin/</span><br><span class="line"></span><br><span class="line">cd /usr/local/redis/bin/</span><br><span class="line"></span><br><span class="line">vim redis.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改以守护进程方式启动</span></span><br><span class="line">daemonize yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用配置文件，后台启动</span></span><br><span class="line">cd /usr/local/redis/bin/</span><br><span class="line">./redis-server redis.conf</span><br></pre></td></tr></table></figure><br><h3 id="配置开机启动-centos7及以上"><a href="#配置开机启动-centos7及以上" class="headerlink" title="配置开机启动 (centos7及以上)"></a>配置开机启动 (centos7及以上)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在系统服务目录里创建redis.service文件</span></span><br><span class="line">vim /etc/systemd/system/redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写入以下内容:</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=redis-server</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重载系统服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭redis-server:</span> </span><br><span class="line">systemctl stop redis.service</span><br><span class="line"></span><br><span class="line">systemctl start redis.service</span><br><span class="line"></span><br><span class="line">systemctl status redis.service</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启成功，将服务加入开机自启</span></span><br><span class="line">systemctl enable redis.service</span><br></pre></td></tr></table></figure><br><h2 id="Redis-的配置"><a href="#Redis-的配置" class="headerlink" title="Redis 的配置"></a>Redis 的配置</h2><ul><li>daemonize默认情况下，redis 不是在后台运行的，如果需要在后台运行，把该项的值更改为 yes</li><li>bind指定 Redis 只接收来自于该IP 地址的请求</li><li>port监听端口，默认为 6379</li><li>databases设置数据库的个数，默认使用的数据库是0</li><li>save设置 Redis 进行数据库镜像的频率</li><li>dbfilename镜像备份文件的文件名</li><li>dir数据库镜像备份的文件放置的路径</li><li>requirepass设置客户端连接后进行任何其他指定前需要使用的密码</li><li>maxclients限制同时连接的客户数量</li><li>maxmemory设置redis 能够使用的最大内存</li></ul><br><h2 id="Redis-的客户端"><a href="#Redis-的客户端" class="headerlink" title="Redis 的客户端"></a>Redis 的客户端</h2><h3 id="Windows-客户端"><a href="#Windows-客户端" class="headerlink" title="Windows 客户端"></a>Windows 客户端</h3><ul><li> redis-desktop-manager</li></ul><h3 id="Redis-自带的客户端"><a href="#Redis-自带的客户端" class="headerlink" title="Redis 自带的客户端"></a>Redis 自带的客户端</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -a redis</span><br></pre></td></tr></table></figure><h3 id="Java-客户端"><a href="#Java-客户端" class="headerlink" title="Java 客户端"></a>Java 客户端</h3><ul><li>Redis的Java客户端也有很多: <a class="link"   href="https://redis,io/clients#java%EF%BC%8C%E5%85%B6%E4%B8%AD%E6%AF%94%E8%BE%83%E5%8F%97%E6%AC%A2%E8%BF%8E%E7%9A%84%E6%98%AFJedis%E5%92%8CLettuce" >https://redis,io/clients#java，其中比较受欢迎的是Jedis和Lettuce<i class="fas fa-external-link-alt"></i></a>.</li><li>Jedis在实现上是直接连接的redis server，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个Jedis实例增加物理连接，官方推荐。</li><li>Lettuce的连接是基于Netty的，连接实例 (StatefulRedisConnection)可以在多个线程间并发访问，因为StatefulRedisConnection是线程安全的，所以一个连接实例 (StatefulRedisConnection) 就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。</li><li>在SpringBoot Data Redis 1.X之前默认使用的是Jedis，但目前最新版的修改成了Lettuce。</li><li>之前公司使用Jedis居多，Letuce近两年在逐步上升，总的来进Jedis的性能会优于Lettuce (因为它是直接操作Redis)</li></ul><h4 id="Jedis-直连"><a href="#Jedis-直连" class="headerlink" title="Jedis 直连"></a>Jedis 直连</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立连接</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化 Jedis 客户端，声明主机和端口</span></span><br><span class="line">        jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;117.50.197.120&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">// 心跳机制检测是否连接成功</span></span><br><span class="line">        jedis.auth(<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">pong</span> <span class="operator">=</span> jedis.ping();</span><br><span class="line">        System.out.println(pong);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 选择/切换数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">select</span> <span class="operator">=</span> jedis.select(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;select = &quot;</span> + select);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入一条数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;MIKE&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">        <span class="comment">// 获取一条数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> != jedis) &#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jedis-连接池"><a href="#Jedis-连接池" class="headerlink" title="Jedis 连接池"></a>Jedis 连接池</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisPoolConnectRedis</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 创建连接池配置对象</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">jedisPoolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        <span class="comment">//设置最大连接数，默认 8</span></span><br><span class="line">        jedisPoolConfig.setMaxTotal(<span class="number">5</span>);</span><br><span class="line">       <span class="comment">// 设置最大空闲数量，默认 8</span></span><br><span class="line">        jedisPoolConfig.setMaxIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//设置最少空闲数量，默认 0</span></span><br><span class="line">        jedisPoolConfig.setMinIdle(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//设置等待时间ms</span></span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">//初始化 JedisPool 对象</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(jedisPoolConfig,<span class="string">&quot;117.50.197.120&quot;</span>,<span class="number">6379</span>,<span class="number">100</span>,<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 Jedis 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot-集成-Redis"><a href="#SpringBoot-集成-Redis" class="headerlink" title="SpringBoot 集成 Redis"></a>SpringBoot 集成 Redis</h3><ul><li>使用脚手架引入相关依赖</li><li>配置Redis</li><li>添加Redis序列化方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringdataDemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SpringdataDemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义RedisTemplate的bean，不使用默认的RedisTemplate</span></span><br><span class="line"><span class="comment">     * redisTemplate 默认序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisConnectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Jackson2JsonRedisSerialize 替换默认序列化</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置value的序列化规则和 key的序列化规则</span></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line"></span><br><span class="line">        redisTemplate.setHashKeySerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;SpringdataDemoApplication.class&#125;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringdataDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// PING PONG 心跳机制检测是否连接成功</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">pong</span> <span class="operator">=</span> redisTemplate.getConnectionFactory().getConnection().ping();</span><br><span class="line">        System.out.println(<span class="string">&quot;pong = &quot;</span> + pong);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 测试，插入一条数据</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">username</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;username = &quot;</span> + username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="需求分析与数据库设计"><a href="#需求分析与数据库设计" class="headerlink" title="需求分析与数据库设计"></a>需求分析与数据库设计</h2><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><ul><li>基于微服务进行项目开发，微服务是目前比较热门的架构方式，具有以下特点:<ul><li>职责单一: 理论上一个微服务只解决一件事 (小)</li><li>隔离性强:服务单独部署，服务之间互相隔离，互不影响，因此一个服务宕机并不影响其他服务运行。 (松)</li><li>开发简单:一个微服务解决一件事情，那么对开发团队的要求相对就减少(不论从人数还是开发语言都可以随心所欲)，能够快速提高开发效率。 (便)</li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/f6d621c79306be08a489aa8b5a25bbd.p9bxrb87v8g.webp" width="100%"><br><ul><li>本课程以美食社交APP后台API接口设计为例。涉及APP中用户、好友、订单为基础的相关业务，分为用户、好友、排行榜、优惠券/秒杀、订单、附近的人、Feed 等微服务。完成用户登录、交友、发朋友圈以及购买优惠券、下单整个业务流程，并实现积分排行榜以及附近的人等相关功能。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/fc177d4f8f0cfb45597b718d7b25aa9.263uplwrn0jk.webp" width="40%"><br><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Navicat Premium Data Transfer</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Source Server         : localhost</span></span><br><span class="line"><span class="comment"> Source Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Source Server Version : 80018</span></span><br><span class="line"><span class="comment"> Source Host           : localhost:3306</span></span><br><span class="line"><span class="comment"> Source Schema         : db_imooc</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Target Server Type    : MySQL</span></span><br><span class="line"><span class="comment"> Target Server Version : 80018</span></span><br><span class="line"><span class="comment"> File Encoding         : 65001</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Date: 14/11/2020 19:06:41</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> NAMES utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_dictionary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_dictionary`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_dictionary`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `data` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `display_order` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">415</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_dictionary</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;TableType           &#x27;</span>, <span class="string">&#x27;Regular|大厅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;TableType           &#x27;</span>, <span class="string">&#x27;Bar|吧台&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;TableType           &#x27;</span>, <span class="string">&#x27;Window|靠窗&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;TableType           &#x27;</span>, <span class="string">&#x27;Outdoor|户外&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;TableType           &#x27;</span>, <span class="string">&#x27;Private|包间&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;24|hours|24小时营业&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Afternoon|tea|下午茶&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;All|you|can|eat|自助餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Bistros|酒馆&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Breakfast|早餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Bund|view|外滩风景&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Classic|Shanghai|老上海&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Cocktails|鸡尾酒&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Credit|cards|accepted|可刷卡&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Delivery|可送外卖&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Pet|friendly|宠物友好&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Kids|friendly||适合小孩&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Fine|dining|顶级餐厅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Free|parking|免费停车&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Lounge|酒廊&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">22</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Lunch|set|午市套餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">23</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Group|dining|团体&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">24</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Healthy|健康&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">25</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Historic|building|历史建筑&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">26</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Hotel|restaurant||酒店餐厅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">27</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Ice|cream|冰激凌&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">28</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Late|night|dining|夜宵&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">29</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Non-smoking|有无烟区&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Notable|wine|list|葡萄酒&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">32</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Outdoor|seating|户外餐桌&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">33</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Performance|现场表演&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">34</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Romantic||浪漫&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">35</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Ramen|日式拉面&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">36</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Salads|沙拉&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">37</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Sandwiches &amp; Delis|三明治&amp;熟食&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">38</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Smoothies|冰沙&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">39</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Tapas|西班牙小吃&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Themed|restaurant|主题餐厅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">41</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Villa|别墅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">43</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;American|北美菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">45</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Australian|澳洲菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">48</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Barbecue|烧烤&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">50</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Beijing|京菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">63</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Dongbei|东北菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">65</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Hunan|湘菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">68</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;French|法国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">70</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Fusion|创意菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">71</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;German|德国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">72</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Grocery|杂货&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">73</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Halal|清真&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">76</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Hot Pot|火锅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">79</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Indian|印度菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">80</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Indonesian|印尼菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">81</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Italian|意大利菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">82</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Japanese|日本料理&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">84</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Jiangxi|赣菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">88</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Malaysian|马来西亚菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">91</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Mediterranean|地中海菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">92</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Mexican / Tex-Mex|墨西哥菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">94</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Other|其他&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">102</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Portuguese|葡国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">103</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Russian|俄国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">104</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Sandwiches &amp; Delis|三明治&amp;简食&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">107</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Shaoxing|绍兴菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">111</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Shanghainese|上海菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">112</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Singaporean|新加坡菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">113</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;South American|南美菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">114</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Spanish|西班牙菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">115</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Steakhouse|牛排店&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">117</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Taiwanese|台湾菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">118</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Thai|泰国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">121</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Turkish|土耳其菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">122</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Vegetarian|素食&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">123</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Vietnamese|越南菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">124</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Wine Bar|红酒吧&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">126</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Yunnan|云南菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">129</span>, <span class="string">&#x27;Cuisine             &#x27;</span>, <span class="string">&#x27;Zhejiang|浙菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">130</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Afghanistan | 阿富汗&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">131</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Albania | 阿尔巴尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">132</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Algeria | 阿尔及利亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">133</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Andorra | 安道尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">134</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Angola | 安哥拉&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">135</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Argentina | 阿根廷&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">136</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Armenia | 亚美尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">137</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Australia | 澳大利亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">138</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Austria | 奥地利&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">139</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Azerbaijan | 阿塞拜疆&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">140</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bahamas | 巴哈马&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">141</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bahrain | 巴林&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">142</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bangladesh | 孟加拉国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">143</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Barbados | 巴巴多斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">144</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Belarus | 白俄罗斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">145</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Belgium | 比利时&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">146</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Belize | 伯利兹&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">147</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Benin | 柏林&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">148</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bhutan | 不丹&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">149</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bolivia | 玻利维亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">150</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bosnia-Herzegovina | 波斯尼亚和黑塞哥维那&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">151</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Botswana | 博茨瓦纳&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">152</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Brazil | 巴西&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">154</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Brunei | 文莱&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">155</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Bulgaria | 保加利亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">156</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Burkina | 布基纳法索&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">157</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Burma (Myanmar) | 缅甸&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">158</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Burundi | 布隆迪&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">159</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Cambodia | 柬埔寨&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">160</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Cameroon | 喀麦隆&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">161</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Canada | 加拿大&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">162</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Cape Verde Islands | 佛得角群岛&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">163</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Chad | 乍得&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">164</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Chile | 智利&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">166</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Colombia | 哥伦比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">167</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Congo | 刚果&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">168</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Costa Rica | 哥斯达黎加&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">169</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Croatia | 克罗地亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">170</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Cuba | 古巴&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">171</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Cyprus | 塞浦路斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">172</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Czech Republic | 捷克共和国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">173</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Denmark | 丹麦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">174</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Djibouti | 吉布提&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">175</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Dominica | 多米尼加&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">176</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Dominican Republic | 多米尼加国共和国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">177</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ecuador | 厄瓜多尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">178</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Egypt | 埃及&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">179</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;El Salvador | 萨尔瓦多&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">180</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;England | 英格兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">181</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Eritrea | 厄立特里亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">182</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Estonia | 爱沙尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">183</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ethiopia | 埃塞俄比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">184</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Fiji | 斐济&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">185</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Finland | 芬兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">186</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;France | 法国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">187</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Gabon | 加蓬&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">188</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Gambia | 冈比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">189</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Georgia | 格鲁吉亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">190</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Germany | 德国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">191</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ghana | 加纳&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">192</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Greece | 希腊&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">193</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Grenada | 格林纳达&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">194</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guatemala | 危地马拉&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">195</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guinea | 几内亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">196</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guyana | 圭亚那&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">197</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Haiti | 海地&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">198</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Netherlands | 荷兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">199</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Honduras | 洪都拉斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">200</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hungary | 匈牙利&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">201</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Iceland | 冰岛&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">202</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;India | 印度&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">203</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Indonesia | 印度尼西亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">204</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Iran | 伊朗&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">205</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Iraq | 伊拉克&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">206</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ireland | 爱尔兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">207</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Italy | 意大利&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">208</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Jamaica | 牙买加&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">209</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Japan | 日本&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">210</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Jordan | 约旦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">211</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Kazakhstan | 哈萨克斯坦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">212</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Kenya | 肯尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">213</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Kuwait | 科威特&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">214</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Laos | 老挝&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">215</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Latvia | 拉脱维亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">216</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Lebanon | 黎巴嫩&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">217</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Liberia | 利比里亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">218</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Libya | 利比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">219</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Liechtenstein | 列支敦士登&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">220</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Lithuania | 立陶宛&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">221</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Luxembourg | 卢森堡&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">222</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Macedonia马其顿&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">223</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Madagascar | 马达加斯加&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">224</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Malawi | 马拉维&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">225</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Malaysia | 马来西亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">226</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Maldives | 马尔代夫&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">227</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mali | 马里&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">228</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Malta | 马耳他&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">229</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mauritania | 毛里塔尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">230</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mauritius | 毛里求斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">231</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mexico | 墨西哥&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">232</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Moldova | 摩尔多瓦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">233</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Monaco | 摩纳哥&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">234</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mongolia | 蒙古&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">235</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Montenegro | 黑山&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">236</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Morocco | 摩洛哥&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">237</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Mozambique | 莫桑比克&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">239</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Namibia | 纳米比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">240</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Nepal | 尼泊尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">242</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;New Zealand | 新西兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">243</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Nicaragua | 尼加拉瓜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">244</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Niger | 尼日尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">245</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Nigeria | 尼日利亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">246</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;North Korea | 朝鲜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">247</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Norway | 挪威&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">248</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Oman | 阿曼&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">249</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Pakistan | 巴基斯坦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">250</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Panama | 巴拿马&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">251</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Papua New Guinea | 巴布亚新几内亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">252</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Paraguay | 巴拉圭&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">253</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Peru | 秘鲁&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">254</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Philippines | 菲律宾&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">255</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Poland | 波兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">256</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Portugal | 葡萄牙&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">257</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Qatar | 卡塔尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">258</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Romania | 罗马尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">259</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Russia | 俄罗斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">260</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Rwanda | 卢旺达&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">261</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Saudi Arabia | 沙特阿拉伯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">262</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Scotland | 苏格兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">263</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Senegal | 塞内加尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">264</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Serbia | 塞尔维亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">265</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Seychelles | 塞舌尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">266</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Sierra Leone | 塞拉里昂&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">267</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Singapore | 新加坡&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">268</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Slovakia | 斯洛伐克&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">269</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Slovenia | 斯洛伐尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">270</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Solomon Islands | 所罗门群岛&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">271</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Somalia | 索马里&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">272</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;South Africa | 南非&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">273</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;South Korea | 韩国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">274</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Spain | 西班牙&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">275</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Sri Lanka | 斯里兰卡&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">276</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Sudan | 苏丹&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">277</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Suriname | 苏里南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">278</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Swaziland | 斯维士兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">279</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Sweden | 瑞典&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">280</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Switzerland | 瑞士&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">281</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Syria | 叙利亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">282</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Taiwan | 台湾&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">283</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tajikistan | 塔吉克斯坦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">284</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tanzania | 坦桑尼亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">285</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Thailand | 泰国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">286</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Togo | 多哥&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">287</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Trinidad and Tobago | 特里尼达和多巴哥&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">289</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tunisia | 突尼斯&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">290</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Turkey | 土耳其&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">291</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Turkmenistan | 土库曼斯坦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">292</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tuvalu | 图瓦卢&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">293</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Uganda | 乌干达&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">294</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ukraine | 乌克兰&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">295</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;United Arab Emirates | 阿拉伯联合大公国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">296</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;United Kingdom  | 联合王国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">297</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;U.S.A. | 美国&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">298</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Uruguay | 乌拉圭&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">299</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Uzbekistan | 乌兹别克斯坦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">300</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Vanuatu | 瓦努阿图&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">301</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Vatican City | 梵蒂冈&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">302</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Venezuela | 委内瑞拉&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">303</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Vietnam | 越南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">304</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Wales | 威尔士&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">305</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Western Samoa | 西萨摩亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">306</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Yemen | 也门&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">307</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Yugoslavia | 南斯拉夫&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">308</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Zaire | 扎伊尔&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">309</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Zambia | 赞比亚&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">310</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Zimbabwe | 津巴布韦&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">311</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Anhui | 安徽&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">312</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Fujian | 福建&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">313</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Gansu | 甘肃&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">314</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guangdong | 广东&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">315</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guizhou | 贵州&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">316</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hainan | 海南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">317</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hebei | 河北&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">318</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Heilongjiang | 黑龙江&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">319</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Henan | 河南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">320</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hubei | 湖北&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">321</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hunan | 湖南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">322</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Jiangsu | 江苏&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">323</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Jiangxi | 江西&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">324</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Jilin | 吉林&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">325</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Liaoning | 辽宁&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">326</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Qinghai | 青海&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">327</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Shaanxi | 陕西&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">328</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Shandong | 山东&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">329</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Shanxi | 山西&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">330</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Sichuan | 四川&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">331</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Yunnan | 云南&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">332</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Zhejiang | 浙江&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">333</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Guangxi | 广西&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">334</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Inner Mongolia | 内蒙古&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">335</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Ningxia | 宁夏&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">336</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Xinjiang | 新疆&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">337</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tibet | 西藏&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">338</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Beijing | 北京&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">339</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Chongqing | 重庆&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">340</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Shanghai | 上海&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">341</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Tianjin | 天津&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">342</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Hong Kong | 香港&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">343</span>, <span class="string">&#x27;nations             &#x27;</span>, <span class="string">&#x27;Macau | 澳门&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">346</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Wifi|无线上网&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">349</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Good|View|有景观位&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">351</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Big|Party|大型宴会&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">352</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;Birthday|Party|生日宴会&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">353</span>, <span class="string">&#x27;RestaurantTag       &#x27;</span>, <span class="string">&#x27;BYOB|自带酒水&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">354</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;朋友聚餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">355</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;家庭聚会&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">356</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;随便吃吃&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">357</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;休闲小憩&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">358</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;情侣约会&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">359</span>, <span class="string">&#x27;RestaurantStyle     &#x27;</span>, <span class="string">&#x27;商务宴请&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">360</span>, <span class="string">&#x27;InviteStatus        &#x27;</span>, <span class="string">&#x27;即将接洽&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">361</span>, <span class="string">&#x27;InviteStatus        &#x27;</span>, <span class="string">&#x27;等待老板决定&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">362</span>, <span class="string">&#x27;InviteStatus        &#x27;</span>, <span class="string">&#x27;合同签署中&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">363</span>, <span class="string">&#x27;InviteStatus        &#x27;</span>, <span class="string">&#x27;合同已经签订&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">370</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;All-You-Can-Eat|自助餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">371</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Bar|酒吧&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">372</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Cafe|咖啡厅&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">373</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Cantonese|粤菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">374</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Dessert|甜品&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">375</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Global Cuisine|环球美食&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">376</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Middle Eastern|中东菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">377</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Southeast Asian|东南亚菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">378</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Zhejiang|浙江菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">379</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Fast Casual|小吃快餐&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">380</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Israel&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">381</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;East Timor&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">382</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Central African Republic&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">383</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;S?o Tomé and Principe&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">384</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Ivory Coast&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">385</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Lesotho&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">386</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Equatorial Guinea&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">387</span>, <span class="string">&#x27;nations&#x27;</span>, <span class="string">&#x27;Guinea Bissau&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">400</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Sushi|寿司&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">401</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;British|英国菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">402</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Dim Sum|早茶点心&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">403</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Xibei / Xinjiang|西北菜/新疆菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">405</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Guizhou|黔菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">406</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Pizza|披萨&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">408</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Seafood|海鲜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">409</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Anhui|徽菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">411</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Sichuan|川菜&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">412</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Korean|韩国料理&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">413</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Juice &amp; Beverages|果汁饮料&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_dictionary` <span class="keyword">VALUES</span> (<span class="number">414</span>, <span class="string">&#x27;Cuisine&#x27;</span>, <span class="string">&#x27;Bakery &amp; Pastries|面包烘焙&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_diners</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_diners`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_diners`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nickname` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;昵称&#x27;</span>,</span><br><span class="line">  `phone` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `email` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `avatar_url` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;头像&#x27;</span>,</span><br><span class="line">  `roles` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;角色&#x27;</span>,</span><br><span class="line">  `is_valid` tinyint(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">6</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_diners</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_diners` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;昵称st&#x27;</span>, <span class="string">&#x27;13888888888&#x27;</span>, <span class="string">&#x27;abc@imooc.com&#x27;</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;/abc&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2020-11-06 16:17:52&#x27;</span>, <span class="string">&#x27;2020-11-06 16:17:55&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_diners` <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;13666666666&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;/test&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2020-11-12 12:01:13&#x27;</span>, <span class="string">&#x27;2020-11-12 12:01:13&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_diners` <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;test2&#x27;</span>, <span class="string">&#x27;13666666667&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;/test2&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2020-11-12 17:47:12&#x27;</span>, <span class="string">&#x27;2020-11-12 17:47:12&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_diners` <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;12311112222&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;e10adc3949ba59abbe56e057f20f883e&#x27;</span>, <span class="string">&#x27;/aaa&#x27;</span>, <span class="string">&#x27;ROLE_USER&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2020-11-13 12:29:49&#x27;</span>, <span class="string">&#x27;2020-11-13 12:29:49&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_feed</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_feed`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_feed`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `content` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `fk_diner_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `praise_amount` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;点赞数量&#x27;</span>,</span><br><span class="line">  `comment_amount` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;评论数量&#x27;</span>,</span><br><span class="line">  `fk_restaurant_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `is_valid` tinyint(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_feed</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_follow</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_follow`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_follow`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `diner_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `follow_diner_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `is_valid` tinyint(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `create_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `update_date` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `index_followeddiner_valid`(`follow_diner_id`, `is_valid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_follow</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for t_restaurant</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `t_restaurant`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_restaurant`  (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `Name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;the En Name of the restaurant&#x27;</span>,</span><br><span class="line">  `CnName` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `X` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Y` <span class="keyword">double</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Location` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;En location of the restaurant&#x27;</span>,</span><br><span class="line">  `CnLocation` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Area` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;city.district.neighbourhood\r\nExample: Shanghai.Xuhui.Xujiahui&#x27;</span>,</span><br><span class="line">  `CnArea` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Traffic` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;the information/descripton of the restaurant&#x27;</span>,</span><br><span class="line">  `Telephone` <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Phone of the restaurant&#x27;</span>,</span><br><span class="line">  `Email` <span class="type">varchar</span>(<span class="number">80</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Website` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `Cuisine` <span class="type">varchar</span>(<span class="number">80</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `AveragePrice` <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `AvgLunchPrice` <span class="type">decimal</span>(<span class="number">19</span>, <span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Average price of lunch&#x27;</span>,</span><br><span class="line">  `Introduction` <span class="type">varchar</span>(<span class="number">200</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;Indtroduction of the restaurant&#x27;</span>,</span><br><span class="line">  `Status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;1=Opened 0=Closed&#x27;</span>,</span><br><span class="line">  `CreateDT` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `IsValid` <span class="type">smallint</span>(<span class="number">1</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span> COMMENT <span class="string">&#x27;1=Valid 0=Invalid&#x27;</span>,</span><br><span class="line">  `Thumbnail` <span class="type">varchar</span>(<span class="number">120</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;pics at the list, value would be:\r\nbasepath/original/picname&#x27;</span>,</span><br><span class="line">  `OpenHours` <span class="type">varchar</span>(<span class="number">500</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `LikeVotes` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;the percentage of people like it&#x27;</span>,</span><br><span class="line">  `DislikeVotes` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;How many people votes&#x27;</span>,</span><br><span class="line">  `Amenities` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;设备&#x27;</span>,</span><br><span class="line">  `Tags` <span class="type">varchar</span>(<span class="number">100</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tags of the restaurant&#x27;</span>,</span><br><span class="line">  `OpenDate` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `closeDate` datetime(<span class="number">0</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `CityId` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">21</span> COMMENT <span class="string">&#x27;城市id&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE,</span><br><span class="line">  INDEX `index_isvalid`(`IsValid`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB AUTO_INCREMENT <span class="operator">=</span> <span class="number">23</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">DYNAMIC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of t_restaurant</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;1931 Pub&#x27;</span>, <span class="string">&#x27;名古&#x27;</span>, <span class="number">31.2158508275268</span>, <span class="number">121.461839852847</span>, <span class="string">&#x27;112 Maoming Nan Lu, near Nanchang Lu&#x27;</span>, <span class="string">&#x27;茂名南路112号, 近南昌路&#x27;</span>, <span class="string">&#x27;Xuhui.Fmr French Concession&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;021 6472 5264&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Shanghainese, Chinese&#x27;</span>, <span class="string">&#x27;¥¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;2001 Hong Kong Teahouse&#x27;</span>, <span class="string">&#x27;2001港式茶餐&#x27;</span>, <span class="number">31.21385</span>, <span class="number">121.46051</span>, <span class="string">&#x27;55 Shaanxi Nan Lu, near Changle Lu&#x27;</span>, <span class="string">&#x27;陕西南路55号, 近长乐路&#x27;</span>, <span class="string">&#x27;Xuhui.Fmr French Concession&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;021 5467 0205&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Dim Sum, Chinese&#x27;</span>, <span class="string">&#x27;¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;2nd floor&#x27;</span>, <span class="string">&#x27;2nd floor&#x27;</span>, <span class="number">31.2162</span>, <span class="number">121.447998</span>, <span class="string">&#x27;2/F, 810 Changle Lu,near Changshu Lu&#x27;</span>, <span class="string">&#x27;长乐路810号2楼, 近常熟路&#x27;</span>, <span class="string">&#x27;Xuhui.Fmr French Concession&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;13761133471&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;http://www.2ndfloor.asia&#x27;</span>, <span class="string">&#x27;Cafe&#x27;</span>, <span class="string">&#x27;¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">&#x27;400 Celsius&#x27;</span>, <span class="string">&#x27;400 Celsius&#x27;</span>, <span class="number">31.19436</span>, <span class="number">121.43797</span>, <span class="string">&#x27;1 Hongqiao Lu, 1/F, Grand Gateway, near Caoxi Bei Lu, Metro Line 1 Xujiahui Station&#x27;</span>, <span class="string">&#x27;虹桥路1号港汇广场1楼, 近漕溪北路, 地铁1号线徐家汇站&#x27;</span>, <span class="string">&#x27;Xuhui.Xujiahui&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;021 6447 0770&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Steakhouse&#x27;</span>, <span class="string">&#x27;¥¥¥¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">&#x27;5 on the Bund&#x27;</span>, <span class="string">&#x27;5 on the Bund&#x27;</span>, <span class="number">31.234482</span>, <span class="number">121.490753</span>, <span class="string">&#x27;Five on the Bund,20 Guangdong Lu, near Zhongshan Dong Yi Lu&#x27;</span>, <span class="string">&#x27;广东路20号, 近中山东一路&#x27;</span>, <span class="string">&#x27;Huangpu.The Bund&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Global Cuisine&#x27;</span>, <span class="string">&#x27;¥¥¥¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">&#x27;5 Tables Bistro&#x27;</span>, <span class="string">&#x27;5桌餐厅&#x27;</span>, <span class="number">31.2174481541175</span>, <span class="number">121.47318647082</span>, <span class="string">&#x27;210 Danshui Lu, near Zizhong Lu&#x27;</span>, <span class="string">&#x27;淡水路210号, 近自忠路&#x27;</span>, <span class="string">&#x27;Luwan.Xintiandi&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;021 3304 1205&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;www.weibo.com/5tables&#x27;</span>, <span class="string">&#x27;European&#x27;</span>, <span class="string">&#x27;¥¥¥¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">&#x27;57 Du Xiang&#x27;</span>, <span class="string">&#x27;57度湘&#x27;</span>, <span class="number">31.2250117063411</span>, <span class="number">121.47824432639</span>, <span class="string">&#x27;138 Huaihai Zhong Lu, Infinity Plaza, 4/F, Room 401, near Longmen Lu&#x27;</span>, <span class="string">&#x27;淮海路138号无限度广场4楼401室, 近龙门路&#x27;</span>, <span class="string">&#x27;Xuhui.Huaihai Zhong Lu&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;021 3315 0057&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Hunan, Chinese&#x27;</span>, <span class="string">&#x27;¥&#x27;</span>, <span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2014-05-04 19:26:28&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;restaurant/20/restaurant/T/160_160/1399622680327.JPG&#x27;</span>, <span class="string">&#x27;Daily 11am-9pm&#x27;</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="string">&#x27;2016-01-04 11:22:23&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_restaurant` <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">&#x27;609 Pho&#x27;</span>, <span class="string">&#x27;609 Pho&#x27;</span>, <span class="number">31.237629</span>, <span class="number">121.438797</span>, <span class="string">&#x27;609 Anyuan Lu, near Jiaozhou Lu&#x27;</span>, <span class="string">&#x27;安源路609号, 近胶州路&#x27;</span>, <span class="string">&#x27;Jing\&#x27;</span>an<span class="string">&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span><span class="number">18201753996</span><span class="string">&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span>Vietnamese<span class="string">&#x27;, &#x27;</span>¥<span class="string">&#x27;, 0, &#x27;&#x27;, NULL, &#x27;</span><span class="number">2014</span><span class="number">-05</span><span class="number">-04</span> <span class="number">19</span>:<span class="number">26</span>:<span class="number">28</span><span class="string">&#x27;, 4, &#x27;&#x27;, &#x27;&#x27;, 0, 0, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span><span class="number">2016</span><span class="number">-01</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">22</span>:<span class="number">23</span><span class="string">&#x27;, &#x27;</span><span class="number">2016</span><span class="number">-01</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">22</span>:<span class="number">23</span><span class="string">&#x27;, 21);</span></span><br><span class="line"><span class="string">INSERT INTO `t_restaurant` VALUES (22, &#x27;</span><span class="number">70</span>s Restaurant<span class="string">&#x27;, &#x27;</span><span class="number">70</span>后饭吧<span class="string">&#x27;, 31.2398228737211, 121.438096413353, &#x27;</span><span class="number">1217</span> Changde Lu, near Changshou Lu<span class="string">&#x27;, &#x27;</span>常德路<span class="number">1217</span>号, 近长寿路<span class="string">&#x27;, &#x27;</span>Putuo<span class="string">&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span><span class="number">021</span> <span class="number">6040</span> <span class="number">2808</span><span class="string">&#x27;, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span>Chinese<span class="string">&#x27;, &#x27;</span>¥¥<span class="string">&#x27;, 0, &#x27;&#x27;, NULL, &#x27;</span><span class="number">2014</span><span class="number">-05</span><span class="number">-04</span> <span class="number">19</span>:<span class="number">26</span>:<span class="number">28</span><span class="string">&#x27;, 1, &#x27;</span>restaurant<span class="operator">/</span><span class="number">22</span><span class="operator">/</span>restaurant<span class="operator">/</span><span class="number">160</span>_160<span class="operator">/</span><span class="number">14075670693130533.</span>JPG<span class="string">&#x27;, &#x27;&#x27;, 7, 2, &#x27;&#x27;, &#x27;&#x27;, &#x27;</span><span class="number">2016</span><span class="number">-01</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">22</span>:<span class="number">23</span><span class="string">&#x27;, &#x27;</span><span class="number">2016</span><span class="number">-01</span><span class="number">-04</span> <span class="number">11</span>:<span class="number">22</span>:<span class="number">23</span><span class="string">&#x27;, 21);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Table structure for t_seckill_vouchers</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS `t_seckill_vouchers`;</span></span><br><span class="line"><span class="string">CREATE TABLE `t_seckill_vouchers`  (</span></span><br><span class="line"><span class="string">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">  `fk_voucher_id` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `amount` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `start_time` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `end_time` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `is_valid` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `create_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `update_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`id`) USING BTREE</span></span><br><span class="line"><span class="string">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Records of t_seckill_vouchers</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Table structure for t_voucher</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS `t_voucher`;</span></span><br><span class="line"><span class="string">CREATE TABLE `t_voucher`  (</span></span><br><span class="line"><span class="string">  `id` int(10) NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">  `title` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;</span>代金券标题<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `thumbnail` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;</span>缩略图<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `amount` int(11) NULL DEFAULT NULL COMMENT &#x27;</span>抵扣金额<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `price` decimal(10, 2) NULL DEFAULT NULL COMMENT &#x27;</span>售价<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `status` int(10) NULL DEFAULT NULL COMMENT &#x27;</span><span class="number">-1</span><span class="operator">=</span>过期 <span class="number">0</span><span class="operator">=</span>下架 <span class="number">1</span><span class="operator">=</span>上架<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `expire_time` datetime(0) NULL DEFAULT NULL COMMENT &#x27;</span>过期时间<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `redeem_restaurant_id` int(10) NULL DEFAULT NULL COMMENT &#x27;</span>验证餐厅<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `stock` int(11) NULL DEFAULT 0 COMMENT &#x27;</span>库存<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `stock_left` int(11) NULL DEFAULT 0 COMMENT &#x27;</span>剩余数量<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `description` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;</span>描述信息<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `clause` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT &#x27;</span>使用条款<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `create_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `update_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `is_valid` tinyint(1) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`id`) USING BTREE</span></span><br><span class="line"><span class="string">) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = DYNAMIC;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Records of t_voucher</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Table structure for t_voucher_order</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">DROP TABLE IF EXISTS `t_voucher_order`;</span></span><br><span class="line"><span class="string">CREATE TABLE `t_voucher_order`  (</span></span><br><span class="line"><span class="string">  `id` int(11) NOT NULL AUTO_INCREMENT,</span></span><br><span class="line"><span class="string">  `order_no` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `fk_voucher_id` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `fk_diner_id` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `qrcode` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NULL DEFAULT NULL COMMENT &#x27;</span>图片地址<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `payment` tinyint(4) NULL DEFAULT NULL COMMENT &#x27;</span><span class="number">0</span><span class="operator">=</span>微信支付 <span class="number">1</span><span class="operator">=</span>支付宝支付<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `status` tinyint(1) NULL DEFAULT NULL COMMENT &#x27;</span>订单状态：<span class="number">-1</span><span class="operator">=</span>已取消 <span class="number">0</span><span class="operator">=</span>未支付 <span class="number">1</span><span class="operator">=</span>已支付 <span class="number">2</span><span class="operator">=</span>已消费 <span class="number">3</span><span class="operator">=</span>已过期<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `fk_seckill_id` int(11) NULL DEFAULT NULL COMMENT &#x27;</span>如果是抢购订单时，抢购订单的id<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `order_type` int(11) NULL DEFAULT NULL COMMENT &#x27;</span>订单类型：<span class="number">0</span><span class="operator">=</span>正常订单 <span class="number">1</span><span class="operator">=</span>抢购订单<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">  `create_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `update_date` datetime(0) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  `is_valid` int(11) NULL DEFAULT NULL,</span></span><br><span class="line"><span class="string">  PRIMARY KEY (`id`) USING BTREE</span></span><br><span class="line"><span class="string">) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = DYNAMIC;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string">-- Records of t_voucher_order</span></span><br><span class="line"><span class="string">-- ----------------------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SET FOREIGN_KEY_CHECKS = 1;</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h2 id="项目架构与微服务搭建"><a href="#项目架构与微服务搭建" class="headerlink" title="项目架构与微服务搭建"></a>项目架构与微服务搭建</h2><ul><li>基于Spring Cloud Hoxton.SR8搭建</li><li>第一步:创建Maven的父级工程，添加对应依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 可以集中定义依赖资源的版本信息 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring-boot-version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">spring-boot-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">spring-cloud-version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">spring-cloud-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">lombok-version</span>&gt;</span>1.18.16<span class="tag">&lt;/<span class="name">lombok-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">commons-lang-version</span>&gt;</span>3.11<span class="tag">&lt;/<span class="name">commons-lang-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mybatis-starter-version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">mybatis-starter-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mysql-version</span>&gt;</span>8.0.22<span class="tag">&lt;/<span class="name">mysql-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">swagger-starter-version</span>&gt;</span>2.1.5-RELEASE<span class="tag">&lt;/<span class="name">swagger-starter-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">hutool-version</span>&gt;</span>5.4.7<span class="tag">&lt;/<span class="name">hutool-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">guava-version</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">guava-version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 集中定义依赖，不引入 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- spring boot 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- spring cloud 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- lombok 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- common-lang3 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- mybatis 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-starter-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- swagger 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.battcn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>swagger-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;swagger-starter-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- mysql 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- hutool 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- guava 依赖 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;guava-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 集中定义项目所需插件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- spring boot maven 项目打包插件 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>第二步:创建基于Eureka的注册中心微服务</li><li>第三步:配置注册中心(单机版)</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">ms-registry</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置 Eureka Server 注册中心</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:8080/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&#x27;%d&#123;HH:mm:ss&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>第四步:启动注册中心并验证</li><li>第五步:添加网关微服务，并注册到注册中心，启动并测试</li><li>第六步:添加用户微服务，并注册到注册中心，启动并测试</li><li>同理创建其他微服务</li></ul><br><br><br><h1 id="第3章-Redis基础数据类型与基本使用"><a href="#第3章-Redis基础数据类型与基本使用" class="headerlink" title="第3章 Redis基础数据类型与基本使用"></a>第3章 Redis基础数据类型与基本使用</h1><h2 id="字符串-strings"><a href="#字符串-strings" class="headerlink" title="字符串 (strings)"></a>字符串 (strings)</h2><h3 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h3><ul><li>字符串是Redis最简单的储存类型，它存储的值可以是字符串、整数或者浮点数，对整个字符串或者字符串的其中一部分执行操作;对整数或者浮点数执行自增 (increment)或者自减(decrement)操作</li><li>Redis的字符串是一个由字节组成的序列，跟java里面的ArayList有点类似，采用预分配几余空间的方式来减少内存的频繁分配，内部为当前字符串实际分配的空间 capacity 一般要高于实际字符串长度len。当字符串长度小于 1M 时，扩容都是加倍现有的空间，如果超过 1M，扩容时一次只会多扩 1M 的空间。需要注意的是字符串最大长度为 512M。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>字符串类型在工作中使用广泛，主要用于缓存数据，提高查询性能。比如存储登录用户信息、电商中存储商品信息、可以做计数器 (想知道什么时候封锁一个IP地址(访问超过几次))等等</li></ul><h3 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set key value: 添加一条String类型数据</span><br><span class="line">get key:获取一条String类型数据</span><br><span class="line">mset key1 value1 key2 value2: 添加多条String类型数据</span><br><span class="line">mget key1 key2:获取多条String类型数据</span><br><span class="line">incr kev:白增(+1)</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-课程介绍&quot;&gt;&lt;a href=&quot;#第1章-课程介绍&quot; class=&quot;headerlink&quot; title=&quot;第1章 课程介绍&quot;&gt;&lt;/a&gt;第1章 课程介绍&lt;/h1&gt;&lt;h2 id=&quot;为何Redis经久不衰？&quot;&gt;&lt;a href=&quot;#为何Redis经久不衰？&quot; cla</summary>
      
    
    
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/"/>
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/Redis/"/>
    
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Tags/Redis/"/>
    
    <category term="Cache" scheme="https://ratears.github.io/dev.ratears.life/Tags/Cache/"/>
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>Redis Study Notes（4）：Redis Persistence</title>
    <link href="https://ratears.github.io/dev.ratears.life/Redis-Study-Notes%EF%BC%884%EF%BC%89%EF%BC%9ARedis-Persistence/"/>
    <id>https://ratears.github.io/dev.ratears.life/Redis-Study-Notes%EF%BC%884%EF%BC%89%EF%BC%9ARedis-Persistence/</id>
    <published>2023-03-01T16:30:35.000Z</published>
    <updated>2023-03-01T16:30:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>Redis 具有持久化功能，其会按照设置以<strong>快照（RDB）</strong>或<strong>操作日志（AOF）</strong>的形式将数据持久化到磁盘。</li></ul><br><br><br><h1 id="Redis-持久化基本原理"><a href="#Redis-持久化基本原理" class="headerlink" title="Redis 持久化基本原理"></a>Redis 持久化基本原理</h1><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677688583843.29d7zy1cbbbw.webp" width="70%"><br><ul><li>Redis 持久化也称为钝化，是指将内存中数据库的状态描述信息保存到磁盘中。只不过是不同的持久化技术，对数据的状态描述信息是不同的，生成的持久化文件也是不同的。但它们的作用都是相同的：避免数据意外丢失。</li><li><strong>通过手动方式，或自动定时方式，或自动条件触发方式，将内存中数据库的状态描述信息写入到指定的持久化文件中。</strong>当系统重新启动时，自动加载持久化文件，并根据文件中数据库状态描述信息将数据恢复到内存中，这个数据恢复过程也称为激活。这个钝化与激活的过程就是 Redis 持久化的基本原理。</li><li>对于 Redis 单机状态下，无论是手动方式，还是定时方式或条件触发方式，都<strong>存在数据丢失问题</strong>：在尚未手动/自动保存时发生了 Redis 宕机状况，那么从上次保存到宕机期间产生的数据就会丢失。不同的持久化方式，其数据的丢失率也是不同的。</li><li><strong>RDB 是默认持久化方式，但 Redis 允许 RDB 与 AOF 两种持久化技术同时开启，此时系统会使用 AOF 方式做持久化，即 AOF 持久化技术的优先级要更高。同样的道理，两种技术同时开启状态下，系统启动时若两种持久化文件同时存在，则优先加载 AOF持久化文件。</strong></li></ul><br><br><br><h1 id="RDB-持久化"><a href="#RDB-持久化" class="headerlink" title="RDB 持久化"></a>RDB 持久化</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul><li><strong>RDB，Redis DataBase，是指将内存中某一时刻的数据快照全量写入到指定的 rdb 文件的持久化技术。</strong></li><li>RDB 持久化默认是开启的。当 Redis 启动时会自动读取 RDB 快照文件，将数据从硬盘载入到内存，以恢复 Redis 关机前的数据库状态。</li></ul><br><h2 id="持久化的执行"><a href="#持久化的执行" class="headerlink" title="持久化的执行"></a>持久化的执行</h2><ul><li>RDB 持久化的执行有三种方式：手动 save 命令、手动 bgsave 命令，与自动条件触发。</li></ul><br><h3 id="手动-save-命令"><a href="#手动-save-命令" class="headerlink" title="手动 save  命令"></a>手动 save  命令</h3><ul><li>通过在 redis-cli 客户端中执行 save 命令可立即进行一次持久化保存。</li><li><strong>save 命令在执行期间会阻塞 redis-server 进程，直至持久化过程完毕。而在 redis-server 进程阻塞期间，Redis不能处理任何读写请求，无法对外提供服务。</strong></li></ul><br><h3 id="手动-bgsave-命令"><a href="#手动-bgsave-命令" class="headerlink" title="手动 bgsave  命令"></a>手动 bgsave  命令</h3><ul><li>通过在 redis-cli 客户端中执行 bgsave 命令可立即进行一次持久化保存。</li><li><strong>bgsave 命令会使服务器进程 redis-server 生成一个子进程，由该子进程负责完成保存过程。在子进程进行保存过程中，不会阻塞 redis-server 进程对客户端读写请求的处理。</strong></li></ul><br><h3 id="自动条件触发"><a href="#自动条件触发" class="headerlink" title="自动条件触发"></a>自动条件触发</h3><ul><li>自动条件触发的本质仍是 bgsave 命令的执行。只不过是<strong>用户通过在配置文件中做相应的设置后，Redis 会根据设置信息自动调用 bgsave 命令执行。</strong>具体配置方式，参考 <a href="#save">RDB 优化配置 - save</a></li></ul><br><h3 id="查看持久化时间"><a href="#查看持久化时间" class="headerlink" title="查看持久化时间"></a>查看持久化时间</h3><ul><li>通过 lastsave 命令可以查看最近一次执行持久化的时间，其返回的是一个 Unix 时间戳。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lastsave</span><br><span class="line">(integer) 1677689127</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# date -d @1677689127</span><br><span class="line">Thu Mar  2 00:45:27 CST 2023</span><br></pre></td></tr></table></figure><br><h2 id="RDB-优化配置"><a href="#RDB-优化配置" class="headerlink" title="RDB 优化配置"></a>RDB 优化配置</h2><ul><li>DB 相关的配置在 redis.conf 文件的 SNAPSHOTTING 部分</li></ul><br><h3 id="save"><a href="#save" class="headerlink" title="save"></a>save</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">save 3600 1 300 100 60 10000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该配置用于设置快照的自动保存触发条件，即 save point，保存点。该触发条件是在指定时间段内发生了指定次数的写操作。除非另有规定，默认情况下持久化条件为 save 3600 1 300 100 60 10000。（跟redis6的默认值比，条件更宽松）其等价于以下三条：</span></span><br><span class="line">save 3600 1 # 在 3600 秒(1 小时)内发生 1 次写操作</span><br><span class="line">save 300 100 # 在 300 秒(5 分钟)内发生 100 次写操作</span><br><span class="line">save 60 10000 # 在 60 秒(1 分钟)内发生 1 万次写操作</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果不启用 RDB 持久化，只需设置 save 的参数为空串即可：save “”。</span></span><br></pre></td></tr></table></figure><br><h3 id="stop-write-on-bgsave-error"><a href="#stop-write-on-bgsave-error" class="headerlink" title="stop-write-on-bgsave-error"></a>stop-write-on-bgsave-error</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，如果 RDB 快照已启用（至少一个保存点），且最近的 bgsave 命令失败，Redis将停止接受写入。这样设置是为了让用户意识到数据没有正确地保存到磁盘上，否则很可能没有人会注意到，并会发生一些灾难。当然，如果 bgsave 命令后来可以正常工作了，Redis将自动允许再次写入。</span></span><br></pre></td></tr></table></figure><br><h3 id="rdbcompression"><a href="#rdbcompression" class="headerlink" title="rdbcompression"></a>rdbcompression</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">当进行持久化时启用 LZF 压缩字符串对象。虽然压缩 RDB 文件会消耗系统资源，降低性能，但可大幅降低文件的大小，方便保存到磁盘，加速主从集群中从节点的数据同步。</span></span><br></pre></td></tr></table></figure><br><h3 id="rdbchecksum"><a href="#rdbchecksum" class="headerlink" title="rdbchecksum"></a>rdbchecksum</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdbchecksum yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从 RDB5 开始，RDB 文件的 CRC64 校验和就被放置在了文件末尾。这使格式更能抵抗 RDB文件的损坏，但在保存和加载 RDB 文件时，性能会受到影响（约 10%），因此可以设置为 no禁用校验和以获得最大性能。在禁用校验和的情况下创建的 RDB 文件的校验和为零，这将告诉加载代码跳过校验检查。默认为 <span class="built_in">yes</span>，开启了校验功能。</span></span><br></pre></td></tr></table></figure><br><h3 id="sanitize-dump-payload"><a href="#sanitize-dump-payload" class="headerlink" title="sanitize-dump-payload"></a>sanitize-dump-payload</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sanitize-dump-payload no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">该配置用于设置在加载 RDB 文件或进行持久化时是否开启对 zipList、listPack 等数据的全面安全检测。该检测可以降低命令处理时发生系统崩溃的可能。其可设置的值有三种选择：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">no：不检测</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">yes</span>：总是检测</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">clients：只有当客户端连接时检测。排除了加载 RDB 文件与进行持久化时的检测。</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认值本应该是 clients，但其会影响 Redis 集群的工作，所以默认值为 no，不检测</span></span><br></pre></td></tr></table></figure><br><h3 id="dbfilename"><a href="#dbfilename" class="headerlink" title="dbfilename"></a>dbfilename</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 RDB 文件的默认名称，默认为 dump.rdb。</span></span><br></pre></td></tr></table></figure><br><h3 id="rdb-del-sync-files"><a href="#rdb-del-sync-files" class="headerlink" title="rdb-del-sync-files"></a>rdb-del-sync-files</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rdb-del-sync-files no</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主从复制时，是否删除用于同步的从机上的 RDB 文件。默认是 no，不删除。不过需要注意，只有当从机的 RDB 和 AOF 持久化功能都未开启时才生效。</span></span><br></pre></td></tr></table></figure><br><h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dir ./</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定 RDB 与 AOF 文件的生成目录。默认为 Redis 安装根目录。</span></span><br></pre></td></tr></table></figure><br><h2 id="RDB-文件结构"><a href="#RDB-文件结构" class="headerlink" title="RDB 文件结构"></a>RDB 文件结构</h2><ul><li>RDB 持久化文件 dump.rdb 整体上有五部分构成：</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677690793796.ahq2vfvxqbk.webp" width="70%"><br><h3 id="SOF"><a href="#SOF" class="headerlink" title="SOF"></a>SOF</h3><ul><li>SOF 是一个常量，一个字符串 REDIS，仅包含这五个字符，其长度为 5。<strong>于标识 RDB文件的开始</strong>，以便在加载 RDB 文件时可以迅速判断出文件是否是 RDB 文件。</li></ul><br><h3 id="rdb-version"><a href="#rdb-version" class="headerlink" title="rdb_version"></a>rdb_version</h3><ul><li>一个整数，长度为 4 字节，表示 RDB 文件的版本号。</li></ul><br><h3 id="EOF"><a href="#EOF" class="headerlink" title="EOF"></a>EOF</h3><ul><li>EOF 是一个常量，占 1 个字节，用于标识 RDB 数据的结束，校验和的开始</li></ul><br><h3 id="check-sum"><a href="#check-sum" class="headerlink" title="check_sum"></a>check_sum</h3><ul><li>校验和 check_sum 用于判断 RDB 文件中的内容是否出现数据异常。其采用的是 CRC 校验算法。</li></ul><blockquote><p>CRC 校验算法：</p><ul><li>在持久化时，先将 SOF、rdb_version 及内存数据库中的数据快照这三者的二进制数据拼接起来，形成一个二进制数（假设称为数 a），然后再使用这个 a 除以校验和 check_sum，此时可获取到一个余数 b，然后再将这个 b 拼接到 a 的后面，形成 databases。</li><li>在加载时，需要先使用 check_sum 对 RDB 文件进行数据损坏验证。验证过程：只需将RDB 文件中除 EOF 与 check_sum 外的数据除以 check_sum。只要除得的余数不是 0，就说明文件发生损坏。当然，如果余数是 0，也不能肯定文件没有损坏。</li><li>这种验证算法，是数据损坏校验，而不是数据没有损坏的校验。</li></ul></blockquote><br><h3 id="databases"><a href="#databases" class="headerlink" title="databases"></a>databases</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.73la3w8w01k0.webp" width="70%"><br><ul><li>databases 部分是 RDB 文件中最重要的数据部分，其可以包含任意多个非空数据库。而每个 database 又是由三部分构成：<ul><li>SODB：是一个常量，占 1 个字节，用于标识一个数据库的开始。</li><li>db_number：数据库编号</li><li>key_value_pairs：当前数据库中的键值对数据。每个 key_value_pairs 又由很多个用于描述键值对的数据构成。<ul><li>VALUE_TYPE：是一个常量，占 1 个字节，用于标识该键值对中 value 的类型。</li><li>EXPIRETIME_UNIT：是一个常量，占 1 个字节，用于标识过期时间的单位是秒还是毫秒。</li><li>time：当前 key-value 的过期时间</li></ul></li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6uquj9ci3a40.webp" width="70%"><br><h2 id="RDB-持久化过程"><a href="#RDB-持久化过程" class="headerlink" title="*RDB 持久化过程"></a>*RDB 持久化过程</h2><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.69rmnjs1gv40.webp" width="100%"><br><ul><li>对于 Redis 默认的 RDB 持久化，在进行 bgsave 持久化时，redis-server 进程会 fork 出一个 bgsave 子进程，由该子进程以异步方式负责完成持久化。而在持久化过程中，redis-server进程不会阻塞，其会继续接收并处理用户的读写请求。</li><li>bgsave 子进程的详细工作原理如下：<ul><li>由于子进程可以继承父进程的所有资源，且父进程不能拒绝子进程的继承权。所以，bgsave 子进程有权读取到 redis-server 进程写入到内存中的用户数据，使得将内存数据持久化到 dump.rdb 成为可能。</li><li>bgsave 子进程在持久化时首先会将内存中的全量数据 copy 到磁盘中的一个 RDB 临时文件，copy 结束后，再将该文件 rename 为 dump.rdb，替换掉原来的同名文件。</li><li>不过，在进行持久化过程中，如果 redis-server 进程接收到了用户写请求，则系统会将</li><li>内存中发生数据修改的物理块 copy 出一个副本。等内存中的全量数据 copy 结束后，会再将副本中的数据 copy 到 RDB 临时文件。这个副本的生成是由于 Linux 系统的写时复制技术（Copy-On-Write）实现的。</li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.w8m0t6tk85s.webp" width="100%"><br><h2 id="写时复制技术（Copy-On-Write）"><a href="#写时复制技术（Copy-On-Write）" class="headerlink" title="*写时复制技术（Copy-On-Write）"></a>*写时复制技术（Copy-On-Write）</h2><ul><li>原本在 Unix 系统中，当一个主进程通过 fork()系统调用创建子进程后，内核进程会复制主进程的整个内存空间中的数据，然后分配给子进程。这种方式存在的问题有以下几点：<ul><li>这个过程非常耗时</li><li>这个过程降低了系统性能</li><li>如果主进程修改了其内存数据，子进程副本中的数据是没有修改的。即出现了数据冗余，而冗余数据最大的问题是数据一致性无法保证。</li></ul></li></ul><ul><li>现代的 Linux 则采用了更为有效的方式：<ul><li>写时复制。子进程会继承父进程的所有资源，其中就包括主进程的内存空间。即子进程与父进程共享内存。只要内存被共享，那么该内存就是只读的（写保护的）。而写时复制则是在任何一方需要写入数据到共享内存时都会出现异常，此时内核进程就会将需要写入的数据 copy 出一个副本写入到另外一块非共享内存区域。</li></ul></li></ul><br><br><br><h1 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><ul><li>AOF，Append Only File，是指 Redis 将每一次的写操作都以日志的形式记录到一个 AOF文件中的持久化技术。当需要恢复内存数据时，将这些写操作重新执行一次，便会恢复到之前的内存数据状态。</li></ul><br><h2 id="AOF-基础配置"><a href="#AOF-基础配置" class="headerlink" title="AOF 基础配置"></a>AOF 基础配置</h2><h3 id="AOF-的开启"><a href="#AOF-的开启" class="headerlink" title="AOF 的开启"></a>AOF 的开启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendonly yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下 AOF 持久化是没有开启的，通过修改配置文件中的 appendonly 属性为 <span class="built_in">yes</span>可以开启。</span></span><br></pre></td></tr></table></figure><br><h3 id="文件名配置"><a href="#文件名配置" class="headerlink" title="文件名配置"></a>文件名配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br></pre></td></tr></table></figure><ul><li>Redis 7 在这里发生了重大变化。原来只有一个 appendonly.aof 文件，现在具有了三类多个文件：<ul><li>基本文件：可以是 RDF 格式也可以是 AOF 格式。其存放的内容是由 RDB 转为 AOF 当时内存的快照数据。该文件可以有多个。</li><li>增量文件：以操作日志形式记录转为 AOF 后的写入操作。该文件可以有多个。</li><li>清单文件：用于维护 AOF 文件的创建顺序，保障激活时的应用顺序。该文件只有一个。</li></ul></li></ul><br><h3 id="混合式持久化开启"><a href="#混合式持久化开启" class="headerlink" title="混合式持久化开启"></a>混合式持久化开启</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">对于基本文件可以是 RDF 格式也可以是 AOF 格式。通过 aof-use-rdb-preamble 属性可以选择。其默认值为 <span class="built_in">yes</span>，即默认 AOF 持久化的基本文件为 rdb 格式文件，也就是默认采用混合式持久化。</span></span><br></pre></td></tr></table></figure><br><h3 id="AOF-文件目录配置"><a href="#AOF-文件目录配置" class="headerlink" title="AOF 文件目录配置"></a>AOF 文件目录配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appenddirname &quot;appendonlydir&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为了方便管理，可以专门为 AOF 持久化文件指定存放目录。目录名由 appenddirname属性指定，存放在 redis.conf 配置文件的 <span class="built_in">dir</span> 属性指定的目录，默认为 Redis 安装目录。</span></span><br></pre></td></tr></table></figure><br><h2 id="AOF-文件格式"><a href="#AOF-文件格式" class="headerlink" title="AOF 文件格式"></a>AOF 文件格式</h2><ul><li>AOF 文件包含三类文件：基本文件、增量文件与清单文件。其中基本文件一般为 rdb 格式</li></ul><br><h3 id="Redis-协议"><a href="#Redis-协议" class="headerlink" title="Redis 协议"></a>Redis 协议</h3><ul><li>增量文件扩展名为.aof，采用 AOF 格式。AOF 格式其实就是 Redis 通讯协议格式，AOF持久化文件的本质就是基于 Redis 通讯协议的文本，将命令以纯文本的方式写入到文件中。</li><li>Redis 协议规定，Redis 文本是以行来划分，每行以\r\n 行结束。每一行都有一个消息头，以表示消息类型。消息头由六种不同的符号表示，其意义如下：<ul><li>(+) 表示一个正确的状态信息</li><li>(-) 表示一个错误信息</li><li>(*) 表示消息体总共有多少行，不包括当前行</li><li>($) 表示下一行消息数据的长度，不包括换行符长度\r\n</li><li>(空) 表示一个消息数据</li><li>(:) 表示返回一个数值</li></ul></li></ul><br><h3 id="查看-AOF-文件"><a href="#查看-AOF-文件" class="headerlink" title="查看 AOF 文件"></a>查看 AOF 文件</h3><br><br><br><h1 id="RDB-与-AOF-的取舍和选择"><a href="#RDB-与-AOF-的取舍和选择" class="headerlink" title="RDB 与 AOF 的取舍和选择"></a>RDB 与 AOF 的取舍和选择</h1><h2 id="RDB-与-AOF-的对比"><a href="#RDB-与-AOF-的对比" class="headerlink" title="RDB 与 AOF 的对比"></a>RDB 与 AOF 的对比</h2><table><thead><tr><th align="center">-</th><th align="center">优势</th><th align="center">不足</th></tr></thead><tbody><tr><td align="center">RDB</td><td align="center">RDB 文件较小<br>数据恢复较快</td><td align="center">数据安全性较差<br>写时复制会降低性能<br>RDB 文件可读性较差</td></tr><tr><td align="center">AOF</td><td align="center">数据安全性高<br>AOF 文件可读性强</td><td align="center">AOF 文件较大<br>写操作会影响性能<br>数据恢复较慢</td></tr></tbody></table><br><h2 id="Redis-持久化的取舍和选择"><a href="#Redis-持久化的取舍和选择" class="headerlink" title="Redis 持久化的取舍和选择"></a>Redis 持久化的取舍和选择</h2><ul><li>官方推荐使用 RDB 与 AOF 混合式持久化。</li><li>若对数据安全性要求不高，则推荐使用纯 RDB 持久化方式。</li><li>不推荐使用纯 AOF 持久化方式。</li><li>若 Redis 仅用于缓存，则无需使用任何持久化技术。</li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>RDB文件格式这块还有点模糊</li><li>后续再参考其它教程看看情况</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Redis 具有持久化功能，其会按照设置以&lt;strong&gt;快照（RDB）&lt;/strong&gt;或&lt;strong&gt;操作日志（AOF）&lt;</summary>
      
    
    
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/"/>
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Categories/Database/Redis/"/>
    
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Tags/Redis/"/>
    
    <category term="Cache" scheme="https://ratears.github.io/dev.ratears.life/Tags/Cache/"/>
    
    <category term="Database" scheme="https://ratears.github.io/dev.ratears.life/Tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>《深入浅出分布式技术原理》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%80%E6%9C%AF%E5%8E%9F%E7%90%86%E3%80%8Bstudy-notes/</id>
    <published>2023-02-24T18:10:57.000Z</published>
    <updated>2023-02-24T18:10:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开篇词-1讲"><a href="#开篇词-1讲" class="headerlink" title="开篇词 (1讲)"></a>开篇词 (1讲)</h1><h2 id="开篇词｜掌握好学习路径，分布式系统原来如此简单"><a href="#开篇词｜掌握好学习路径，分布式系统原来如此简单" class="headerlink" title="开篇词｜掌握好学习路径，分布式系统原来如此简单"></a>开篇词｜掌握好学习路径，分布式系统原来如此简单</h2><ul><li>分布式系统，已经是互联网公司 IT 架构的事实标准</li><li>是否能系统性地理解分布式系统是初级工程师和资深工程师之间最显著的差别</li></ul><h3 id="学习路径的重要性"><a href="#学习路径的重要性" class="headerlink" title="学习路径的重要性"></a>学习路径的重要性</h3><ul><li>在做架构设计和选型的时候，没有知识系统做支撑，不能系统性地思考，处理问题也没有十足的把握</li><li><strong>先要有分布式技术的一些实践和经验。经历一个分布式系统从小到大，从简单到复杂的完整演进过程。</strong>（这样可以对分布式系统有更全面、深刻的认知，熟悉分布式系统中每一个组件的设计原则，能够站在一个全局的角度，去思考分布式系统中各个组件之间的关联与取舍。对分布式系统也有清晰的知识脉络与理解）</li><li>一定要有一条明确的学习路径，从最根本的原因出发<ul><li>多问自己为什么</li><li>思考怎么做</li><li>在技术理解与实践中反复横跳，才能由点成线</li><li>在总结中抓住技术实现的关键点和系统脉络，不迷失于细节，才能连线成网</li></ul></li></ul><h3 id="课程设计"><a href="#课程设计" class="headerlink" title="课程设计"></a>课程设计</h3><ul><li><strong>首先，找到分布式系统中稳定不变的知识、原理和解决思路。</strong>比如注册发现的原理、故障处理的思路和 CAP 理论等等（分布式系统技术要点多，但万变不离其宗）</li><li><strong>其次，去繁从简。</strong><ul><li>只聚焦于日常工作中接触最频繁的在线业务分布式系统，依据是否有状态将其分为“分布式计算”和“分布式存储”这两大部分，从简单到复杂依次介绍分布式系统的相关知识与原理</li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/fab78448a78d69c9891f9e6b64a620a.u2bzdet8v28.webp" width="100%"><br><h4 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h4><ul><li><strong>专栏将分为四个递进的模块，学习计划如下</strong></li></ul><h5 id="概述篇"><a href="#概述篇" class="headerlink" title="概述篇"></a>概述篇</h5><blockquote><p><strong>学习一个知识应该先理解这个知识的来龙去脉</strong>，我们先讨论分布式系统产生的过程：它为什么会产生，产生后解决了什么问题，又带来了哪些新问题，遇到哪些方面的挑战。</p><p>通过“概述篇”的学习，可以比较好地抓到分布式系统的脉络和关键点，有了很强的学习目标和路径，就不会迷失在各种系统和框架实现的细节中了。</p></blockquote><h5 id="分布式计算篇"><a href="#分布式计算篇" class="headerlink" title="分布式计算篇"></a>分布式计算篇</h5><blockquote><p><strong>从单机系统演进到分布式系统后，引入哪些新问题的角度，在技术原理层面一个一个讨论并解决这些问题。</strong></p><p>学习之后，可以在各种系统和场景中理解和运用它，并且知道在系统设计层面应该如何取舍。</p></blockquote><h5 id="分布式存储篇"><a href="#分布式存储篇" class="headerlink" title="分布式存储篇"></a>分布式存储篇</h5><blockquote><p>分布式技术篇中的进阶篇，我们对计算进行分布式扩展后，再一起来讨论存储的分布式扩展。这里我们从简单到复杂，一起讨论数据分片、数据复制、分布式事务和一致性等相关的知识。</p><p>掌握之后，再做架构设计时，你会发现思维的深度和广度都得到了提升。</p></blockquote><h5 id="总结篇"><a href="#总结篇" class="headerlink" title="总结篇"></a>总结篇</h5><blockquote><p>此时，已经对分布式系统的重要原理有了系统性地理解，这个时候，我们再一起来看分布式系统的发展历程和未来趋势。</p><p>我们从分布式计算的角度，一起讨论分布式系统是怎么从单机系统演进到 Service Mesh的；还会从分布式存储的角度，一起讨论分布式系统是怎么从单机系统的 ACID 演进到NewSQL 的。</p></blockquote><ul><li><strong>这个专栏最大的价值就是能够系统性地解决你的问题，不需要花费大量的精力再进行一次低效的探索。</strong></li></ul><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul><li>[知乎：如何系统性的学习分布式系统?](如何系统性的学习分布式系统? - kylin的回答 - 知乎 <a class="link"   href="https://www.zhihu.com/question/320812569/answer/1386491563" >https://www.zhihu.com/question/320812569/answer/1386491563<i class="fas fa-external-link-alt"></i></a>)</li></ul><br><br><br><h1 id="概述篇-3讲"><a href="#概述篇-3讲" class="headerlink" title="概述篇 (3讲)"></a>概述篇 (3讲)</h1><h2 id="01｜导读：以前因后果为脉络，串起网状知识体系"><a href="#01｜导读：以前因后果为脉络，串起网状知识体系" class="headerlink" title="01｜导读：以前因后果为脉络，串起网状知识体系"></a>01｜导读：以前因后果为脉络，串起网状知识体系</h2><ul><li><strong>学习一个知识之前，比较好的方式是先理解它的前因后果：前因就是这个知识产生的过程中，它解决了什么问题，怎么样解决的。后果就是它的出现又带来了哪些新的问题，这样我们才能比较好地抓到它的脉络和关键点，不会一开始就迷失在细节中。</strong></li></ul><br><h3 id="前因：分布式系统解决了什么问题"><a href="#前因：分布式系统解决了什么问题" class="headerlink" title="前因：分布式系统解决了什么问题"></a>前因：分布式系统解决了什么问题</h3><ul><li><p>学习分布式之前，要解决的第一个问题就是：分布式系统解决了什么问题，怎么样解决的？</p><ul><li>分布式系统解决了单机性能瓶颈导致的成本问题</li><li>解决了用户量和数据量爆炸性地增大导致的成本问题（必须寻找更经济的方案来处理和存储这些数据）</li><li>满足了业务高可用的要求</li><li>分布式系统解决了大规模软件系统的迭代效率和成本的问题</li></ul></li><li><p>在互联网时代，单机系统是无法解决成本、效率和高可用问题的</p></li></ul><ul><li>分布式系统又是怎么解决单机系统面临的成本、效率和高可用的问题呢？<ul><li>分布式系统指的是由一组通过网络进行通信，为了完成共同的任务，而协调工作的计算机节点组成的系统（分布式系统是通过多工作节点，来解决单机系统面临的成本、效率和高可用问题的）</li></ul></li></ul><ul><li>分布式系统的发展是无法阻挡的技术大潮流</li></ul><ul><li>如何理解分布式系统的出现，以及分布式系统在不同业务场景中的表现形式<ul><li><strong>所以我们可以把分布式系统看成是单体系统的平民化和物美价廉的版本</strong></li><li>分布式系统在不同的业务场景中有着不同的表现形式<ul><li>流量路由策略加多副本部署（微服务是其中的一种架构形式）是无状态服务的分布式架构方案</li><li>Redis Cluster 和 Codis 等方案实现了缓存的分布式化</li><li>Kubernetes 则完成了操作系统的分布式进化</li><li>NoSQL 掀起了数据库分布式化的第一波浪潮，而 NewSQL 则推动着支持 ACID 的关系数据库的分布式化</li></ul></li></ul></li></ul><br><h3 id="后果：如何思考和处理分布式系统引入的新问题"><a href="#后果：如何思考和处理分布式系统引入的新问题" class="headerlink" title="后果：如何思考和处理分布式系统引入的新问题"></a>后果：如何思考和处理分布式系统引入的新问题</h3><ul><li>分布式系统的出现也引入了分布式系统内部工作节点的协调问题，主要体现在分布式系统内部组件、实例之间，通过异步网络进行通信和协调的问题上。</li></ul><ul><li><strong>针对内部工作节点的协调问题，分布式系统是怎么做的？</strong><ul><li><strong>对于分布式计算（无状态）的情况，系统内部的协调需要做哪些工作</strong><ul><li>怎么找到服务？（服务的注册与发现）</li><li>怎么找到实例？（负载均衡与路由）</li><li>怎么管理配置？（配置中心）</li><li>怎么进行协同？（分布式锁）</li><li>怎么确保请求只执行一次？（重试与幂等）</li><li>怎么避免雪崩？（快速失败和降级机制（熔断、降级、限流等），弹性扩容机制）</li><li>怎么监控告警和故障恢复？（完善分布式系统的监控（比如接口的时延和可用性等信息），分布式追踪 Trace ，模拟故障的混沌工程以及相关的告警等机制。同时做好故障恢复预案，确保在故障发生的时候，能够快速恢复故障。）</li></ul></li><li><strong>分布式存储（有状态）的内部协调是怎么做的</strong><ul><li>怎么进行协同？</li><li>怎么做数据分片（单机系统是不可能存储所有数据的，所以需要解决怎么将数据按一定的规则，分别存储到不同的机器上这个问题，目前使用较多的方案是：Hash 和 Region 分片的策略，但是要注意了解一下它们的优缺点和各自的应用场景。）</li><li>怎么做数据复制（为了满足系统的高可用要求，需要对数据做冗余处理）</li><li>怎么做分布式事务</li></ul></li></ul></li></ul><br><h3 id="系统学习"><a href="#系统学习" class="headerlink" title="系统学习"></a>系统学习</h3><ul><li><p><strong>从实践出发</strong>，研究目前比较常用的分布式系统的设计，HDFS 或者 GFS（分布式文件系统）、Kafka 和 Pulsar（分布式消息队列），Redis Cluster 和 Codis（分布式缓存），MySQL 的分库分表（传统关系型数据库的分布式方案），MongoDB 的 Replica Set 和Sharing 机制集（NoSQL 数据库），TiDB（NewSQL）以及一些微服务框架等</p></li><li><p><strong>从理论出发</strong>，研究分布式相关的论文（《Designing Data-IntensiveApplications》）</p></li></ul><ul><li>为了更好地理解如何处理分布式系统引入的内部工作节点的协调问题，把它们总结为下面三类问题：</li><li><strong>路由问题</strong></li></ul><blockquote><p>分布式系统由单体系统拆分而来，必然会导致分布式系统内部，出现复杂的路由问题。路由问题主要是解决分布式系统内部各服务和实例之间的通信，我们可以将“怎么找到服务”和“怎么找到实例”等服务注册发现和负载均衡的问题，理解为正常情况下的路由问题，将“怎么做数据分片”的问题，理解为带状态的路由问题，将“怎么避免雪崩”涉及的熔断、降级等快速失败和降级机制，理解为异常情况下的路由问题。</p></blockquote><ul><li><strong>共识问题</strong></li></ul><blockquote><p>分布式系统的各个组件是运行在不同机器上的不同进程，因为程序总是需要按一定的逻辑有序地执行，所以需要一个办法，来协调分布式系统内部，已经各自为政的服务和实例，而共识就是讨论并解决这一类问题的，例如“怎么做数据复制”、“怎么做分布式事务”和“怎么做分布式锁”里，都会涉及共识问题。</p></blockquote><ul><li><strong>运维问题</strong></li></ul><blockquote><p>分布式系统相对于单体系统是非常碎片化的，如果还依靠人肉运维，在效率上是完全行不通的，所以催生了一系列自动化运维的工具和平台来解决这一类问题，例如“怎么管理配置”和“怎么监控告警和故障恢复”都涉及运维的问题。</p></blockquote><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在学习新知识的时候，只有点、线结合，形成网状的知识体系</li></ul><img src="" width="70%"><br><br><br><h2 id="02｜新的挑战：分布式系统是银弹吗？我看未必！"><a href="#02｜新的挑战：分布式系统是银弹吗？我看未必！" class="headerlink" title="02｜新的挑战：分布式系统是银弹吗？我看未必！"></a>02｜新的挑战：分布式系统是银弹吗？我看未必！</h2><ul><li>要从根本上理解分布式系统的设计方法和原则，这就需要时刻谨记单体系统和分布式系统之间的差别</li><li><strong>从本质上来说，单体系统是以单进程的形式运行在一个计算机节点上，而分布式系统是以多进程的形式运行在多个计算机节点上，二者的本质差别导致了分布式系统面临着四个方面的新问题，分别是：故障处理、异步网络、时钟同步和共识协同。</strong></li></ul><br><h3 id="全部失败与部分失败"><a href="#全部失败与部分失败" class="headerlink" title="全部失败与部分失败"></a>全部失败与部分失败</h3><ul><li>单体服务系统中，在硬件正常的时候，对于一个确定的输入，总会得到一个确定的输出。就算是在内存、磁盘损坏等硬件异常的时候，对于一个确定的输入，计算机也会直接出现无法启动或崩溃的情况，而不是给出一个模棱两可或不正确的结果。</li><li><strong>这种全部失败的处理逻辑，会大大减轻用户使用计算机的心智负担，让我们明确地知道，如果系统内部发生了故障，计算机不会给出错误的结果，而是会全部崩溃。</strong></li><li>分布式系统由多个计算机节点组成，虽然每一个计算机节点都是全部失败的模型，但是<strong>如果系统中的某些节点出现宕机或者网络故障，整个分布式系统就会出现部分失败的情况</strong></li><li>在分布式系统中，我们需要接受部分失败。</li><li>在分布式系统中，故障处理是软件设计的一个重要组成部分。我们需要时刻谨记节点宕机、网络分区等各种问题出现时，系统应该怎么正确处理，比如分布式系统在设计的时候，每一个组件都必须是高可用的。</li></ul><br><h3 id="本地调用与远程调用"><a href="#本地调用与远程调用" class="headerlink" title="本地调用与远程调用"></a>本地调用与远程调用</h3><ul><li><p>单体系统内部几乎不依赖网络，但是网络却是架构分布式系统的根基。（单体系统和分布式系统对网络的依赖程度有非常明显的差别）</p></li><li><p>在单机系统中，系统各个组件之间直接本地调用即可。在分布式系统中，不同的组件运行在不同的机器上，只能通过网络来进行调用，即远程调用。</p></li><li><p><strong>远程调用多依赖了网络这个通道，但是这却给系统带来了非常大的复杂性，其实主要原因还是网络本身的复杂性所导致的。</strong></p></li><li><p>单机系统的本地调用方式，我们可以理解为只要发起调用，调用操作就一定会执行，并且我们可以忽略调用方和被调用方之间的数据传递时间。</p></li><li><p>务 A 通过网络远程调用服务 B 可能会出现哪些不确定的情况</p></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677904586109.3as408m3r7g0.webp" width="70%"><br><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677904729081.2z0bllknpeq0.webp" width="70%"><br><ul><li><p><strong>在这样的情况下，通常的做法是采用超时机制，请求方在发起请求后，设置一个超时时间，这样能确保请求方在超时时间内，一定能得到一个响应。</strong>如果在超时时间内，请求方得到了明确的响应，不论这个响应是被调用服务回复的，还是网络地址不可达等网络错<br>误，调用方都可以根据响应结果一一来处理。</p></li><li><p>如果请求在超时时间内没有收到任何响应，即响应超时，那么调用方将无法区分下面四种情况：</p></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677904885933.1d25yb9539nk.webp" width="70%"><br><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677904908914.197m3piz376.webp" width="70%"><br><blockquote><p>在响应超时的情况下，如果调用方想确保这个请求被执行，只能重新发送刚刚的请求。但是，如果之前的请求只是在网络中延迟或者响应丢失了，例如上面 2、3 和 4 中描述的情况，重试操作会导致这个请求被多次执行；如果之前的请求在网络中丢失了，例如上面 1描述的情况，那么调用方不进行重试的话，这个请求就会出现一次都没有被执行过的情况。</p></blockquote><blockquote><p>在分布式系统的设计中，我们要充分考虑通过网络进行远程调用导致的不确定性，比如在响应超时的情况下增加重试机制，确保请求能最少执行一次。在重试的时候增加幂等的机制，确保请求只被精确处理一次，并且对重试机制增加退避策略，确保系统不会因为重试导致雪崩。</p></blockquote><br><h3 id="全局时钟与多个时钟"><a href="#全局时钟与多个时钟" class="headerlink" title="全局时钟与多个时钟"></a>全局时钟与多个时钟</h3><ul><li>计算机系统一般是通过石英钟来计算时间的，但是石英钟的振动频率会随着温度等原因变慢或变快，所以在运行时间比较长后，计算机系统的时间可能会发生比较大的误差，所以人们又增加了一组专门的时间服务器。我们可以认为这些时间服务器的时间是准确的，计算机系统通过网络定期获得时间服务器的时间，来调整本地时间，即网络时间协议（NTP）。我们可以通过下面的公式来计算当时的时间：<strong>本地时间 = 时间服务器的返回时间 + 时间服务器响应的网络时延</strong></li><li>网络时延是不可预测的，所以通过 NTP 我们依然无法获得准确的时间。</li><li>一般的精度都是在几十毫秒的范围内。不过，这个精度对于单机系统来说是足够的</li><li>计算机系统中，时间主要有两个作用<ul><li><strong>第一个是记录事件发生的时间。这是一个绝对时间，是让我们来阅读和理解的</strong></li><li><strong>第二个是记录事件之间的发生顺序，这是一个相对时间。</strong></li></ul></li><li>在单机系统中，由于只有一个时钟，先执行的事件一定能获得更小的时间，通过本地时钟就可以确保全局事件之间顺序的正确性，所以<strong>单机系统是一个全局时钟的模型</strong>。</li></ul><blockquote><p>分布式系统是由多台计算机节点组成的，每一个节点都有自己的时钟，并且计算机执行的速度非常快，在一个毫秒内可以做非常多的事情。在这种情况下，如果在每一个节点，都采用本地的时钟来记录事件的发生时间，然后基于多个节点上的事件按发生时间进行排序，就很容易出现时间穿越的问题:</p></blockquote><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677905482319.3210ybk3st20.webp" width="90%"><br><blockquote><p>在多主复制的情况下，客户端 A 在主副本 1 修改了 x = 5，记录时间为 10 ms，但是该副本时间慢了 10 ms，所以实际时间为 20 ms。几乎同一时间，客户端 B 在主副本 2 修改了 x = 10，记录时间为 15 ms，但是该副本时间快了 10 ms，所以实际时间为 5ms。</p><p>一般对于这种情况的处理策略是最后写入获胜（LWW），在数据合并的时候，如果按照主副本 1、2 的记录时间来处理的话，最终 x = 10，会导致主副本 1 的修改丢失。</p></blockquote><ul><li>在分布式系统的设计中，我们一定要谨记系统中各个节点的本地时钟是存在误差的，不能依赖各自的时钟对事件进行排序。</li><li>针对上面问题的解决思路:<ul><li>一个是回到单机系统的全局时钟的模式，所有节点对于需要排序的事件时间，不使用本地时钟的时间，而是去请求同一个时间服务器获得事件的发生时间，然后依据这个时间进行排序；</li><li>另一个是 Google 在 Spanner 中使用的，通过 GPS 和原子钟实现 TrueTime API 来解决。</li></ul></li></ul><br><h3 id="一言堂与共识"><a href="#一言堂与共识" class="headerlink" title="一言堂与共识"></a>一言堂与共识</h3><ul><li>线程之间的同步操作：在计算机系统中，同时只允许一个线程操作某一个数据，和同时只允许一个线程执行某一个操作，如果不遵守这个规则，就可能会导致数据错误等不可预料的后果</li><li>在单体系统中，需要协同的多个线程是属于同一个进程的，所以同步操作很简单，直接使用进程内的资源来做协同就可以了，比如锁、信号量等。对于这些线程来说，所有的同步操作都以进程的资源为准，就好像进程是一个一言堂的管理员，协同进程内部的所有线程之间的同步。</li><li>分布式系统中各个组件都是独立的进程，运行在不同的机器上。所以，<strong>对于分布式系统来说，我们需要处理的是一个跨机器的多进程同步问题。</strong></li><li>方法：我们选择一个服务来做同步操作的管理者（我们称为同步服务），在多个进程间需要同步时，就到同步服务来请求一个锁，获得锁的进程就可以操作，其他的进程就必须等待。</li></ul><blockquote><p>在做分布式系统设计的时候，我们必须要考虑到故障的存在，所以同步服务不能只有一个实例，它需要多个实例来保障它的高可用，那么同步服务应该由哪一个实例，来处理其他进程的同步请求呢？</p></blockquote><blockquote><p>你可能会想通过配置直接指定一个，这确实解决了同步服务启动时的问题，但是如果被指定实例宕机了，接下来该由哪一个实例来继续处理同步请求呢？</p></blockquote><ul><li>我们通过这些讨论，会发现问题依然没有解决，只是转移了，也就是将分布式系统的多进程同步问题变成了同步服务的选主问题。</li><li>其实，<strong>这是一个共识问题，需要分布式系统中参与同步的进程之间能达成共识，目前我们是通过 Paxos 或者 Raft 这样的共识算法来解决问题的</strong></li></ul><br><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677906361215.378zskhn5080.webp" width="90%"><br><ul><li>在不可靠的硬件上通过软件来容错，构建高可用的分布式系统。</li><li>如何确保请求只被精确处理一次成为了分布式场景下新的挑战。</li><li>如何对系统中的事件进行排序，变成分布式场景下新的挑战。</li><li>单体系统的单进程、多线程的同步模型变成了跨机器的多进程同步模型，要解决这个问题，就需要分布式系统中参与同步的进程之间能达成共识。</li></ul><br><br><br><h2 id="03｜CAP-理论：分布式场景下我们真的只能三选二吗？"><a href="#03｜CAP-理论：分布式场景下我们真的只能三选二吗？" class="headerlink" title="03｜CAP 理论：分布式场景下我们真的只能三选二吗？"></a>03｜CAP 理论：分布式场景下我们真的只能三选二吗？</h2><ul><li>经过不断地思考，人们在实践分布式系统架构的时候，从系统可用性和数据一致性的权衡中总结出来了 CAP 理论，它是指导人们在面对架构分布式系统时，进行取舍的设计原则。同时，CAP 理论深刻影响着分布式系统的设计与发展，是我们在学习分布式系统时不能绕过的知识。</li></ul><br><h3 id="什么是-CAP-理论"><a href="#什么是-CAP-理论" class="headerlink" title="什么是 CAP 理论"></a>什么是 CAP 理论</h3><ul><li>CAP 理论是加州理工大学伯克利分校的 Eric Brewer 教授在 2000 年 7 月的 ACM PODC会议上首次提出的，它是 Eric Brewer 在 Inktomi 期间研发搜索引擎、分布式 Web 缓存时得出的关于数据一致性（ C：Consistency ）、服务可用性（ A：Availability ）、分区容错性（ P：Partition-tolerance ）的一个著名猜想：</li></ul><blockquote><p>It is impossible for a web service to provide the three following guarantees : Consistency, Availability and Partition-tolerance.</p></blockquote><ul><li><p>在这个猜想提出的 2 年以后，来自麻省理工学院的 Seth Gilbert 和 Nancy Lynch 从理论上证明了 Eric Brewer 教授的 CAP 猜想是成立的，从此，CAP 理论在学术上正式成为了分布式领域公认的定理，并深刻影响着分布式系统的发展。</p></li><li><p>CAP 理论告诉我们，一个分布式系统不可能同时满足数据一致性、服务可用性和分区容错性这三个基本需求，最多只能同时满足其中的两个。</p></li></ul><br><h3 id="一致性（-C-）"><a href="#一致性（-C-）" class="headerlink" title="一致性（ C ）"></a>一致性（ C ）</h3><ul><li>CAP 理论中的一致性是指强一致性（ Strong Consistency ），又叫线性一致性（Linearizable Consistency ），它要求多节点组成的分布式系统，能像单节点一样运作，如果一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有的读操作都不能读到这个数据。</li><li>其他的一致性级别<ul><li>序列一致性（ Sequential Consistency ）</li><li>最终一致性（ Eventual Consistency ）</li><li>……</li></ul></li></ul><br><h3 id="可用性（-A-）"><a href="#可用性（-A-）" class="headerlink" title="可用性（ A ）"></a>可用性（ A ）</h3><ul><li>CAP 理论-可用性的定义：要求系统提供的服务必须处于 100% 可用的状态，对于用户的每一个操作请求，系统总能够在有限的时间内返回结果。</li></ul><h4 id="100-可用"><a href="#100-可用" class="headerlink" title="100% 可用"></a>100% 可用</h4><ul><li>它说的是系统必须完全可用，不允许任何不可用的情况出现，这是一个非常理想的模型</li></ul><h4 id="有限时间内"><a href="#有限时间内" class="headerlink" title="有限时间内"></a>有限时间内</h4><ul><li>对于客户端的一个请求，系统必须在指定的时间内返回对应的请求结果，如果超过了这个时间，系统就被认为是不可用的（一般来说，“有限时间内”是系统在设计的时候，就设定好的系统运行指标）</li></ul><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><ul><li>系统在完成对客户端请求的处理后，必须返回一个正常的响应结果。客户端可以根据这个响应结果，来明确判断这个请求执行成功还是失败，而不是返回一个让用户无法判断的不正常的响应结果。</li></ul><br><h3 id="分区容错性（-P-）"><a href="#分区容错性（-P-）" class="headerlink" title="分区容错性（ P ）"></a>分区容错性（ P ）</h3><ul><li>分区指的是在整个分布式系统中，因为各种网络原因，系统被分隔成多个单独的部分，它不仅包含我们通常说的网络分区，也包含因为网络丢包导致的网络不通的情况。</li><li>在现实的分布式系统中，我们面对的就是一个不可靠的网络和有一定概率宕机的设备</li><li>分区容错性 P 是一个必须项，而不是可选项。</li></ul><ul><li><strong>对于分布式系统工程实践来说， CAP 理论更合适的描述是：在满足分区容错的前提下，没有算法能同时满足数据一致性和服务可用性。</strong></li></ul><br><h3 id="CAP-理论产生的影响"><a href="#CAP-理论产生的影响" class="headerlink" title="CAP 理论产生的影响"></a>CAP 理论产生的影响</h3><ul><li>关于数据一致性和可用性之间的争论由来已久，当时主要表现为 ACID 与 BASE 之间的争论。</li><li>当 CAP 理论提出后，我们明白了在分布式系统中，只能在强一致性和 100% 的可用性之间二选一，不能两个都要。从此 BASE 理论也逐渐被人们所接受，在大规模存储的场景中广泛应用，并且开创了从 2000 年到 2010 年， NoSQL 运动的黄金十年。</li></ul><br><h3 id="CAP-理论的重新思考与理解"><a href="#CAP-理论的重新思考与理解" class="headerlink" title="CAP 理论的重新思考与理解"></a>CAP 理论的重新思考与理解</h3><ul><li>一个有历史使命的事物，在使命完成后，要么就过时了，人们不再提起它，要么就会对它有新的解释，让它跟随时代一起发展下去。而 CAP 理论显然属于后者，因为直到现在，人们还在对它不断地重新思考与理解。</li><li>在 2000 年的时候，CAP 理论通过一个简单但是精确定义的模型，论证了在一个满足分区容错的分布式系统中，当我们进行系统设计时，只能在数据一致性和服务可用性之间二选一。其中，<strong>数据一致性（ C ）指的是数据的强一致性，服务的可用性（ A ）指的是服务100 % 的可用性，这才是 CAP 理论论证模型的关键点。</strong></li></ul><br><h3 id="对可用性的重新思考与理解"><a href="#对可用性的重新思考与理解" class="headerlink" title="对可用性的重新思考与理解"></a>对可用性的重新思考与理解</h3><ul><li>对于数据的一致性（ C ） ，除了 CAP 理论要求的强一致性外，还有单调一致性、会话一致性和最终一致性等。</li><li>如果我们的系统设计选择了 AP 模型，<strong>在数据一致性方面，虽然我们无法实现强一致性，但是我们也不要全部放弃，可以努力去实现更高的一致性级别，为系统的服务提供更好的抽象。</strong></li></ul><h3 id="对分区容错性的重新思考与理解"><a href="#对分区容错性的重新思考与理解" class="headerlink" title="对分区容错性的重新思考与理解"></a>对分区容错性的重新思考与理解</h3><ul><li>在网络不出现分区的时候，我们将数据强一致性和 100% 的可用性都选择，等到网络出现分区的时候，系统再选择放弃部分的可用性或者降低数据一致性的级别（可行）。<strong>这实际是将 CAP 理论的选择，推迟到出现网络分区的时候，而不是系统一启动就进行 CAP 的选择。</strong>这样可以大大提高系统的可用性和数据一致性，并且系统依然能容忍网络分区。</li><li><strong>CAP 理论给我们定义了系统的设计边界，虽然想要设计出超过边界的系统是徒劳的，但是我们却可以无限逼近边界，并且把它作为我们设计系统的目标。</strong></li></ul><br><br><br><h1 id="春节加餐-3讲"><a href="#春节加餐-3讲" class="headerlink" title="春节加餐 (3讲)"></a>春节加餐 (3讲)</h1><h2 id="春节加餐｜系统性思维，高效学习和工作的利器"><a href="#春节加餐｜系统性思维，高效学习和工作的利器" class="headerlink" title="春节加餐｜系统性思维，高效学习和工作的利器"></a>春节加餐｜系统性思维，高效学习和工作的利器</h2><ul><li><strong>学习和工作是我们人生中非常关键的两个部分，它们占据了我们大部分的时间，并且它们的结果也在很大程度上，决定了我们生活的质量和幸福感。</strong></li><li>在同样的时间里，如何让学习和工作变得更高效，就是我们自我提升的关键。</li></ul><br><h3 id="对于学习，从深度和广度上运用系统性思维方式"><a href="#对于学习，从深度和广度上运用系统性思维方式" class="headerlink" title="对于学习，从深度和广度上运用系统性思维方式"></a>对于学习，从深度和广度上运用系统性思维方式</h3><ul><li>面临两个问题：<ul><li>学习之前，知识太抽象，不好理解</li><li>学习之后容易忘记，记不住知识点</li></ul></li><li>问题原因：学习方式不够系统</li></ul><ul><li><strong>因为我们在学习一个知识时，直接面对的是这一个知识的结论，是高度总结和抽象的结果，所以在我们不了解这个知识相关的时代背景和原因的情况下，直接去进行学习，肯定会一知半解，甚至毫无头绪。</strong></li><li>如果跳过了这个知识产生的时代背景和原因，在深度的学习上就缺乏了系统性。</li><li><strong>正确的学习思路应该是：我们要知道一个知识是为了解决什么问题而产生的，后面又经过了什么样的迭代和优化，最终演变成了什么样子。</strong></li></ul><ul><li>学习之后，容易忘记，记不住这个知识，是因为在广度的学习上缺乏了系统性。</li><li><strong>我们学习了很多零散的知识，但是却没有将知识点之间建立起联系，形成一个相互依赖的网状知识体系。</strong></li><li>构建网状知识体系</li></ul><br><h3 id="对于工作，通过系统性思维从根本上解决问题"><a href="#对于工作，通过系统性思维从根本上解决问题" class="headerlink" title="对于工作，通过系统性思维从根本上解决问题"></a>对于工作，通过系统性思维从根本上解决问题</h3><ul><li>如果我们只是见招拆招地解决，就会发现问题永远都解决不过来</li><li><strong>系统性的思维方式是解决它们的根本。我们在每一次面对独立的问题的时候，应该跳过问题表层现象，深度思考这个问题的本质原因，系统性地解决。</strong></li></ul><br><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li><p>在学习中，从深度上系统性学习，我们可以了解一个知识的来龙去脉；</p></li><li><p>在广度上系统性学习，我们可以明白知识之间的关系，并且建立好知识网络；</p></li><li><p>在工作中，使用系统性思维解决问题，可以让我们找到问题的本源，从根本上解决问题。</p></li><li><p>有的人觉得学习非常痛苦，是因为学习效率不高，而且没有掌握好方法</p></li></ul><br><br><br><h2 id="春节加餐｜深入聊一聊计算机系统的时间"><a href="#春节加餐｜深入聊一聊计算机系统的时间" class="headerlink" title="春节加餐｜深入聊一聊计算机系统的时间"></a>春节加餐｜深入聊一聊计算机系统的时间</h2><ul><li>在计算机系统内部，主要有两种时钟：墙上时钟和单调时钟，它们都可以衡量时间，但却有本质的区别。</li></ul><br><h3 id="墙上时钟"><a href="#墙上时钟" class="headerlink" title="墙上时钟"></a>墙上时钟</h3><ul><li><p>在 Linux 系统中，墙上时钟的表示形式为 UTC 时间，记录的是自公元 1970 年 1月 1 日 0 时 0 分 0 秒以来的秒数和毫秒数（不含闰秒）。</p></li><li><p>Linux 系统需要处理闰秒的逻辑就是因为 Linux 系统使用 UTC 时间，但是系统中记录的UTC 时间是不含闰秒的。</p></li></ul><br><h3 id="墙上时钟的同步"><a href="#墙上时钟的同步" class="headerlink" title="墙上时钟的同步"></a>墙上时钟的同步</h3><ul><li>计算机内部的计时器为石英钟，但是它不够精确，随着机器的温度波动，会存在过快或者过慢的问题，<strong>所以依靠计算机自身，来维持墙上时钟的准确性是不可能的，这就是计算机系统内的时间需要与外部时间进行同步的原因。</strong></li></ul><br><h3 id="闰秒出现的原因"><a href="#闰秒出现的原因" class="headerlink" title="闰秒出现的原因"></a>闰秒出现的原因</h3><ul><li>因为地球自转速率变慢，所以目前的两种时间计量系统：世界时和原子时，它们之间发生了误差，这就是闰秒出现的根本原因</li><li>为了统一原子时与世界时之间的差距，协调世界时（ UTC ）就产生了。从 1972 年1 月 1 日 0 时起，协调世界时秒长采用原子时秒长，时刻与世界时的时刻之差保持在正负0.9 秒之内，必要时用阶跃 1 整秒的方式来调整。</li><li>这个 1 整秒的调整，叫做闰秒，如果增加 1 秒就是正闰秒，减少 1 秒就是负闰秒。 UTC 从 1972 年 1 月起正式成为国际标准时间，它是原子时和世界时这两种时间尺度的结合。</li></ul><br><h3 id="闰秒的处理"><a href="#闰秒的处理" class="headerlink" title="闰秒的处理"></a>闰秒的处理</h3><ul><li>因为 Linux 系统记录着，自公元 1970 年 1 月 1 日 0 时 0 分 0 秒以来的秒数和毫秒数，但是不含闰秒这种情况，导致了在 Linux 系统中每分钟有 60 秒，每天有 86400 秒是系统定义死的。</li><li>Linux 系统需要额外的逻辑来处理闰秒。目前处理闰秒的方式主要有两种，一种是在Linux 系统上进行跳跃式调整，另一种是在 NTP 服务上进行渐进式调整的 Slew 模型</li></ul><br><h3 id="跳跃式调整"><a href="#跳跃式调整" class="headerlink" title="跳跃式调整"></a>跳跃式调整</h3><ul><li>当 UTC 时间插入一个正闰秒后，Linux 系统需要跳过 1 秒，即这一秒时间过去后，在 Linux 的时间管理程序中不应该去计时，因为闰秒的这一秒钟在 Linux 系统中不能被表示。</li><li>当 UTC 时间插入一个负闰秒后，Linux 系统就需要插入 1 秒，即 Linux 的时间管理程序中要增加 1 秒钟的计时。虽然并没有过去 1秒钟的时间，但是闰秒的这一秒钟在Linux 系统中是不存在的。</li></ul><br><h3 id="Slew-模式"><a href="#Slew-模式" class="headerlink" title="Slew 模式"></a>Slew 模式</h3><ul><li>当 UTC 时间需要插入一个正闰秒时， NTP 服务就会每秒调整一定的 ms 来缓慢修正时间。这样 Linux系统从 NTP 服务同步时间的时候，就不会感知闰秒的存在了，内核也就不需要启动闰秒相关的逻辑了。</li></ul><br><h3 id="单调时钟"><a href="#单调时钟" class="headerlink" title="单调时钟"></a>单调时钟</h3><ul><li><p>单调时钟是一个相对时钟，不需要与外部的时钟进行同步，较墙上时钟要简单很多</p></li><li><p>单调时钟总是保证时间是向前的，不会出现墙上时钟的回拨问题，所以它非常适合用来测量持续时间段</p></li></ul><br><h3 id="时间的管理"><a href="#时间的管理" class="headerlink" title="时间的管理"></a>时间的管理</h3><ul><li><p>计算机必须在硬件的帮助下才能计算和管理时间。前面说的石英钟就是用来做计算机的系统定时器的，系统定时器以某种固定的频率自行触发时钟中断。由于时钟中断的频率是编程预定的，所以内核知道连续两次时钟中断的间隔时间，这个间隔时间就叫做节拍。<strong>通过时钟中断，内核周期性地更新系统的墙上时钟和单调时钟，从而计算和管理好时间。</strong></p></li><li><p>处理器在给定的时间内执行指令数，通过 BogoMIPS 值，计算机就可以得到非常小的精度了</p></li></ul><br><br><br><h2 id="春节加餐｜技术债如房贷，是否借贷怎样取舍？"><a href="#春节加餐｜技术债如房贷，是否借贷怎样取舍？" class="headerlink" title="春节加餐｜技术债如房贷，是否借贷怎样取舍？"></a>春节加餐｜技术债如房贷，是否借贷怎样取舍？</h2><ul><li>我们一般说的技术债务指的是，将一些技术方案通过简单、粗暴的方式来实现，以减少研发资源和研发时间的投入。</li></ul><br><h3 id="技术债务是生产力"><a href="#技术债务是生产力" class="headerlink" title="技术债务是生产力"></a>技术债务是生产力</h3><h4 id="项目快速发展的初期"><a href="#项目快速发展的初期" class="headerlink" title="项目快速发展的初期"></a>项目快速发展的初期</h4><ul><li>内部和外部的环境都在剧烈变化，快速交付是非常重要的，我们需要通过借技术债务来融资，快速完成我们的项目，确保在竞争中不会失败</li></ul><br><h4 id="项目发展的中期"><a href="#项目发展的中期" class="headerlink" title="项目发展的中期"></a>项目发展的中期</h4><ul><li>在这时，我们经常会碰到一些技术决策，需要思考到底应该很完善、系统地完成，还是借一点技术债务，让实现变得简单一点。</li></ul><br><h4 id="项目发展的后期"><a href="#项目发展的后期" class="headerlink" title="项目发展的后期"></a>项目发展的后期</h4><ul><li>如果我们还有一些其他的更高投入产出比（ROI）的事情，我们就可以选择借一些技术债务来完成项目的工作，然后将空余的资源投入到更高 ROI 的事情，达到全局最优的效果。</li></ul><ul><li><strong>技术债务是生产力，合理利用技术债务会大大提高我们的研发效率，提高项目的成功率。</strong></li></ul><br><h3 id="技术债务应该是深思熟虑的结果"><a href="#技术债务应该是深思熟虑的结果" class="headerlink" title="技术债务应该是深思熟虑的结果"></a>技术债务应该是深思熟虑的结果</h3><ul><li>技术债务影响的范围</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678247128680.18lo32sae71c.webp" width="90%"><br><ul><li><p>系统的接口和协议是对外提供服务的，就导致它的影响范围非常大，并且还会随着接入方的增加，而自动放大技术债务</p></li><li><p>系统架构的技术债务的利息一般也是很高的，因为系统的架构会从全局影响系统的设计，它的影响范围会非常大，并且会随着系统的迭代而增加</p></li><li><p>局部的功能和逻辑之类的实现的利息是比较低的，因为它只会影响到局部的代码实现，比如一个函数的具体实现、写死的配置和策略等影响范围不大的地方</p></li><li><p>非常边缘的功能和一些尝试型的功能实现的利息是非常低的，因为边缘功能后续的迭代不会很多，它在时间维度上的影响范围是非常小的，而尝试型的功能在后面是有一定的可能性被放弃的。虽然我们希望尝试都成功，但是如果被放弃后，从技术债务的角度来看的话，我们甚至连本金都不需要还。所以，这样的利息债务可以根据需要多借一些。</p></li></ul><br><h3 id="技术债务是需要不断去偿还的"><a href="#技术债务是需要不断去偿还的" class="headerlink" title="技术债务是需要不断去偿还的"></a>技术债务是需要不断去偿还的</h3><ul><li>在面对技术债务的时候，有可能会迷失。那么如果不重视偿还，会出现什么问题呢？<ul><li>这会让我们系统的技术债务恶化，我们每一次的迭代都需要付出不少的利息，这个利息包括迭代的工程效率低、上线的故障等。如果技术债务积累到一定的程度，甚至会影响这个业务的成本</li><li>所有的债务都是需要信用来担保的，在借技术债务的过程中，用来担保的是我们的技术信用，即我们的技术影响力。技术影响力对于我们职业生涯的发展是非常关键的，如果我们在自己负责的项目中，积累了非常多的技术债务，那么在其他人了解这个项目的情况后，将会影响我们的技术影响力。</li></ul></li></ul><br><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul><li>合理控制技术债务，让技术债务变成我们的杠杆，而不是负担。</li><li>技术债务和贷款买房的思维模式一样，如果借技术债务的收益大于利息的时候，你就大胆地去借吧！</li></ul><br><br><br><h1 id="分布式计算篇-15讲"><a href="#分布式计算篇-15讲" class="headerlink" title="分布式计算篇 (15讲)"></a>分布式计算篇 (15讲)</h1><h2 id="04｜注册发现：-AP-系统和-CP-系统哪个更合适？"><a href="#04｜注册发现：-AP-系统和-CP-系统哪个更合适？" class="headerlink" title="04｜注册发现： AP 系统和 CP 系统哪个更合适？"></a>04｜注册发现： AP 系统和 CP 系统哪个更合适？</h2><h3 id="为什么需要服务注册发现"><a href="#为什么需要服务注册发现" class="headerlink" title="为什么需要服务注册发现"></a>为什么需要服务注册发现</h3><h4 id="单体服务面临的问题"><a href="#单体服务面临的问题" class="headerlink" title="单体服务面临的问题"></a>单体服务面临的问题</h4><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678247819408.lmrnrdy4y5c.webp" width="90%"><br><h5 id="成本方面"><a href="#成本方面" class="headerlink" title="成本方面"></a>成本方面</h5><ul><li>我们在做所有的事情时都会考虑投入产出比（ROI），所以成本是我们必须考虑的一个问题。对于单体服务在服务器硬件方面的成本，我们需要特别注意异构工作负载和不同保障级别这两个方面的问题。</li></ul><h6 id="异构工作负载方面"><a href="#异构工作负载方面" class="headerlink" title="异构工作负载方面"></a>异构工作负载方面</h6><ul><li>单体服务会包含多种多样的功能模块，有一些是 IO密集型的模块，比如主要对数据库进行 CRUD 的功能模块；另一些则是计算密集型的模块，比如图片、音频和视频转码相关的功能模块。如果能将 IO 密集型和 CPU 密集型的模块拆分成不同的服务，分开部署到更合适的硬件上，将可以节省大量的机器成本。比如 IO密集型的模块，我们可以部署在 CPU 性能相对较低的机器上。</li></ul><h6 id="不同的保障级别"><a href="#不同的保障级别" class="headerlink" title="不同的保障级别"></a>不同的保障级别</h6><ul><li>不同业务等级的保障级别也是不一样的：对于账号模块等核心模块，必须确保资源充足；但是对于非核心模块，保障的资源可以相对少一些。而对于一个单体服务来说，是没有办法对不同的模块实施不同的保障级别的。</li></ul><br><h5 id="研发效率"><a href="#研发效率" class="headerlink" title="研发效率"></a>研发效率</h5><ul><li>研发效率是我们能够高效、舒心工作的基本保障，所以必须要注意单体服务模式导致的串行的编译、测试和发布，以及研发团队只能选择单一的研发语言和生态（一般在进程内跨语言都会有限制）这两个限制。</li></ul><h6 id="串行的编译、测试和发布"><a href="#串行的编译、测试和发布" class="headerlink" title="串行的编译、测试和发布"></a>串行的编译、测试和发布</h6><ul><li>多个研发团队会同时开发不同的功能，由于是单体服务，这些功能只能一起编译、测试和发布，非常浪费时间。如果还要进行灰度发布，那么效率将会更低。</li></ul><h6 id="单一的语言和生态限制"><a href="#单一的语言和生态限制" class="headerlink" title="单一的语言和生态限制"></a>单一的语言和生态限制</h6><ul><li>不同的业务需求可能会对应不同的编程语言和生态。如果是单体服务，则很难按业务需求来选择编程语言和相关的生态，这会大大影响研发效率。</li></ul><h5 id="单体服务引发的稳定性问题"><a href="#单体服务引发的稳定性问题" class="headerlink" title="单体服务引发的稳定性问题"></a>单体服务引发的稳定性问题</h5><ul><li>局部风险会放大到全局，</li><li>业务迭代周期差异大</li></ul><br><ul><li><strong>上面三个方面的本质问题，都是因为我们的业务是一个单体应用，不能按资源类型进行分别扩容，不能按功能或者服务进行小范围的部署，也不能按业务的需求来选择更适合的研发语言和生态等，所以我们决定按资源和业务等维度对单体服务进行拆分。</strong></li></ul><br><h4 id="服务注册发现的业务场景"><a href="#服务注册发现的业务场景" class="headerlink" title="服务注册发现的业务场景"></a>服务注册发现的业务场景</h4><ul><li>如果服务 A 需要调用服务 B，那么服务 A 怎么获取被调用服务 B 的 IP 和 Port 呢？这个其实就是服务注册发现的业务场景</li></ul><br><h3 id="服务注册发现的关键问题是什么"><a href="#服务注册发现的关键问题是什么" class="headerlink" title="服务注册发现的关键问题是什么"></a>服务注册发现的关键问题是什么</h3><ul><li>我们可以将配置 IP 和 Port 列表的方式修改为配置域名和 Port</li></ul><br><ul><li><strong>统一的中介存储</strong>：调用方在唯一的地方获得被调用服务的所有实例的信息。</li><li><strong>状态更新与通知</strong>：服务实例的信息能够及时更新并且通知到服务调用方</li></ul><br><h3 id="怎么实现服务注册发现"><a href="#怎么实现服务注册发现" class="headerlink" title="怎么实现服务注册发现"></a>怎么实现服务注册发现</h3><h4 id="如何选择适合的中介存储"><a href="#如何选择适合的中介存储" class="headerlink" title="如何选择适合的中介存储"></a>如何选择适合的中介存储</h4><ul><li><strong>可用性要求非常高</strong>：因为服务注册发现是整个分布式系统的基石，如果它出现问题，整个分布式系统将不可用。</li><li><strong>性能要求中等</strong>：只要设计得当，整体的性能要求还是可控的，不过需要注意的是性能要求会随分布式系统的实例数量变多而提高</li><li><strong>数据容量要求低</strong>：因为主要是存储实例的 IP 和 Port 等元数据，单个实例存储的数据量非常小。</li><li><strong>API 友好程度</strong>：是否能很好支持服务注册发现场景的“发布 / 订阅”模式，将被调用服务实例的 IP 和 Port 信息同步给调用方。</li></ul><br><ul><li>常见存储系统比较：</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76ptpe0hhd40.webp" width="90%"><br><ul><li>如果你希望在系统出现网络分区的时候，调用方一定不能获取过期的被调用服务实例信息，那么就选择 etcd 和 ZooKeeper</li><li>如果你认为获取过期的实例信息，可能比完全不能获取被调用服务的实例信息要好，那么就选择 Eureka</li></ul><br><h4 id="怎么做服务状态的更新与通知"><a href="#怎么做服务状态的更新与通知" class="headerlink" title="怎么做服务状态的更新与通知"></a>怎么做服务状态的更新与通知</h4><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678249160801.2hyatp7w98w0.webp" width="90%"><br><h3 id="选择-AP-还是-CP"><a href="#选择-AP-还是-CP" class="headerlink" title="选择 AP 还是 CP"></a>选择 AP 还是 CP</h3><ul><li><p>从服务注册发现的场景来说，我认为 Eureka 之类的 AP 系统更符合要求。因为服务发现是整个分布式系统的基石，所以可用性是最关键的设计目标。</p></li><li><p>因为服务发现是整个分布式系统的基石，所以可用性是最关键的设计目标。并且上面介绍的服务，在同步自己的状态到中介存储，以及调用方通过中介存储区获得服务的状态，这两个过程中的数据同步都是最终一致性的。既然服务注册发现系统整体是一个 AP系统，那么将中介存储设计为 CP 系统，去放弃部分的可用性是不值得的。</p></li></ul><blockquote><p>当我们去研究各种各样服务发现的实现方式时，就会发现其实它们都是在解决“如何选择适合的中介存储”和“怎么做服务状态的更新与通知”的问题。当然由于服务发现是非常基础和重要的功能，所以其中的各种实现都是在高性能、高可用性的基础上解决上面的两个问题，做着各自的优化与权衡。</p></blockquote><br><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>在服务发现的场景里面，高可用性是最应该去考虑的设计指标，所以选择 AP系统做中介存储是一个不错的选择。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678249510402.47xld623nes0.webp" width="100%"><br><br><br><h2 id="05｜负载均衡：从状态的角度重新思考负载均衡"><a href="#05｜负载均衡：从状态的角度重新思考负载均衡" class="headerlink" title="05｜负载均衡：从状态的角度重新思考负载均衡"></a>05｜负载均衡：从状态的角度重新思考负载均衡</h2><ul><li>每一个被调用服务都会有多个实例，那么服务的调用方应该将请求，发向被调用服务的哪一个服务实例，这就是负载均衡的业务场景。</li></ul><br><h3 id="负载均衡的关键点"><a href="#负载均衡的关键点" class="headerlink" title="负载均衡的关键点"></a>负载均衡的关键点</h3><p><strong>负载均衡需要达到的目的是“确保能高效、正确地提供服务”，同时从这个目的中，我们还可以分析出负载均衡的两个关键点。</strong></p><ul><li><strong>公平性</strong>：负载均衡需要考虑到各个实例性能差异的情况，让每一个实例都能充分发挥它的能力</li><li><strong>正确性</strong>：对于有状态的服务来说，负载均衡需要关心请求的状态，将请求调度到能处理它的后端实例上，不要出现不能处理和错误处理的情况</li></ul><ul><li><strong>在这些不同的业务场景中，我认为对负载均衡策略的设计，影响最大的因素是后端实例是否存在状态，后端实例有状态，负载均衡就需要关心请求的状态</strong></li></ul><br><h3 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h3><h4 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h4><ul><li>轮询的负载均衡策略非常简单，只需要将请求按顺序分配给多个实例，不用再做其他的处理。</li><li>轮询在路由时，不利用请求的状态信息，属于无状态的负载均衡策略，所以它不能用于有状态实例的负载均衡器</li><li>因为轮询策略只是按顺序分配请求，所以适用于请求的工作负载和实例的处理能力差异都较小的情况。</li></ul><br><h4 id="权重轮询"><a href="#权重轮询" class="headerlink" title="权重轮询"></a>权重轮询</h4><ul><li>将每一个后端实例分配一个权重，分配请求的数量和实例的权重成正比轮询。</li><li>权重轮询在路由时，不利用请求的状态信息，属于无状态的负载均衡策略，所以它也不能用于有状态实例的负载均衡器</li><li>因为权重策略会按实例的权重比例来分配请求数，所以，我们可以利用它解决实例的处理能力差异的问题，认为它的公平性比轮询策略要好。</li></ul><br><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><ul><li>将请求的状态信息，按一定的 Hash 算法固定分配到一个实例上</li><li>Hash 负载均衡策略，在机器实例数量发生变化的时候，几乎所有请求的分配实例都会发送变化。如果后端实例依赖 Hash 负载均衡策略来保证正确性，那么当实例数发生变化的时候，正确性将会出现问题。</li><li>在不考虑 Hash 算法均匀性的情况下，Hash 策略会按 Hash 值按模等分，它和轮询策略类似，不能解决请求的工作负载和实例的处理能力差异的问题</li></ul><br><h4 id="一致性-Hash"><a href="#一致性-Hash" class="headerlink" title="一致性 Hash"></a>一致性 Hash</h4><ul><li>Hash 的负载均衡策略中，最大的一个问题是基于机器数量求模，如果机器数量发生变化，请求和实例的分配关系机会将全部变化，这会影响它的正确性，而一致性 Hash 就可以用来解决这个问题</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/f7d536c1c1b7499c1456ffab7ea73ec.52ydeerahjs0.webp" width="100%"><br><ul><li><p>一致性 Hash 和 Hash 策略最大的区别在于，一致性 Hash 是对固定值 求模，不会随着机器数量的变化而变化，所以对于同一个 Request ID ， iRequest 是始终稳定不变的，这样就解决了 Hash 的策略在实例数量发送变化后，几乎所有的分配关系都会发生变化的问题。</p></li><li><p>一致性 Hash 策略公平性的问题：一致性 Hash 是通过增加虚拟节点的方法来解决。在 Hash 环中路由到虚拟实例的请求，会被路由到它的真实实例上</p></li><li><p>对于实例数过少导致的公平性问题：一致性 Hash 策略让每一个实例都生成多个虚拟实例，使分配更加均衡</p></li><li><p>对于实例之间性能差异的问题：一致性 Hash 策略通过让实例生成虚拟实例的数量，与该实例的权重成正比的策略来解决</p></li></ul><br><h3 id="无状态的负载均衡"><a href="#无状态的负载均衡" class="headerlink" title="无状态的负载均衡"></a>无状态的负载均衡</h3><ul><li>无状态的负载均衡指的是参与负载均衡的后端实例是无状态的，所有的后端实例都是对等的，一个请求不论发向哪一个实例，都会得到相同的并且正确的处理结果，<strong>以无状态的负载均衡策略不需要关心请求的状态。</strong></li><li>无状态的负载均衡策略有：<ul><li>轮询</li><li>权重轮询</li><li>FAIR </li><li>随机</li><li>权重随机</li><li>最少链接数</li><li>……</li></ul></li></ul><br><h3 id="半状态的负载均衡"><a href="#半状态的负载均衡" class="headerlink" title="半状态的负载均衡"></a>半状态的负载均衡</h3><ul><li>虽然负载均衡策略利用请求的状态信息进行路由，但是仅仅进行简单的规则处理，比如 Hash 运算加求模来路由请求，它不保证路由的正确性，这个正确性由后端实例来保证。</li></ul><blockquote><p>一些实例会在内存中缓存一些状态数据，用于提升系统的性能，如果一个请求被路由到错误的实例中，该实例可以立即通过中心存储，读取出所需要的数据，然后在内存中重建并缓存正确的处理请求，不会导致请求出现错误。</p></blockquote><ul><li><strong>半状态的负载均衡将请求按一定的策略进行路由，后端实例可以利用路由规则来进行优化。</strong></li></ul><br><h3 id="全状态的负载均衡"><a href="#全状态的负载均衡" class="headerlink" title="全状态的负载均衡"></a>全状态的负载均衡</h3><ul><li><p>负载均衡策略不仅利用请求的状态信息进行路由，并且在后端实例有状态的情况下，依然会保证路由的正确性。</p></li><li><p>全状态的负载均衡一般以路由服务的形式存在，在路由服务里面，都会存储后端实例 ID 和状态信息的索引，在进行请求路由的时候，路由服务从请求的状态信息中获得索引的标识，通过查询索引获得后端实例的 ID，然后再进行路由。</p></li><li><p>全状态的负载均衡和数据分片是同一件事情</p></li></ul><br><br><br><h2 id="06｜配置中心：如何确保配置的强一致性呢？"><a href="#06｜配置中心：如何确保配置的强一致性呢？" class="headerlink" title="06｜配置中心：如何确保配置的强一致性呢？"></a>06｜配置中心：如何确保配置的强一致性呢？</h2><br><br><br><h2 id="07｜分布式锁：所有的分布式锁都是错误的？"><a href="#07｜分布式锁：所有的分布式锁都是错误的？" class="headerlink" title="07｜分布式锁：所有的分布式锁都是错误的？"></a>07｜分布式锁：所有的分布式锁都是错误的？</h2><ul><li>多个实例在同一时刻只能有一个实例运行，它就是一个典型的分布式锁的场景</li></ul><br><h3 id="为什么需要分布式锁"><a href="#为什么需要分布式锁" class="headerlink" title="为什么需要分布式锁"></a>为什么需要分布式锁</h3><ul><li>锁的定义：锁是操作系统的基本原语，它是用于并发控制的，能够确保在多 CPU 、多个线程的环境中，某一个时间点上，只能有一个线程进入临界区代码，从而保证临界区中操作数据的一致性。</li><li>分布式锁：锁控制的对象从一个进程内部的多个线程，变成了分布式场景下的多个进程，同时，临界区的资源也从进程内多个线程共享的资源，变成了分布式系统内部共享的中心存储上的资源。锁的定义在本质上没有任何的改变，只有持有锁的线程或进程才能执行临界区的代码。</li></ul><br><h3 id="怎么实现分布式锁"><a href="#怎么实现分布式锁" class="headerlink" title="怎么实现分布式锁"></a>怎么实现分布式锁</h3><ul><li>锁的三个不同的层次：<ul><li>进程内部的锁</li><li>同一台机器上的多进程之间的锁（直接通过操作系统的锁来实现）</li><li>跨进程、跨机器之间的分布式锁（通过一个状态来表示加锁和解锁，只不过要让所有需要锁的服务，都能访问到状态存放的位置）（将锁的状态信息存放在一个存储服务，即锁服务中，其他的服务再通过网络去访问锁服务来修改状态信息，最后进行加锁和解锁。）</li></ul></li><li>实现完备的分布式锁需要满足的特性：<ul><li><strong>互斥</strong>：保证不同节点、不同线程的互斥访问</li><li><strong>超时机制</strong>：超时设置，防止死锁，分布式锁才有这个特性<ul><li>锁服务和请求锁的服务分散在不同的机器上面，它们之间是通过网络来通信的，所以我们需要用超时机制，来避免获得锁的节点故障或者网络异常，导致它持有的锁不能归还，出现死锁的情况。</li><li>持有锁的节点需要处理的临界区代码非常耗时：可以通过另一个线程或者协程不断延长超时时间，避免出现锁操作还没有处理完，锁就被释放，之后其他的节点再获得锁，导致锁的互斥失败这种情况</li><li>我们可以在每一次成功获得锁的时候，为锁设置一个超时时间，获得锁的节点与锁服务保持心跳，锁服务每一次收到心跳，就延长锁的超时时间</li></ul></li><li><strong>完备的锁接口</strong>：阻塞接口 Lock 和非阻塞接口 tryLock。<ul><li>阻塞 Lock 接口获取锁：如果当前锁已经被其他节点获得了，锁服务将获取锁的请求挂起，直到获得锁为止，才响应获取锁的请求</li><li>通过 tryLock 接口获取锁：如果当前锁已经被其他节点获得了，锁服务直接返回失败，不会挂起当前锁的请求。</li></ul></li><li><strong>可重入性</strong>：一个节点的一个线程已经获取了锁，那么该节点持有锁的这个线程可以再次成功获取锁<ul><li>只需在锁服务处理加锁请求的时候，记录好当前获取锁的节点 + 线程组合的唯一标识，然后在后续的加锁请求时，如果当前请求的节点 + 线程的唯一标识和当前持有锁的相同，那么就直接返回加锁成功，如果不相同，则按正常加锁流程处理。</li></ul></li><li><strong>公平性</strong>：<ul><li>对于被阻塞的加锁请求，我们只要先记录好它们的顺序，在锁被释放后，按顺序颁发就可以了。</li></ul></li></ul></li></ul><br><h3 id="分布式锁的挑战"><a href="#分布式锁的挑战" class="headerlink" title="分布式锁的挑战"></a>分布式锁的挑战</h3><ul><li>在分布式系统中，由于部分失败和异步网络的问题，分布式锁会面临正确性、高可用和高性能这三点的权衡问题的挑战。</li></ul><br><h4 id="分布式锁的正确性"><a href="#分布式锁的正确性" class="headerlink" title="分布式锁的正确性"></a>分布式锁的正确性</h4><ul><li>不论出现怎样的异常情况，都能保证分布式锁互斥语义的正确性呢</li><li>因为整体失败和同步通信这两点，我们可以保证进程内的锁有绝对的正确性。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678682715887.j97b8p68aco.webp" width="70%"><br><ul><li>对于在共享存储中写入数据等等，完全不能容忍分布式锁互斥语义失败的情况，不应该借助分布式锁从外部来实现，而是应该在共享存储内部来解决。比如，在数据库的实现中，隔离性就是专门来解决这个问题的。<strong>分布式锁的设计，应该多关注高可用与性能，以及怎么提高正确性，而不是追求绝对的正确性。</strong></li></ul><br><h3 id="分布式锁的权衡"><a href="#分布式锁的权衡" class="headerlink" title="分布式锁的权衡"></a>分布式锁的权衡</h3><ul><li>在分布式锁的场景下，没有办法保证100% 的正确性</li><li>我们要避免通过外部分布式锁，来保证需要 100% 正确性的场景。将分布式锁定位为，可以容忍非常小概率互斥语义失效场景下的锁服务</li><li>一般来说，一个分布式锁服务，它的正确性要求越高，性能可能就会越低。</li><li>分布式锁是一个非常底层的服务组件，是整个分布式系统的基石之一</li><li>一般来说，我们可以在成本可接受的范围内，提供性能最好的分布式锁服务</li><li>可用性是设计分布式锁服务非常关键的一个目标</li></ul><br><br><br><h2 id="08｜重试幂等：让程序-Exactly-once-很难吗？"><a href="#08｜重试幂等：让程序-Exactly-once-很难吗？" class="headerlink" title="08｜重试幂等：让程序 Exactly-once 很难吗？"></a>08｜重试幂等：让程序 Exactly-once 很难吗？</h2><ul><li>在请求的响应结果为“请求超时”的时候，我们不知道这个请求是否已经被远端的服务执行了。进一步来说就是请求的消息，是否精确一次发送到远端服务的问题，即 Exactly-once。</li></ul><br><h3 id="为什么不能保证-Exactly-once"><a href="#为什么不能保证-Exactly-once" class="headerlink" title="为什么不能保证 Exactly-once"></a>为什么不能保证 Exactly-once</h3><ul><li><p>在单机系统中，模块之间的通信都是进程内的本地函数调用，在这个整体失败和同步通信的模型中，要么进程整体崩溃，要么调用完成，不会存在其他的情况</p></li><li><p>在分布式系统中，程序不能保证 Exactly-once 的原因主要有以下两个：</p></li></ul><br><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><ul><li>在分布式系统中，服务和服务之间都是通过网络来进行通信的，而这个网络是一个异步网络。</li><li>通过超时机制来快速获得一个结果，将无界时延的异步网络模型，通过超时机制转化成了有界时延</li></ul><br><h4 id="远端服务发生了故障"><a href="#远端服务发生了故障" class="headerlink" title="远端服务发生了故障"></a>远端服务发生了故障</h4><ul><li>当请求方收到“请求超时”的时候，我们无法判断远端服务是否处理过这个请求</li></ul><br><h3 id="如何保证-Exactly-once"><a href="#如何保证-Exactly-once" class="headerlink" title="如何保证 Exactly-once"></a>如何保证 Exactly-once</h3><ul><li>现消息的 Exactly-once 传递，主要有三种方式：</li></ul><h4 id="至少一次消息传递加消息幂等性"><a href="#至少一次消息传递加消息幂等性" class="headerlink" title="至少一次消息传递加消息幂等性"></a>至少一次消息传递加消息幂等性</h4><ul><li>请求重试+接口幂等</li></ul><h4 id="分布式快照加状态回滚"><a href="#分布式快照加状态回滚" class="headerlink" title="分布式快照加状态回滚"></a>分布式快照加状态回滚</h4><ul><li><p>分布式快照加状态回滚：在整个分布式系统运行的过程中，定期对整个系统的状态做快照，在系统运行时，不论系统的哪个地方出现故障，就将整个系统回滚到上一个快照状态，然后再重放上一个快照状态之后的情况，直到所有的消息都被正常处理</p></li><li><p>分布式快照加状态回滚的方式并不适合在线业务的情况：</p><ul><li>要对在线业务的所有状态做快照是非常难的一件事情，因为在线业务的状态一般都是在数据库中，如果要对整个系统的数据库都定期做快照，这将消耗非常大的资源。</li><li>在通过快照进行状态回滚的时候，整个系统不能处理当前的业务请求，当前的业务请求需要进行排队等待，等系统通过快照将状态回滚完，并且重放了上一个快照状态之后的所有请求，才能开始正常处理当前业务。这个过程可能很长，这对于在线业务系统是不能接受的。</li></ul></li><li><p>分布式快照加状态回滚的方式，一般不会应用于在线业务架构中，它的主要应用场景是例如 Flink 之类的流式计算。在流式计算中，系统状态的存储也是系统设计的一部分，我们可以在系统设计的时候，就考虑支持快照和回滚功能。并且，在流式计算中，消息来源一般都是 Kafka 之类的消息系统，这样对消息进行重放就非常方便了。</p></li></ul><h4 id="整体重做"><a href="#整体重做" class="headerlink" title="整体重做"></a>整体重做</h4><ul><li>在执行任务的过程中，如果系统出现故障，就将整个任务的状态删除，然后再进行重做。整体重做的方案，一般的使用场景为批处理任务的情况，比如 MapReduce 之类的批处理计算引擎。</li></ul><br><h3 id="Exactly-once-的挑战"><a href="#Exactly-once-的挑战" class="headerlink" title="Exactly-once 的挑战"></a>Exactly-once 的挑战</h3><ul><li>分布式在线业务架构系统中，对于解决 Exactly-once 问题，常用的“最少一次消息传递加消息幂等性机制”面临的挑战</li></ul><h4 id="重试面临的挑战"><a href="#重试面临的挑战" class="headerlink" title="重试面临的挑战"></a>重试面临的挑战</h4><ul><li>在执行重试策略的过程中，我们要避免重试导致的系统雪崩的问题。</li><li>在系统快要接近性能瓶颈的时候，某些节点可能会因为负载过高而响应超时，如果这个时候再无限制地重试，就会进一步放大系统的请求量，将一个局部节点的性能问题，放大到整个系统，造成雪崩效应。</li><li>重试策略都会有两个限制<ul><li>限制重试的次数</li><li>控制重试的间隔，一般采取指数退避的策略</li></ul></li></ul><h4 id="幂等面临的挑战"><a href="#幂等面临的挑战" class="headerlink" title="幂等面临的挑战"></a>幂等面临的挑战</h4><ul><li>首先，我们要讨论能否通过对操作进行改写，将一个非幂等操作变成一个幂等操作</li><li>然后，我们再讨论如何将一个非幂等操作变成一个幂等操作</li><li>最后，我们讨论在有外部系统的情况下，如何保证请求的幂等性。</li></ul><br><h3 id="操作的幂等性讨论"><a href="#操作的幂等性讨论" class="headerlink" title="操作的幂等性讨论"></a>操作的幂等性讨论</h3><h4 id="如何确保操作的幂等性"><a href="#如何确保操作的幂等性" class="headerlink" title="如何确保操作的幂等性"></a>如何确保操作的幂等性</h4><ul><li>请求中增加唯一 ID ，然后在处理请求时，通过ID 进行去重，确保对相同 ID 的请求只处理一次。将请求处理结果写入数据库的操作，以及标记请求已处理的操作，它们都必须在同一个事务中。让事务来保证这两个操作的原子性</li></ul><br><h4 id="外部系统的幂等性保障"><a href="#外部系统的幂等性保障" class="headerlink" title="外部系统的幂等性保障"></a>外部系统的幂等性保障</h4><ul><li>如果我们请求的操作会影响到外部系统的状态，要保证请求的幂等性是需要依赖外部系统的支持才能实现的。</li></ul><br><br><br><h2 id="09-雪崩（一）：熔断，让故障自适应地恢复"><a href="#09-雪崩（一）：熔断，让故障自适应地恢复" class="headerlink" title="09 | 雪崩（一）：熔断，让故障自适应地恢复"></a>09 | 雪崩（一）：熔断，让故障自适应地恢复</h2><ul><li>分布式系统中的雪崩场景：在一个分布式系统中，局部故障是不可避免的，但是如果不能将局部故障控制好，导致其演变成一个全局的系统故障，这对我们来说是不可以接受的</li></ul><h3 id="为什么会出现雪崩"><a href="#为什么会出现雪崩" class="headerlink" title="为什么会出现雪崩"></a>为什么会出现雪崩</h3><ul><li>雪崩是由于局部故障被正反馈循环，从而导致的不断放大的连锁故障。</li><li>雪崩通常是由于整个系统中，一个很小的部分出现故障，进而导致系统其他部分也出现故障而引发的。</li></ul><ul><li>实际工作中，出现雪崩一般会经历以下三个阶段<ul><li><strong>服务的处理能力开始出现过载</strong><ul><li>服务过载是指服务器只能处理一定 QPS 的请求，当发往该服务器的 QPS 超出后，由于资源不够等原因，会出现超时、内存增加等各种异常情况，使服务的请求处理能力进一步降低，过载情况更加严重。</li><li>服务处理能力出现过载有多种原因，比如服务可能由于 Bug 导致性能下降，或者由于崩溃导致过载，也有可能就是突发的流量超过了服务的设计目标，或者是机器宕机导致可提供服务的实例数量减少等原因。</li></ul></li><li><strong>服务由于资源耗尽而不可用</strong><ul><li>当服务严重过载后，会出现大量请求的积压，这会导致服务消耗更多的内存、 CPU 、线程和文件描述符等资源，待这些资源被消耗尽后，服务将出现严重超时和崩溃等异常情况，最终对外表现为不可用。当服务的某一个实例崩溃后，负载均衡器会将请求发送给其他的实例，导致其他的实例也出现过载的情况，从而造成整个服务过载的故障。</li></ul></li><li>由于服务内部出现严重的过载，导致响应严重超时，服务的调用方同样会出现大量请求的积压使资源耗尽，<strong>这样正反馈循环就形成了，故障沿着调用链路逆向传播，导致整个系统出现雪崩。</strong></li></ul></li></ul><blockquote><p><strong>雪崩的根本原因是系统过载</strong>，如果在系统过载的情况下，不进行任何控制，异常情况就会急剧扩散，导致雪崩情况出现。所以，<strong>想要避免系统雪崩，要么通过快速减少系统负载，即熔断、降级、限流等快速失败和降级机制；要么通过快速增加系统的服务能力来避免雪崩的发生，即弹性扩容机制。</strong></p></blockquote><h3 id="利用熔断机制避免雪崩"><a href="#利用熔断机制避免雪崩" class="headerlink" title="利用熔断机制避免雪崩"></a>利用熔断机制避免雪崩</h3><ul><li><strong>我们将服务由于过载原因导致的错误比例，作为熔断器断开的阈值</strong>，当被调用服务出现过载的时候，熔断器通过错误比例感知到被调用服务过载后，就立即将调用请求返回错误，这样可以减少被调用服务的请求数量，也可以减少调用服务由于等待请求响应而积压的请求，完美切断了正反馈循环，确保了雪崩不会发生</li><li>在熔断机制的模式下，服务调用方需要为每一个调用对象，可以是服务、实例和接口，维护一个状态机，在这个状态机中有三种状态。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678937667039.6w0mtmfg60k0.webp" width="70%"><br><ul><li>闭合状态 ( Closed )。<ul><li>在这种状态下，我们需要一个计数器来记录调用失败的次数和总的请求次数，如果在一个时间窗口内，请求的特定错误码的比例达到预设的阈值，就切换到断开状态。</li></ul></li><li>断开状态 ( Open )<ul><li>在该状态下，发起请求时会立即返回错误，也可以返回一个降级的结果，我们会在后面的课程“降级”中再详细讨论。在断开状态下，会启动一个超时计时器，当计时器超时后，状态切换到半打开状态。</li></ul></li><li>半打开状态 ( Half-Open )<ul><li>在该状态下，允许应用程序将一定数量的请求发往被调用服务，如果这些调用正常，那么就可以认为被调用服务已经恢复正常，此时熔断器切换到闭合状态，同时需要重置计数。如果这部分仍有调用失败的情况，我们就认为被调用方仍然没有恢复，熔断器会切换到断开状态，然后重置计数器。所以半打开状态能够有效防止正在恢复中的服务，被突然出现的大量请求再次打垮的情况</li></ul></li></ul><h3 id="熔断机制的关键点"><a href="#熔断机制的关键点" class="headerlink" title="熔断机制的关键点"></a>熔断机制的关键点</h3><ul><li>在熔断机制的具体实现上，还会面临熔断的粒度选择和过载判断等关键的问题</li></ul><h4 id="粒度控制"><a href="#粒度控制" class="headerlink" title="粒度控制"></a>粒度控制</h4><ul><li>我们想将监控资源过载的粒度控制在一个什么样的范围内，这个范围可以由服务、实例和接口这三个维度的组合来得到</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1678938531312.4dccsgxheqs0.webp" width="70%"><br><ul><li>更建议你选择“实例的接口”这个熔断粒<ul><li>熔断的敏感度高</li><li>熔断的误伤范围小</li><li>设计优良的熔断机制所消耗的资源是非常少的，“实例的接口”粒度的熔断机制所消耗的资源，完全在系统可以承受的范围之内</li></ul></li></ul><h4 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h4><ul><li>系统被动对外表现出来的过载错误</li><li>系统主动对外表现出来的过载错误</li></ul><h4 id="过载与存活的区别"><a href="#过载与存活的区别" class="headerlink" title="过载与存活的区别"></a>过载与存活的区别</h4><ul><li>过载更关心服务当前的状态好不好，而存活只关心服务是否能活着，这是一个更低的要求</li><li>在熔断场景中，我们对服务的过载判断进行了简化，直接通过服务接口请求的结果来进行判断。我们执行这个接口的逻辑，如果请求发生错误，并且错误为超时或者限流等错误的比例超过一定的阈值时，我们可以认为该接口是过载的，然后进行熔断。</li></ul><h4 id="熔断与重试的关系"><a href="#熔断与重试的关系" class="headerlink" title="熔断与重试的关系"></a>熔断与重试的关系</h4><ul><li><p>重试是指在一个请求失败后，如果我们认为这次请求失败是因为系统的临时错误导致的，那么为了提高系统的可用性，我们会重新发起请求。</p></li><li><p>而熔断则认为当前系统的这一个接口已经出现过载的情况，为了确保系统不会出现雪崩，而对当前接口的请求进行快速失败，直接返回失败，而不是真正地发起请求，以此来减少系统当前的过载情况。</p></li><li><p><strong>我们可以认为熔断和重试是两个层面的操作，它们之间是相互独立的，不需要相互干扰。</strong></p></li></ul><blockquote><p>我们在需要重试的业务场景中进行重试操作，来提高系统的可用性，而熔断一般会内置到系统的框架中，并且默认开启，作为系统稳定性的最后一道保险丝，来确保系统不会因为过载而雪崩。至于因为熔断被迫进行快速失败的这个请求，它是首次的还是重试的请求，我们并不关心。</p></blockquote><h4 id="熔断机制的适应范围"><a href="#熔断机制的适应范围" class="headerlink" title="熔断机制的适应范围"></a>熔断机制的适应范围</h4><ul><li><strong>只要是过载问题的场景，我们都可以考虑利用熔断机制来解决，不论是分布式系统中服务之间的调用，还是服务与数据库之间等其他场景的调用。</strong></li></ul><ul><li><strong>熔断机制的五个关键点总结</strong></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.mpygagpuev4.webp" width="90%"><br><h2 id="10-雪崩（二）：限流，抛弃超过设计容量的请求"><a href="#10-雪崩（二）：限流，抛弃超过设计容量的请求" class="headerlink" title="10 | 雪崩（二）：限流，抛弃超过设计容量的请求"></a>10 | 雪崩（二）：限流，抛弃超过设计容量的请求</h2><h3 id="为什么需要限流"><a href="#为什么需要限流" class="headerlink" title="为什么需要限流"></a>为什么需要限流</h3><ul><li>熔断的处理方式不够优雅<ul><li>熔断机制是被动感知故障，等系统出现故障后，才会介入处理。这样的处理方式会让系统产生不必要的抖动</li></ul></li><li>熔断机制是最后底线<ul><li>在其他方法用尽之后，如果过载问题依旧存在，这时熔断才会被动触发</li></ul></li><li>在快速失败的时候，需要能考虑调用方的重要程度<ul><li>熔断是调用方依据响应结果自适应来触发的，在被调用方出现过载的时候，所有的调用方都将受到影响</li></ul></li><li>在多租户的情况下，不能让一个租户的问题影响到其他的租户<ul><li>我们需要对每一个租户分配一定的配额，谁超过了就对谁进行限流，保证租户之间的隔离性。</li></ul></li></ul><h3 id="如何实现限流"><a href="#如何实现限流" class="headerlink" title="如何实现限流"></a>如何实现限流</h3><ul><li>限流机制是熔断等其他机制无法替代的，是必须的</li></ul><h4 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h4><ul><li>限流算法是限流机制的基础和核心，并且后续关于限流机制的讨论，都会涉及相关的限流算法</li></ul><h5 id="固定窗口和滑动窗口"><a href="#固定窗口和滑动窗口" class="headerlink" title="固定窗口和滑动窗口"></a>固定窗口和滑动窗口</h5><ul><li><p>固定窗口就是定义一个“固定”的统计周期，比如 10 秒、30 秒或者 1 分钟，然后在每个周期里，统计当前周期中被接收到的请求数量，经过计数器累加后，如果超过设定的阈值就触发限流，直到进入下一个周期后，计数器清零，流量接收再恢复正常状态</p></li><li><p>滑动窗口就是固定窗口的优化，它对固定窗口做了进一步切分，将统计周期的粒度切分得更细，比如 1 分钟的固定窗口，切分为 60 个 1 秒的滑动窗口，然后统计的时间范围随着时间的推移同步后移</p></li><li><p>滑动窗口和固定窗口一样面临抗抖动性差的问题，“漏桶”算法可以进一步改进它们的问题。</p></li></ul><h5 id="漏桶和令牌桶"><a href="#漏桶和令牌桶" class="headerlink" title="漏桶和令牌桶"></a>漏桶和令牌桶</h5><ul><li>令牌桶算法的核心是固定“进口”速率，限流器在一个一定容量的桶内，按照一定的速率放入 Token ，然后在处理程序去处理请求的时候，需要拿到 Token才能处理；如果拿不到，就进行限流。</li><li>令牌桶”算法相对于“漏桶”，虽然提高了系统的资源利用率，但是却放弃了一定的流量整形能力，也就是当请求流量突增的时候，上游流量的抖动可能会扩散到下游服务。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1679303230287.zyf9xqp796o.webp" width="80%"><br><h4 id="单节点限流"><a href="#单节点限流" class="headerlink" title="单节点限流"></a>单节点限流</h4><ul><li>限流机制作用的位置是客户端还是服务端，即选择客户端限流还是服务端限流</li><li>如果触发限流后，我们应该直接抛弃请求还是阻塞等待，即否决式限流和阻塞式限流</li></ul><h4 id="分布式限流"><a href="#分布式限流" class="headerlink" title="分布式限流"></a>分布式限流</h4><ul><li>进行集中式限流</li><li>将分布式限流进行本地化处理</li></ul><h4 id="限流机制的关键问题"><a href="#限流机制的关键问题" class="headerlink" title="限流机制的关键问题"></a>限流机制的关键问题</h4><ul><li>如何确定限流的阈值</li><li>限流可能会引入脆弱性</li></ul><ul><li><strong>在核心链路和核心服务上，默认启用限流机制，在其他位置上，手动启用限流机制，把它作为处理系统故障的一个手段</strong></li></ul><h2 id="11｜雪崩（三）：降级，无奈的丢车保帅之举"><a href="#11｜雪崩（三）：降级，无奈的丢车保帅之举" class="headerlink" title="11｜雪崩（三）：降级，无奈的丢车保帅之举"></a>11｜雪崩（三）：降级，无奈的丢车保帅之举</h2><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;开篇词-1讲&quot;&gt;&lt;a href=&quot;#开篇词-1讲&quot; class=&quot;headerlink&quot; title=&quot;开篇词 (1讲)&quot;&gt;&lt;/a&gt;开篇词 (1讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词｜掌握好学习路径，分布式系统原来如此简单&quot;&gt;&lt;a href=&quot;#开篇词｜掌握好学习路</summary>
      
    
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Categories/distributed/"/>
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Tags/distributed/"/>
    
  </entry>
  
  <entry>
    <title>《Java分布式系统解决方案 掌握企业级分布式项目方案》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8E%8C%E6%8F%A1%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE%E6%96%B9%E6%A1%88%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%8E%8C%E6%8F%A1%E4%BC%81%E4%B8%9A%E7%BA%A7%E5%88%86%E5%B8%83%E5%BC%8F%E9%A1%B9%E7%9B%AE%E6%96%B9%E6%A1%88%E3%80%8Bstudy-notes/</id>
    <published>2023-02-23T14:16:11.000Z</published>
    <updated>2023-02-23T14:16:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="玩转N种企业级解决方案，笑傲分布式开发"><a href="#玩转N种企业级解决方案，笑傲分布式开发" class="headerlink" title="玩转N种企业级解决方案，笑傲分布式开发"></a>玩转N种企业级解决方案，笑傲分布式开发</h1><ul><li>分布式场景下解决方案和技术选型</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/5c4bb4f9e8f8cd64ebc31749fbe2f03.7glrt6915tc0.webp" width="90%"><br><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.skrnvv5d32o.webp" width="90%"><br><ul><li>SpringCloud和分布式解决方案<ul><li>SpringCloud是分布式架构，一定需要分布式解决方案</li></ul></li></ul><ul><li><strong>目标</strong>：掌握常见分布式场景中的解决方案</li></ul><br><br><br><h1 id="分布式ID"><a href="#分布式ID" class="headerlink" title="分布式ID"></a>分布式ID</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;玩转N种企业级解决方案，笑傲分布式开发&quot;&gt;&lt;a href=&quot;#玩转N种企业级解决方案，笑傲分布式开发&quot; class=&quot;headerlink&quot; title=&quot;玩转N种企业级解决方案，笑傲分布式开发&quot;&gt;&lt;/a&gt;玩转N种企业级解决方案，笑傲分布式开发&lt;/h1&gt;&lt;ul&gt;
</summary>
      
    
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Categories/distributed/"/>
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Tags/distributed/"/>
    
  </entry>
  
  <entry>
    <title>《Java分布式架构设计与开发实战》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2023-02-22T04:06:25.000Z</published>
    <updated>2023-02-22T04:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课程导学与学习指南"><a href="#课程导学与学习指南" class="headerlink" title="课程导学与学习指南"></a>课程导学与学习指南</h1><ul><li>课程内容设计（结合实际应用场景）</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.73j7o3a193k0.webp" width="70%"><br><ul><li>内容兼具深度、广度</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.oxikmcilqsw.webp" width="70%"><br><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.41p3fu3lo7i0.webp" width="70%"><br><br><br><h1 id="硅步千里，分布式理论加强内功修炼"><a href="#硅步千里，分布式理论加强内功修炼" class="headerlink" title="硅步千里，分布式理论加强内功修炼"></a>硅步千里，分布式理论加强内功修炼</h1><h2 id="本章节目标"><a href="#本章节目标" class="headerlink" title="本章节目标"></a>本章节目标</h2><ul><li>了解大型互联网系统演进</li><li>掌握架构设计思想</li><li>掌握CAP理论</li><li>掌握BASE理论</li></ul><br><ul><li>中国互联网发展历程<ul><li>1994 - 2000年:从四大门户到搜索</li><li>2001-2009年:从搜索到社交化网络</li><li>2010- 至今:移动互联网和自媒体</li></ul></li></ul><br><h2 id="单体应用架构到分布式架构的演进"><a href="#单体应用架构到分布式架构的演进" class="headerlink" title="单体应用架构到分布式架构的演进"></a>单体应用架构到分布式架构的演进</h2><ul><li>单体应用架构<ul><li>Linux+Apache+MySQL+PHP</li><li>网站刚起步的时候，流量少。用一台服务器就可以满足</li></ul></li><li>应用服务与数据服务分离<ul><li>访问增加，带来更大压力</li><li>增加配置解决临时问题</li><li>从横向进行扩展，一分为多</li></ul></li><li>不同服务器配置要求不同</li></ul><table><thead><tr><th align="center">服务器类型</th><th align="center">不同配置要求</th></tr></thead><tbody><tr><td align="center">应用服务器</td><td align="center">CPU配置高</td></tr><tr><td align="center">数据库服务器</td><td align="center">磁盘IO快和稳，内存足够大</td></tr><tr><td align="center">文件服务器</td><td align="center">磁盘足够大</td></tr></tbody></table><ul><li><p>开始引入缓存</p><ul><li>大量交易访问数据库压力增大，响应延迟</li><li>给数据库减负，把请求在前面就处理完</li><li>在数据库前面加入缓存</li></ul></li><li><p>应用服务器集群部署</p><ul><li>所有的请求直接打到负载均衡组件</li><li>单台服务器 &gt;多台服务器</li><li>软件: Apache / Nginx / HaProxy / LVS</li><li>硬件:F5</li></ul></li><li><p>数据库的读写分离</p><ul><li>并非所有请求都操作缓存，且存在缓存失效场景，对数据库访问造成压力</li><li>利用数据库主从复制机制，将读和写操作分开，进一步提升性能</li></ul></li><li><p>数据库访问模块</p><ul><li>对接多个数据源、处理读写分离、甚至分库分表等</li><li>独立于应用程序存在的</li><li>Apache ShardingSphere</li></ul></li><li><p>内容分发网络 - CDN</p></li><li><p>CDN服务进行资源加速</p><ul><li>把静态资源提前缓存到各地的边缘服务器</li><li>可以有效地降低DDoS攻击</li></ul></li><li><p>全面分布式化</p><ul><li>随着规模不断发展产生数据越来越多，单文件件服务器、单数据库服务器也渐渐地达到瓶颈。利用集群化横向扩展解决问题</li><li>HDFS、TFS、FastDFS</li><li>NoSQL &amp; 搜索引擎<ul><li>Lucene是一个搜索引擎的开发工具包:全文检索</li><li>Solr和Elasticsearch它们是基于Lucene开发的</li><li>常见的NoSQL有Mongodb和ELasticsearch</li></ul></li></ul></li><li><p><strong>单体应用面临诸多问题和挑战</strong></p><ul><li>单体应用的代码膨胀，研发成本变高，难实现敏捷交付</li><li>代码维护成本变高，开发人员交接困难</li><li>测试成本变高，回归的工作量变大，给测试带来巨大工作量</li><li>可扩展性差，技术升级时需考虑整体，无法单独调整</li></ul></li><li><p>“大而全的单体”拆分为多个“独立的应用”</p></li><li><p>应用拆分和解耦</p><ul><li>对应用模块进行拆分之后，通过消息中间件进行交互</li><li>此外还有异步处理应用解耦、流量削峰等作用</li></ul></li><li><p>常见的消息中间件</p></li></ul><table><thead><tr><th align="center">消息中间件特性</th><th></th></tr></thead><tbody><tr><td align="center">ActiveMQ</td><td>历史悠久，使用Java语言编写的，功能全面，基本上MQ的功能它都有，因此也比较复杂。</td></tr><tr><td align="center">RabbitMQ</td><td>目前主流之一，跟Spring框架师出同门，因此Spring对RabbitMQ的支持最好</td></tr><tr><td align="center">Kafka</td><td>高性能方面比较有优势。但一开始是基于大吞吐量数据场景设计，在消息可靠性方面比较弱</td></tr><tr><td align="center">RocketMQ</td><td>它相对前面几个，有后发优势，结合了各方优点综合能力比较好。</td></tr></tbody></table><ul><li>模块拆分引发的问题<ul><li>代码冗余，多处相同的代码维护起来困难</li><li>复杂度扩散</li><li>共用一套数据库资源</li></ul></li></ul><br><h2 id="引入服务化架构"><a href="#引入服务化架构" class="headerlink" title="引入服务化架构"></a>引入服务化架构</h2><h3 id="SOA与微服务对比"><a href="#SOA与微服务对比" class="headerlink" title="SOA与微服务对比"></a>SOA与微服务对比</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.2zz2vosvmw60.webp" width="70%"><br><table><thead><tr><th align="center"></th><th>SOA</th><th>微服务</th></tr></thead><tbody><tr><td align="center">共同点</td><td>都是在分布式环境下，以服务为中心的松耦合应用架构模式服务之间是通过定义明确的接口和协议来进行相互通信</td><td>都是在分布式环境下，以服务为中心的松耦合应用架构模式服务之间是通过定义明确的接口和协议来进行相互通信</td></tr><tr><td align="center">目标</td><td>解决的是异构系统的服务化</td><td>解决互联网系统快速交付</td></tr><tr><td align="center">规模</td><td>相对粗粒度</td><td>细粒度</td></tr><tr><td align="center">适用性</td><td>跨企业、大企业跨部门的复杂应用系统建设</td><td>适合小型团队的持续化发布</td></tr></tbody></table><h1 id="为快不破，分布式缓存提升系统性能"><a href="#为快不破，分布式缓存提升系统性能" class="headerlink" title="为快不破，分布式缓存提升系统性能"></a>为快不破，分布式缓存提升系统性能</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课程导学与学习指南&quot;&gt;&lt;a href=&quot;#课程导学与学习指南&quot; class=&quot;headerlink&quot; title=&quot;课程导学与学习指南&quot;&gt;&lt;/a&gt;课程导学与学习指南&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;课程内容设计（结合实际应用场景）&lt;/li&gt;
&lt;/ul&gt;
&lt;img src</summary>
      
    
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Categories/distributed/"/>
    
    
    <category term="distributed" scheme="https://ratears.github.io/dev.ratears.life/Tags/distributed/"/>
    
  </entry>
  
  <entry>
    <title>Redis study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/Redis-study-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/Redis-study-notes/</id>
    <published>2023-02-18T22:45:02.000Z</published>
    <updated>2023-02-18T22:45:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL-简介"><a href="#NoSQL-简介" class="headerlink" title="NoSQL 简介"></a>NoSQL 简介</h1><ul><li>NoSQL（“non-relational”， “Not Only SQL”），泛指非关系型的数据库。随着互联网 web2.0网站的兴起，传统的关系数据库在处理 web2.0 网站，特别是超大规模和高并发的 SNS 类型的 web2.0 纯动态网站已经显得力不从心，出现了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL 数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，特别是大数据应用难题。</li></ul><br><h2 id="键值存储数据库"><a href="#键值存储数据库" class="headerlink" title="键值存储数据库"></a>键值存储数据库</h2><ul><li>就像 Map 一样的 key-value 对。典型代表就是 Redis。</li></ul><br><h2 id="列存储数据库"><a href="#列存储数据库" class="headerlink" title="列存储数据库"></a>列存储数据库</h2><ul><li>关系型数据库是典型的行存储数据库。其存在的问题是，按行存储的数据在物理层面占用的是连续存储空间，不适合海量数据存储。而按列存储则可实现分布式存储，适合海量存储。典型代表是 HBase。</li></ul><br><h2 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h2><ul><li> NoSQL 与关系型数据的结合，最像关系型数据库的 NoSQL。典型代表是 MongoDB。</li></ul><br><h2 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph) 数据库"></a>图形(Graph) 数据库</h2><ul><li>用于存放一个节点关系的数据库，例如描述不同人间的关系。典型代表是 Neo4J。</li></ul><br><br><br><h1 id="NoSQL-VS-关系型数据库"><a href="#NoSQL-VS-关系型数据库" class="headerlink" title="NoSQL VS 关系型数据库"></a>NoSQL VS 关系型数据库</h1><ul><li></li></ul><br><br><br><h1 id="Redis-概述"><a href="#Redis-概述" class="headerlink" title="Redis 概述"></a>Redis 概述</h1><h2 id="Redis-简介"><a href="#Redis-简介" class="headerlink" title="Redis 简介"></a>Redis 简介</h2><ul><li>Redis，Remote Dictionary Server，远程字典服务，由意大利人 Salvatore Sanfilippo（又名 Antirez）开发，是一个使用 ANSI C 语言编写、支持网络、可基于内存亦可持久化的日志型、NoSQL 开源内存数据库，其提供多种语言的 API。从 2010 年 3 月 15 日起，Redis 的开发工作由 VMware 主持。从2013 年 5 月开始，Redis 的开发由 Pivotal 赞助。</li><li>2008 年时 Salvatore Sanfilippo 自己开发一个叫 LLOOGG 的网站。</li><li>Redis之所以称之为字典服务，是因为 Redis 是一个 key-value存储系统。支持存储的 value类型很多，包括 String(字符串)、List(链表)、Set(集合)、Zset(sorted set –有序集合)和 Hash（哈希类型）等。</li><li>Redis 的国际知名用户有，Twitter、GitHub、Facebook 等，国内知名用户有，阿里巴巴、腾讯、百度、搜狐、优酷、美团、小米等。熟练使用和运维 Redis 已经成为开发运维人员的一个必备技能。</li></ul><br><h2 id="Redis-的用途"><a href="#Redis-的用途" class="headerlink" title="Redis 的用途"></a>Redis 的用途</h2><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><ul><li>客户端从 DBMS（Database Management System） 中查询出的数据首先写入到 Redis 中，后续无论哪个客户端再需要访问该数据，直接读取 Redis 中的即可，不仅减小了 RT（response time 简称RT，响应时间：从系统接收请求开始到返回响应之间的时间跨度），而且降低了 DBMS 的压力。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/1677190973987.1jn6209v28ww.webp" width="70%"><br><ul><li>根据 Redis 缓存的数据与 DBMS 中数据的同步性划分，缓存一般可划分为两类：实时同步缓存，与阶段性同步缓存。</li><li>实时同步缓存是指，DBMS 中数据更新后，Redis 缓存中的存放的相关数据会被立即清除，以促使再有对该数据的访问请求到来时，必须先从 DBMS 中查询获取到最新数据，然后再写入到 Redis。</li><li>阶段性同步缓存是指，Redis 缓存中的数据允许在一段时间内与 DBMS 中的数据不完全一致。而这个时间段就是这个缓存数据的过期时间。</li></ul><br><h2 id="Redis-的特性"><a href="#Redis-的特性" class="headerlink" title="Redis 的特性"></a>Redis 的特性</h2><blockquote><p>能够做缓存的技术、中间件很多，例如，MyBatis 自带的二级缓存、Memched 等。之所以在生产中做缓存的产品几乎无一例外的会选择 Redis，是因为它有很多其它产品所不具备的特性。</p></blockquote><ul><li>性能极高：Redis 读的速度可以达到 11w 次/s，写的速度可以达到 8w 次/s。</li></ul><blockquote><p>之所以具有这么高的性能，因为以下几点原因：</p><p>（1）Redis 的所有操作都是在内存中发生的。</p><p>（2）Redis 是用 C 语言开发的。</p><p>（3）Redis 源码非常精细（集性能与优雅于一身）。</p></blockquote><ul><li>简单稳定：Redis 源码很少。早期版本只有 2w 行左右。从 3.0 版本开始，增加了集群功能，代码变为了 5w 行左右。</li><li>持久化：Redis 内存中的数据可以进行持久化，其有两种方式：RDB 与 AOF。</li><li>高可用集群：Redis 提供了高可用的主从集群功能，可以确保系统的安全性。</li><li>丰富的数据类型：Redis 是一个 key-value 存储系统。支持存储的 value 类型很多，包括String(字符串)、List(链表)、Set(集合)、Zset(sorted set –有序集合)和 Hash（哈希类型）等，还有 BitMap、HyperLogLog、Geospatial 类型。<ul><li>BitMap：一般用于大数据量的二值性统计</li><li>HyperLogLog：其是 Hyperlog Log，用于对数据量超级庞大的日志做去重统计</li><li>Geospatial：地理空间，其主要用于地理位置相关的计算</li></ul></li><li>强大的功能：Redis 提供了数据过期功能、发布/订阅功能、简单事务功能，还支持 Lua脚本扩展功能。</li><li>客户端语言广泛：Redis提供了简单的TCP通信协议，编程语言可以方便地的接入Redis。所以，有很多的开源社区、大公司等开发出了很多语言的 Redis 客户端。</li><li>支持 ACL 权限控制：之前的权限控制非常笨拙。从 Redis6 开始引入了 ACL 模块，可以为不同用户定制不同的用户权限。</li></ul><blockquote><ul><li>ACL，Access Control List，访问控制列表，是一种细粒度的权限管理策略，可以针对任意用户与组进行权限控制。目前大多数 Unix 系统与 Linux 2.6 版本已经支持 ACL 了。</li><li>Zookeeper 早已支持 ACL 了。</li><li>Unix 与 Linux 系统默认使用是 UGO（User、Group、Other）权限控制策略，其是一种粗粒度的权限管理策略。</li></ul></blockquote><ul><li>支持多线程 IO 模型：Redis 之前版本采用的是单线程模型，从 6.0 版本开始支持了多线程模型。</li></ul><br><h2 id="Redis-的IO模型"><a href="#Redis-的IO模型" class="headerlink" title="Redis 的IO模型"></a>Redis 的IO模型</h2><ul><li>Redis 客户端提交的各种请求是如何最终被 Redis 处理的？Redis 处理客户端请求所采用的处理架构，称为 Redis 的 IO 模型。不同版本的 Redis 采用的 IO 模型是不同的</li></ul><h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><ul><li>对于 Redis 3.0 及其以前版本，Redis 的 IO 模型采用的是<strong>纯粹的单线程模型</strong>。即所有客户端的请求全部由一个线程处理。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6sosx0t4lqw0.webp" width="70%"><br><ul><li>Redis 的单线程模型采用了多路复用技术。</li></ul><blockquote><ul><li>对于多路复用器的多路选择算法常见的有三种：select 模型、poll 模型、epoll 模型。<ul><li>poll 模型的选择算法：采用的是轮询算法。该模型对客户端的就绪处理是有延迟的</li><li>epoll 模型的选择算法：采用的是回调方式。根据就绪事件发生后的处理方式的不同，又可分为 LT 模型与 ET 模型。</li></ul></li></ul></blockquote><ul><li><p>每个客户端若要向 Redis 提交请求，都需要与 Redis 建立一个 socket 连接，并向事件分发器注册一个事件。一旦该事件发生就表明该连接已经就绪。而一旦连接就绪，事件分发器就会感知到，然后获取客户端通过该连接发送的请求，并将由该事件分发器所绑定的这个唯一的线程来处理。如果该线程还在处理多个任务，则将该任务写入到任务队列等待线程处理。</p></li><li><p>之所以称为事件分发器，是因为它会根据不同的就绪事件，将任务交由不同的事件处理<br>器去处理。</p></li></ul><h3 id="混合线程模型"><a href="#混合线程模型" class="headerlink" title="混合线程模型"></a>混合线程模型</h3><ul><li>从 Redis 4.0 版本开始，Redis 中就开始加入了多线程元素。处理客户端请求的仍是单线程模型，但对于一些比较耗时但又不影响对客户端的响应的操作，就由后台其它线程来处理。例如，持久化、对 AOF 的 rewrite、对失效连接的清理等。</li></ul><h3 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h3><ul><li>Redis 6.0 版本，才是真正意义上的多线程模型。因为其对于客户端请求的处理采用的是多线程模型。</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ge3bn7lv0o0.webp" width="70%"><br><ul><li>多线程 IO 模型中的“多线程”仅用于接受、解析客户端的请求，然后将解析出的请求写入到任务队列。而对具体任务（命令）的处理，仍是由主线程处理。这样做使得用户无需考虑线程安全问题，无需考虑事务控制，无需考虑像 LPUSH/LPOP 等命令的执行顺序问题。</li></ul><h3 id="Redis-的-IO-模型优缺点总结"><a href="#Redis-的-IO-模型优缺点总结" class="headerlink" title="Redis 的 IO 模型优缺点总结"></a>Redis 的 IO 模型优缺点总结</h3><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>单线程模型</td><td>可维护性高，性能高。<br/>不存在并发读写情况，所以也就不存在执行顺序的不确定性，不存在线程切换开销，不存在死锁问题，不存在为了数据安全而进行的加锁/解锁开销。</td><td>性能会受到影响，且由于单线程只能使用一个处理器，所以会形成处理器浪费。</td></tr><tr><td>多线程模型</td><td>其结合了多线程与单线程的优点，避开了它们的所有不足</td><td>该模型没有显示不足。<br/>如果非要找其不足的话就是，其并非是一个真正意义上的“多线程”，因为真正处理“任务”的线程仍是单线程。所以，其对性能也是有些影响的。</td></tr></tbody></table><br><br><br><h1 id="Redis-的安装与配置"><a href="#Redis-的安装与配置" class="headerlink" title="Redis 的安装与配置"></a>Redis 的安装与配置</h1><h2 id="Redis-的安装"><a href="#Redis-的安装" class="headerlink" title="Redis 的安装"></a>Redis 的安装</h2><h3 id="安装前的准备工作"><a href="#安装前的准备工作" class="headerlink" title="安装前的准备工作"></a>安装前的准备工作</h3><ul><li>服务器选择CentOS 7.x，需要安装 gcc、gcc-c++</li></ul><blockquote><p>由于 Redis 是由 C/C++语言编写的，而从官网下载的 Redis 安装包是需要编译后才可安装的，所以对其进行编译就必须要使用相关编译器。对于 C/C++语言的编译器，使用最多的是gcc与gcc-c++，而这两款编译器在CentOS7中是没有安装的，所以首先要安装这两款编译器。</p><p>GCC，GNU Compiler Collection，GNU 编译器集合。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure><h3 id="下载-上传-Redis-安装包"><a href="#下载-上传-Redis-安装包" class="headerlink" title="下载/上传 Redis 安装包"></a>下载/上传 Redis 安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/</span><br><span class="line">wget https://github.com/redis/redis/archive/7.0.8.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf 7.0.8.tar.gz</span><br><span class="line"></span><br><span class="line">[root@localhost opt]# ls</span><br><span class="line">7.0.8.tar.gz  redis-7.0.8</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ul><li>编译过程是根据 Makefile 文件进行的，而 Redis 解压包中已经存在该文件了。所以可以直接进行编译了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# cd /opt/redis-7.0.8/</span><br><span class="line">[root@localhost redis-7.0.8]# ll</span><br><span class="line">total 264</span><br><span class="line">-rw-rw-r--  1 root root  40942 Jan 17 00:40 00-RELEASENOTES</span><br><span class="line">-rw-rw-r--  1 root root     51 Jan 17 00:40 BUGS</span><br><span class="line">-rw-rw-r--  1 root root   5027 Jan 17 00:40 CODE_OF_CONDUCT.md</span><br><span class="line">-rw-rw-r--  1 root root   2634 Jan 17 00:40 CONTRIBUTING.md</span><br><span class="line">-rw-rw-r--  1 root root   1487 Jan 17 00:40 COPYING</span><br><span class="line">drwxrwxr-x  7 root root    119 Jan 17 00:40 deps</span><br><span class="line">-rw-rw-r--  1 root root     11 Jan 17 00:40 INSTALL</span><br><span class="line">-rw-rw-r--  1 root root    151 Jan 17 00:40 Makefile</span><br><span class="line">-rw-rw-r--  1 root root   6888 Jan 17 00:40 MANIFESTO</span><br><span class="line">-rw-rw-r--  1 root root  22441 Jan 17 00:40 README.md</span><br><span class="line">-rw-rw-r--  1 root root 106545 Jan 17 00:40 redis.conf</span><br><span class="line">-rwxrwxr-x  1 root root    279 Jan 17 00:40 runtest</span><br><span class="line">-rwxrwxr-x  1 root root    283 Jan 17 00:40 runtest-cluster</span><br><span class="line">-rwxrwxr-x  1 root root   1613 Jan 17 00:40 runtest-moduleapi</span><br><span class="line">-rwxrwxr-x  1 root root    285 Jan 17 00:40 runtest-sentinel</span><br><span class="line">-rw-rw-r--  1 root root   1695 Jan 17 00:40 SECURITY.md</span><br><span class="line">-rw-rw-r--  1 root root  14005 Jan 17 00:40 sentinel.conf</span><br><span class="line">drwxrwxr-x  4 root root   8192 Jan 17 00:40 src</span><br><span class="line">drwxrwxr-x 11 root root    199 Jan 17 00:40 tests</span><br><span class="line">-rw-rw-r--  1 root root   3055 Jan 17 00:40 TLS.md</span><br><span class="line">drwxrwxr-x  8 root root   4096 Jan 17 00:40 utils</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-7.0.8]# make</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">    LINK redis-server</span><br><span class="line">    INSTALL redis-sentinel</span><br><span class="line">    CC redis-cli.o</span><br><span class="line">    CC redisassert.o</span><br><span class="line">    CC cli_common.o</span><br><span class="line">    LINK redis-cli</span><br><span class="line">    CC redis-benchmark.o</span><br><span class="line">    LINK redis-benchmark</span><br><span class="line">    INSTALL redis-check-rdb</span><br><span class="line">    INSTALL redis-check-aof</span><br><span class="line"></span><br><span class="line">Hint: It&#x27;s a good idea to run &#x27;make test&#x27; ;)</span><br><span class="line"></span><br><span class="line">make[1]: Leaving directory `/opt/redis-7.0.8/src&#x27;</span><br><span class="line">[root@localhost redis-7.0.8]#</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>在 Linux 中对于编译过的安装包执行 <code>make install</code> 进行安装</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redis-7.0.8]# make install</span><br><span class="line">cd src &amp;&amp; make install</span><br><span class="line">which: no python3 in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">make[1]: Entering directory `/opt/redis-7.0.8/src&#x27;</span><br><span class="line">    CC Makefile.dep</span><br><span class="line">make[1]: Leaving directory `/opt/redis-7.0.8/src&#x27;</span><br><span class="line">which: no python3 in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">make[1]: Entering directory `/opt/redis-7.0.8/src&#x27;</span><br><span class="line"></span><br><span class="line">Hint: It&#x27;s a good idea to run &#x27;make test&#x27; ;)</span><br><span class="line"></span><br><span class="line">    INSTALL redis-server</span><br><span class="line">    INSTALL redis-benchmark</span><br><span class="line">    INSTALL redis-cli</span><br><span class="line">make[1]: Leaving directory `/opt/redis-7.0.8/src&#x27;</span><br><span class="line">[root@localhost redis-7.0.8]#</span><br></pre></td></tr></table></figure><ul><li>至此，Redis安装完成。可以看到，共安装了三个组件：redis 服务器、客户端与一个性能测试工具 benchmark。</li></ul><h3 id="查看-bin-目录"><a href="#查看-bin-目录" class="headerlink" title="查看 bin 目录"></a>查看 bin 目录</h3><ul><li>安装完成后，打开/usr/local/bin 目录，可以看到出现了很多的文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# cd /usr/local/bin/</span><br><span class="line">[root@localhost bin]# ll</span><br><span class="line">total 21560</span><br><span class="line">-rwxr-xr-x 1 root root    32592 Mar 26  2021 earlyoom</span><br><span class="line">-rwxr-xr-x 1 root root  5198152 Feb 24 07:07 redis-benchmark</span><br><span class="line">lrwxrwxrwx 1 root root       12 Feb 24 07:07 redis-check-aof -&gt; redis-server</span><br><span class="line">lrwxrwxrwx 1 root root       12 Feb 24 07:07 redis-check-rdb -&gt; redis-server</span><br><span class="line">-rwxr-xr-x 1 root root  5411488 Feb 24 07:07 redis-cli</span><br><span class="line">lrwxrwxrwx 1 root root       12 Feb 24 07:07 redis-sentinel -&gt; redis-server</span><br><span class="line">-rwxr-xr-x 1 root root 11427160 Feb 24 07:07 redis-server</span><br></pre></td></tr></table></figure><ul><li>通过 <code>echo $PATH</code> 可以看到，/usr/local/bin 目录是存在于该系统变量中的，这样这些命令就可以在任意目录中执行了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin</span><br></pre></td></tr></table></figure><br><h2 id="Redis-启动与停止"><a href="#Redis-启动与停止" class="headerlink" title="Redis 启动与停止"></a>Redis 启动与停止</h2><h3 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h3><ul><li>在任意目录执行redis-server命令即可启动Redis。这种启动方式会占用当前命令行窗口。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost bin]# redis-server</span><br><span class="line">6717:C 24 Feb 2023 07:13:54.221 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><br><span class="line">6717:C 24 Feb 2023 07:13:54.221 # Redis version=7.0.8, bits=64, commit=00000000, modified=0, pid=6717, just started</span><br><span class="line">6717:C 24 Feb 2023 07:13:54.221 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><br><span class="line">6717:M 24 Feb 2023 07:13:54.221 * monotonic clock: POSIX clock_gettime</span><br><span class="line">                _._</span><br><span class="line">           _.-``__ &#x27;&#x27;-._</span><br><span class="line">      _.-``    `.  `_.  &#x27;&#x27;-._           Redis 7.0.8 (00000000/0) 64 bit</span><br><span class="line">  .-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._</span><br><span class="line"> (    &#x27;      ,       .-`  | `,    )     Running in standalone mode</span><br><span class="line"> |`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line"> |    `-._   `._    /     _.-&#x27;    |     PID: 6717</span><br><span class="line">  `-._    `-._  `-./  _.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |           https://redis.io</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line"> |`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line"> |    `-._`-._        _.-&#x27;_.-&#x27;    |</span><br><span class="line">  `-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line">      `-._    `-.__.-&#x27;    _.-&#x27;</span><br><span class="line">          `-._        _.-&#x27;</span><br><span class="line">              `-.__.-&#x27;</span><br><span class="line"></span><br><span class="line">6717:M 24 Feb 2023 07:13:54.221 # Server initialized</span><br><span class="line">6717:M 24 Feb 2023 07:13:54.221 # WARNING Memory overcommit must be enabled! Without it, a background save or replication may fail under low memory condition. Being disabled, it can can also cause failures without low memory condition, see https://github.com/jemalloc/jemalloc/issues/1328. To fix this issue add &#x27;vm.overcommit_memory = 1&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;sysctl vm.overcommit_memory=1&#x27; for this to take effect.</span><br><span class="line">6717:M 24 Feb 2023 07:13:54.222 * Ready to accept connections</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>再开启一个会话窗口，可以查看到当前的 Redis 进程，默认端口号为 6379。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ps -ef |grep redis</span><br><span class="line">root      6717  2057  0 07:13 pts/2    00:00:00 redis-server *:6379</span><br><span class="line">root      6755  6726  0 07:14 pts/3    00:00:00 grep --color=auto redis</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="命令式后台启动"><a href="#命令式后台启动" class="headerlink" title="命令式后台启动"></a>命令式后台启动</h3><ul><li>使用 nohub 命令，最后再添加一个&amp;符，可以使要启动的程序在后台以守护进程方式运行。这样的好处是，进程启动后不会占用一个会话窗口，且其还会在当前目录，即运行启动命令的当前目录中创建一个 nohup.out 文件用于记录 Redis 的操作日志。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup redis-server &amp;</span><br></pre></td></tr></table></figure><h3 id="配置式后台启动"><a href="#配置式后台启动" class="headerlink" title="配置式后台启动"></a>配置式后台启动</h3><ul><li>使用 nohup 命令可以使 Redis 后台启动，但每次都要键入 nohup 与&amp;符，比较麻烦。可以通过修改 Linux 中 Redis 的核心配置文件 redis.conf 达到后台启动的目的。redis.conf 文件在Redis 的安装目录根下。</li></ul><h2 id="Redis-连接前配置"><a href="#Redis-连接前配置" class="headerlink" title="Redis 连接前配置"></a>Redis 连接前配置</h2><h3 id="绑定客户端-IP"><a href="#绑定客户端-IP" class="headerlink" title="绑定客户端 IP"></a>绑定客户端 IP</h3><ul><li>Redis 可以通过修改配置文件来限定可以访问自己的客户端 IP</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">bind</span> 127.0.0.1 -::1</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以上设置（默认设置,未注释），只允许当前主机访问当前的 Redis，其它主机均不可访问。所以，如果不想限定访问的客户端，只需要将该行注释掉即可。</span></span><br></pre></td></tr></table></figure><h3 id="关闭保护模式"><a href="#关闭保护模式" class="headerlink" title="关闭保护模式"></a>关闭保护模式</h3><ul><li>默认保护模式是开启的。其只允许本机的客户端访问，即只允许自己访问自己。但生产中应该关闭，以确保其它客户端可以连接 Redis。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protected-mode no</span><br></pre></td></tr></table></figure><h3 id="设置访问密码"><a href="#设置访问密码" class="headerlink" title="设置访问密码"></a>设置访问密码</h3><ul><li>为 Redis 设置访问密码，可以对要读/写 Redis 的用户进行身份验证。没有密码的用户可以登录 Redis，但无法访问。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requirepass redis</span><br></pre></td></tr></table></figure><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>用途写的太单薄了，需要重构</li><li>缓存划分</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NoSQL-简介&quot;&gt;&lt;a href=&quot;#NoSQL-简介&quot; class=&quot;headerlink&quot; title=&quot;NoSQL 简介&quot;&gt;&lt;/a&gt;NoSQL 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;NoSQL（“non-relational”， “Not Only SQL”），</summary>
      
    
    
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/"/>
    
    <category term="NoSQL" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/NoSQL/"/>
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/NoSQL/Redis/"/>
    
    
    <category term="Redis" scheme="https://ratears.github.io/dev.ratears.life/Tags/Redis/"/>
    
    <category term="NoSQL" scheme="https://ratears.github.io/dev.ratears.life/Tags/NoSQL/"/>
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>《Java设计模式精讲 Debug方式+内存分析》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B2%BE%E8%AE%B2-Debug%E6%96%B9%E5%BC%8F-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B2%BE%E8%AE%B2-Debug%E6%96%B9%E5%BC%8F-%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E3%80%8Bstudy-notes/</id>
    <published>2023-02-18T17:05:28.000Z</published>
    <updated>2023-02-18T17:05:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h1><h2 id="类型与定义"><a href="#类型与定义" class="headerlink" title="类型与定义"></a>类型与定义</h2><ul><li>定义:由一个工厂对象决定创建出哪一种产品类的实例</li><li>类型:创建型，但不属于GOF23种设计模式</li></ul><br><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>工厂类负责创建的对象比较少</li><li>客户端(应用层)只知道传入工厂类的参数，对于如何创建对象(逻辑)不关心</li></ul><br><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>只需要传入一个正确的参数，就可以获取你所需要的对象而无须知道其创建细节</li></ul><br><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>工厂类的职责相对过重，如果增加新的产品需要修改工厂类的判断逻辑，违背开闭原则</li></ul><br><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Javaer</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Java programmer，I can use Java programming .&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gopher</span> <span class="keyword">extends</span> <span class="title class_">Coder</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Go programmer，I can use Go programming .&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoderFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Coder <span class="title function_">createCoder</span><span class="params">(Class clazz)</span> &#123;</span><br><span class="line">        <span class="type">Coder</span> <span class="variable">coder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            coder = (Coder) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Coder</span> <span class="variable">coder</span> <span class="operator">=</span> CoderFactory.createCoder(Javaer.class);</span><br><span class="line">        coder.coding();</span><br><span class="line"></span><br><span class="line">        Coder coder1= CoderFactory.createCoder(Gopher.class);</span><br><span class="line">        coder1.coding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="java-util-Calendar"><a href="#java-util-Calendar" class="headerlink" title="java.util.Calendar"></a>java.util.Calendar</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ybjgo0ug3o0.webp" width="60%"><br><h3 id="ch-qos-logback-classic-LoggerContext"><a href="#ch-qos-logback-classic-LoggerContext" class="headerlink" title="ch.qos.logback.classic.LoggerContext"></a>ch.qos.logback.classic.LoggerContext</h3><ul><li>其中，既使用到了<strong>简单工厂</strong>又使用到了<strong>工厂方法模式</strong></li></ul><br><br><br><h1 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h1><h2 id="定义与类型"><a href="#定义与类型" class="headerlink" title="定义与类型"></a>定义与类型</h2><ul><li>定义:定义一个创建对象的接口，但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行</li><li>类型:创建型</li></ul><br><h2 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>创建对象需要大量重复的代码</li><li>客户端(应用层)不依赖于产品类实例如何被创建、实现等细节</li><li>一个类通过其子类来指定创建哪个对象</li></ul><br><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ul><li>用户只需要关心所需产品对应的工厂，无须关心创建细节</li><li>加入新产品符合开闭原则，提高可扩展性</li></ul><br><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ul><li>类的个数容易过多，增加复杂度</li><li>增加了系统的抽象性和理解难度</li></ul><br><h2 id="Coding-1"><a href="#Coding-1" class="headerlink" title="Coding"></a>Coding</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gopher</span> <span class="keyword">extends</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Go programmer，I can use Go programming .&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Javaer</span> <span class="keyword">extends</span> <span class="title class_">Coder</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I&#x27;m a Java programmer，I can use Java programming .&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CoderFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Coder <span class="title function_">createCoder</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GopherFactory</span> <span class="keyword">extends</span> <span class="title class_">CoderFactory</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coder <span class="title function_">createCoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Gopher</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaerFactory</span> <span class="keyword">extends</span> <span class="title class_">CoderFactory</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coder <span class="title function_">createCoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Javaer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CoderFactory</span> <span class="variable">coderFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JavaerFactory</span>();</span><br><span class="line">        <span class="type">Coder</span> <span class="variable">coder</span> <span class="operator">=</span> coderFactory.createCoder();</span><br><span class="line">        coder.coding();</span><br><span class="line">        <span class="type">CoderFactory</span> <span class="variable">coderFactory2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GopherFactory</span>();</span><br><span class="line">        <span class="type">Coder</span> <span class="variable">coder2</span> <span class="operator">=</span> coderFactory2.createCoder();</span><br><span class="line">        coder2.coding();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li>jdk源码中的 Collection类 <code>Iterator&lt;E&gt; iterator();</code>，就使用了工厂方法，Iterator是抽象产品。ArrayList中有具体实现。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jdk源码Luncher类中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Factory</span> <span class="keyword">implements</span> <span class="title class_">URLStreamHandlerFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">PREFIX</span> <span class="operator">=</span> <span class="string">&quot;sun.net.www.protocol&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Factory</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> URLStreamHandler <span class="title function_">createURLStreamHandler</span><span class="params">(String var1)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">var2</span> <span class="operator">=</span> PREFIX + <span class="string">&quot;.&quot;</span> + var1 + <span class="string">&quot;.Handler&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Class</span> <span class="variable">var3</span> <span class="operator">=</span> Class.forName(var2);</span><br><span class="line">            <span class="keyword">return</span> (URLStreamHandler)var3.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ReflectiveOperationException var4) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InternalError</span>(<span class="string">&quot;could not load &quot;</span> + var1 + <span class="string">&quot;system protocol handler&quot;</span>, var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="定义与类型-1"><a href="#定义与类型-1" class="headerlink" title="定义与类型"></a>定义与类型</h2><ul><li>定义: 抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口</li><li>无须指定它们具体的类</li><li>类型:创建型</li></ul><br><h2 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>客户端(应用层)不依赖于产品类实例如何被创建、实现等细节</li><li>强调一系列相关的产品对象(属于同一产品族)一起使用创建对象需要大量重复的代码</li><li>提供一个产品类的库，所有的产品以同样的接口出现从而使客户端不依赖于具体实现</li></ul><br><h2 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h2><ul><li>具体产品在应用层代码隔离，无须关心创建细节</li><li>将一个系列的产品族统一到一起创建</li></ul><br><h2 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h2><ul><li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难需要修改抽象工厂的接口</li><li>增加了系统的抽象性和理解难度</li></ul><br><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="产品等级结构与产品族"><a href="#产品等级结构与产品族" class="headerlink" title="产品等级结构与产品族"></a>产品等级结构与产品族</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/fdadc29cbe12236d1d5629647483893.26md45jh7ugw.webp" width="70%"><br><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/0c56cc305ffdc39902f3003fdf0e623.hqr3956keq8.webp" width="70%"><br><h2 id="Coding-2"><a href="#Coding-2" class="headerlink" title="Coding"></a>Coding</h2><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6pduwxhaon80.webp" width="100%"><br><h2 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li>java.sql.connection</li></ul><br><br><br><h1 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h1><h2 id="定义与类型-2"><a href="#定义与类型-2" class="headerlink" title="定义与类型"></a>定义与类型</h2><ul><li>定义: 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</li><li>用户只需指定需要建造的类型就可以得到它们，建造过程及细节不需要知道</li><li>类型:创建型</li></ul><br><h2 id="适用场景-3"><a href="#适用场景-3" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>如果一个对象有非常复杂的内部结构(很多属性)</li><li>想把复杂对象的创建和使用分离</li></ul><br><h2 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h2><ul><li>封装性好，创建和使用分离</li><li>扩展性好、建造类之间独立、一定程度上解耦</li></ul><br><h2 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h2><ul><li>产生多余的Builder对象</li><li>产品内部发生变化，建造者都要修改，成本较大</li></ul><br><h2 id="Coding-3"><a href="#Coding-3" class="headerlink" title="Coding"></a>Coding</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String ram;</span><br><span class="line">    <span class="keyword">private</span> String usbCount;</span><br><span class="line">    <span class="keyword">private</span> String keyboard;</span><br><span class="line">    <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(ComputerBuilder computerBuilder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = computerBuilder.cpu;</span><br><span class="line">        <span class="built_in">this</span>.ram = computerBuilder.ram;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = computerBuilder.usbCount;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = computerBuilder.keyboard;</span><br><span class="line">        <span class="built_in">this</span>.display = computerBuilder.display;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Computer&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, ram=&#x27;&quot;</span> + ram + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, usbCount=&#x27;&quot;</span> + usbCount + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, keyboard=&#x27;&quot;</span> + keyboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, display=&#x27;&quot;</span> + display + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ComputerBuilder</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String ram;</span><br><span class="line">        <span class="keyword">private</span> String usbCount;</span><br><span class="line">        <span class="keyword">private</span> String keyboard;</span><br><span class="line">        <span class="keyword">private</span> String display;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">buildCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.cpu=cpu;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">buildRam</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.ram=ram;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">buildUsbCount</span><span class="params">(String usbCount)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.usbCount=usbCount;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">buildKeyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.keyboard=keyboard;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ComputerBuilder <span class="title function_">buildDisplay</span><span class="params">(String display)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.display=display;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>.ComputerBuilder().buildCpu(<span class="string">&quot;I7处理器&quot;</span>).buildCpu(<span class="string">&quot;三星125&quot;</span>).build();</span><br><span class="line">    System.out.println(computer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="源码分析-3"><a href="#源码分析-3" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li>java.lang.StringBuilder</li><li>java.lang.StringBuffer</li><li>org.apache.ibatis.session.SqlSessionFactoryBuilder</li></ul><br><br><br><h1 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h1><h2 id="定义与类型-3"><a href="#定义与类型-3" class="headerlink" title="定义与类型"></a>定义与类型</h2><ul><li>定义: 指原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</li><li>不需要知道任何创建的细节，不调用构造函数</li><li>类型:创建型</li></ul><br><h2 id="适用场景-4"><a href="#适用场景-4" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li></li></ul><br><h2 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h2><ul><li></li></ul><br><h2 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h2><ul><li></li></ul><br><h2 id="Coding-4"><a href="#Coding-4" class="headerlink" title="Coding"></a>Coding</h2><br><h2 id="源码分析-4"><a href="#源码分析-4" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li></li></ul><br><br><br><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="定义与类型-4"><a href="#定义与类型-4" class="headerlink" title="定义与类型"></a>定义与类型</h2><ul><li>定义: 保证一个类仅有一个实例，并提供一个全局访问点</li><li>类型:创建型</li></ul><br><h2 id="适用场景-5"><a href="#适用场景-5" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>想确保任何情况下都绝对只有一个实例</li></ul><br><h2 id="优点-5"><a href="#优点-5" class="headerlink" title="优点"></a>优点</h2><ul><li>在内存里只有一个实例，减少了内存开销</li><li>可以避免对资源的多重占用</li><li>设置全局访问点，严格控制访问</li></ul><br><h2 id="缺点-5"><a href="#缺点-5" class="headerlink" title="缺点"></a>缺点</h2><ul><li>没有接口，扩展困难</li></ul><br><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><ul><li>私有构造器</li><li>线程安全</li><li>延迟加载</li><li>序列化和反序列化安全</li><li>反射</li></ul><br><h2 id="Coding-5"><a href="#Coding-5" class="headerlink" title="Coding"></a>Coding</h2><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySingLeton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">LazySingLeton</span> <span class="variable">lazySingLeton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySingLeton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> LazySingLeton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == lazySingLeton) &#123;</span><br><span class="line">            lazySingLeton = <span class="keyword">new</span> <span class="title class_">LazySingLeton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazySingLeton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>同步锁比较消耗资源，加锁解锁消耗资源，同步锁 synchronized 在这里锁的是 整个Class，锁的范围过大，影响性能</p></blockquote><h3 id="懒汉式——DoubleCheck"><a href="#懒汉式——DoubleCheck" class="headerlink" title="懒汉式——DoubleCheck"></a>懒汉式——DoubleCheck</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼顾了性能和线程安全</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyDoubleCheckSingleton</span> &#123;</span><br><span class="line">    <span class="comment">// 加上 volatile 关键字，不允许重排序</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">LazyDoubleCheckSingleton</span> <span class="variable">lazyDoubleCheckSingleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyDoubleCheckSingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyDoubleCheckSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == lazyDoubleCheckSingleton)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyDoubleCheckSingleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == lazyDoubleCheckSingleton) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        这一步做了3个操作</span></span><br><span class="line"><span class="comment">                        （1）分配内容给这个对象</span></span><br><span class="line"><span class="comment">                        （2）初始化对象</span></span><br><span class="line"><span class="comment">                        （3）设置 lazyDoubleCheckSingleton 指向刚分配的内存地址</span></span><br><span class="line"><span class="comment">                    但是注意：第（2）步和第（3）步可能会发生重排序，即执行顺序不确定。重排序在单线程下无影响，但是在多线程下可能会发生错误</span></span><br><span class="line"><span class="comment">                        解决办法：</span></span><br><span class="line"><span class="comment">                            （1）不允许重排序，例如：给实例对象声明的时候加上 volatile 关键字</span></span><br><span class="line"><span class="comment">                            （2）允许重排序，但对其它线程不可见。例如：使用静态内部类方式...</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    lazyDoubleCheckSingleton = <span class="keyword">new</span> <span class="title class_">LazyDoubleCheckSingleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazyDoubleCheckSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="扩展-重排序"><a href="#扩展-重排序" class="headerlink" title="扩展 重排序"></a>扩展 重排序</h4><ul><li>多线程下，重排序会导致发生错误</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.65qlazmasro0.webp" width="70%"><br><h3 id="懒汉式——静态内部类"><a href="#懒汉式——静态内部类" class="headerlink" title="懒汉式——静态内部类"></a>懒汉式——静态内部类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticInnerClassSingleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticInnerClassSingleton</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">InnerClass</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">StaticInnerClassSingleton</span> <span class="variable">staticInnerClassSingleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticInnerClassSingleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.staticInnerClassSingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.3e63w8d1ed40.webp" width="70%"><br><br><h2 id="源码分析-5"><a href="#源码分析-5" class="headerlink" title="源码分析"></a>源码分析</h2><ul><li></li></ul><br><br><br><h1 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>源码分析这块是不是需要加强一下 ？</li><li>建造者模式这块还是要好好熟悉手写一下，是否面向对象的知识需要好好补充</li><li>单例模式中的重排序还要深入理解一下***</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot; title=&quot;简单工厂&quot;&gt;&lt;/a&gt;简单工厂&lt;/h1&gt;&lt;h2 id=&quot;类型与定义&quot;&gt;&lt;a href=&quot;#类型与定义&quot; class=&quot;headerlink&quot; title=&quot;类型与定义&quot;&gt;</summary>
      
    
    
    
    <category term="Design Pattern" scheme="https://ratears.github.io/dev.ratears.life/Categories/Design-Pattern/"/>
    
    
    <category term="Design Pattern" scheme="https://ratears.github.io/dev.ratears.life/Tags/Design-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>《MySQL 必知必会》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8AMySQL-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8AMySQL-%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8Bstudy-notes/</id>
    <published>2023-02-13T07:45:40.000Z</published>
    <updated>2023-02-13T07:45:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="课前准备-2讲"><a href="#课前准备-2讲" class="headerlink" title="课前准备 (2讲)"></a>课前准备 (2讲)</h1><h2 id="开篇词-在实战中学习，是解锁MySQL技能的最佳方法"><a href="#开篇词-在实战中学习，是解锁MySQL技能的最佳方法" class="headerlink" title="开篇词 | 在实战中学习，是解锁MySQL技能的最佳方法"></a>开篇词 | 在实战中学习，是解锁MySQL技能的最佳方法</h2><br><br><br><h2 id="环境准备-带你安装MySQL和图形化管理工具Workbench"><a href="#环境准备-带你安装MySQL和图形化管理工具Workbench" class="headerlink" title="环境准备 | 带你安装MySQL和图形化管理工具Workbench"></a>环境准备 | 带你安装MySQL和图形化管理工具Workbench</h2><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;课前准备-2讲&quot;&gt;&lt;a href=&quot;#课前准备-2讲&quot; class=&quot;headerlink&quot; title=&quot;课前准备 (2讲)&quot;&gt;&lt;/a&gt;课前准备 (2讲)&lt;/h1&gt;&lt;h2 id=&quot;开篇词-在实战中学习，是解锁MySQL技能的最佳方法&quot;&gt;&lt;a href=&quot;#开篇词</summary>
      
    
    
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/"/>
    
    <category term="MySQL" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/MySQL/"/>
    
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Tags/DataBase/"/>
    
    <category term="MySQL" scheme="https://ratears.github.io/dev.ratears.life/Tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>《高并发 高性能 高可用 MySQL 实战》study notes</title>
    <link href="https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%AB%98%E5%B9%B6%E5%8F%91-%E9%AB%98%E6%80%A7%E8%83%BD-%E9%AB%98%E5%8F%AF%E7%94%A8-MySQL-%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/"/>
    <id>https://ratears.github.io/dev.ratears.life/%E3%80%8A%E9%AB%98%E5%B9%B6%E5%8F%91-%E9%AB%98%E6%80%A7%E8%83%BD-%E9%AB%98%E5%8F%AF%E7%94%A8-MySQL-%E5%AE%9E%E6%88%98%E3%80%8Bstudy-notes/</id>
    <published>2023-02-12T18:51:22.000Z</published>
    <updated>2023-02-12T18:51:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第1章-课程介绍"><a href="#第1章-课程介绍" class="headerlink" title="第1章 课程介绍"></a>第1章 课程介绍</h1><h2 id="问卷调查"><a href="#问卷调查" class="headerlink" title="问卷调查"></a>问卷调查</h2><ol><li>你真的搞懂MySQL底层原理了吗?</li><li>你知道如何改善慢查询性能吗?</li><li>你知道如何架设高性能集群吗?</li><li>你知道未来数据库的发展趋势吗?</li></ol><br><ul><li>以上，这些问题很重要! 因为<ul><li>工作中: MySQL高性能集群越来越流行</li><li>面试中:深入考察MySQL原理、性能调优</li><li>职业规划:需要根据技术发展方向选择职业路径</li></ul></li></ul><br><h2 id="精通MySQL，应该怎么学"><a href="#精通MySQL，应该怎么学" class="headerlink" title="精通MySQL，应该怎么学"></a>精通MySQL，应该怎么学</h2><blockquote><ol><li>以技术原理作为坚实基础</li><li>以真实场景作为学习环境</li><li>以架构思维作为学习目标</li></ol></blockquote><blockquote><p>下面三点是课程主线：</p></blockquote><br><h3 id="（1）从理论到实战"><a href="#（1）从理论到实战" class="headerlink" title="（1）从理论到实战"></a>（1）从理论到实战</h3><ul><li>从数据表逻辑结构，到优化数据表的性能</li><li>从数据查询原理，到改善慢SQL性能</li><li>从事务原理，到优化事务执行效率</li></ul><br><h3 id="（2）从单点到集群"><a href="#（2）从单点到集群" class="headerlink" title="（2）从单点到集群"></a>（2）从单点到集群</h3><ul><li>从学习单点原理，到掌握集群原理</li><li>从高性能单点，到高性能集群</li><li>从单点快速部署，到集群快速部署</li></ul><br><h3 id="（3）从现在到未来"><a href="#（3）从现在到未来" class="headerlink" title="（3）从现在到未来"></a>（3）从现在到未来</h3><ul><li>从5.x版本，到8.0版本</li><li>从原生单体数据库，到原生分布式数据库</li><li>从学习技术原理，到理解技术趋势</li></ul><br><h2 id="什么是“三高”"><a href="#什么是“三高”" class="headerlink" title="什么是“三高”"></a>什么是“三高”</h2><ul><li>高并发：同时处理的事务数高</li><li>高性能：事务/SQL的执行速度高</li><li>高可用：系统可用时间高</li></ul><br><ul><li><strong>“三高”只是目的，不是手段。手段有：复制、扩展、切换</strong></li></ul><br><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul><li>目的:数据冗余</li><li>手段: binlog传送</li><li>收获:并发量提升、可用性提升</li><li>问题:占用更多硬件资源</li></ul><br><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><ul><li>目的:扩展数据库容量</li><li>手段:数据分片分库、分表</li><li>收获:性能、并发量的提升</li><li>问题:可能降低可用性</li></ul><br><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ul><li>目的:提高可用性</li><li>手段:主从身份切换</li><li>收获:并发量的提升</li><li>问题:丢失切换时期数据</li></ul><br><h2 id="“三高”的实现"><a href="#“三高”的实现" class="headerlink" title="“三高”的实现"></a>“三高”的实现</h2><ul><li>高并发:通过复制和拓展，将数据分散至多节点</li><li>高性能:复制提升速度，拓展提升容量</li><li>高可用:节点间身份切换保证随时可用</li></ul><br><ul><li><strong>“三高”的集群也是以单点的高性能作为保障的。学习“三高”之前，应该学习如何提高单点性能</strong></li></ul><br><h2 id="如何提升单点性能"><a href="#如何提升单点性能" class="headerlink" title="如何提升单点性能"></a>如何提升单点性能</h2><ul><li><strong>建表:表结构合理，索引高效</strong><ul><li>B+树的数据结构与InnoDB的存储结构</li><li>InnoDB行记录格式的历史与原理</li><li>索引、数据约束、视图的注意事项</li></ul></li><li><strong>查询:优化SQL语句，选择正确索引</strong><ul><li>覆盖索引、索引下推、松散索引的原理与实战</li><li>排序、随机选取、COUNT的优化方法</li><li>索引失效时的排查方向</li></ul></li><li><strong>更新:正确使用锁，合理优化事务</strong><ul><li>MySQL和InnoDB日志体系</li><li>全局锁、表锁、元数据锁、行锁、间隙锁</li><li>死锁的原理与优化方法</li><li>事务与MVCC的原理与性能优化</li></ul></li></ul><br><h2 id="未来数据库发展趋势"><a href="#未来数据库发展趋势" class="headerlink" title="未来数据库发展趋势"></a>未来数据库发展趋势</h2><ul><li>MySQL8.0新特性</li><li>NewSQL数据库</li><li>新一代分布式数据库CockroachDB</li></ul><br><br><br><h1 id="第2章-环境搭建"><a href="#第2章-环境搭建" class="headerlink" title="第2章 环境搭建"></a>第2章 环境搭建</h1><ul><li>准备CentOS7环境</li></ul><br><h2 id="安装MySQL-5-7"><a href="#安装MySQL-5-7" class="headerlink" title="安装MySQL 5.7"></a>安装MySQL 5.7</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cd /install</span><br><span class="line"></span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.7.33-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">tar -xvf mysql-5.7.33-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line">rpm -qa|grep  mariadb</span><br><span class="line">rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-common-5.7.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh --force --nodeps  mysql-community-libs-5.7.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-client-5.7.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh --force --nodeps  mysql-community-server-5.7.33-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">which mysql</span><br></pre></td></tr></table></figure><br><h2 id="MySQL的启停"><a href="#MySQL的启停" class="headerlink" title="MySQL的启停"></a>MySQL的启停</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"></span><br><span class="line">systemctl stop mysqld.service</span><br></pre></td></tr></table></figure><br><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询安装后的初始化密码</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set password=password(&quot;Happy2023@&quot;);</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set global validate_password_policy=LOW;</span><br><span class="line"></span><br><span class="line">set global validate_password_length=4;</span><br><span class="line"></span><br><span class="line">set password=password(&quot;root&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">永久打开防火墙3306端口</span></span><br><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27; WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><br><br><br><h1 id="第3章-一个SQL语句如何执行"><a href="#第3章-一个SQL语句如何执行" class="headerlink" title="第3章 一个SQL语句如何执行"></a>第3章 一个SQL语句如何执行</h1><ul><li>有了电子表格，为什么还要数据库?</li></ul><blockquote><ol><li>数据库理论上没有行数上限。单机数据库若行数太多遇到性能问题，可以通过分库分表等技术解决</li><li>数据库有完备的结构化查询语言 (SQL)。Excel结构化查询功能不如数据库强大</li><li>数据库面向软件，提供软件接口。（Excel是文件级别的，直接面向终端用户）</li><li>数据库事务是关系型数据库的核心优势。（Excel没有事务，无法做到不同人的工作同时进行）</li><li>分布式 - 数据库的潜力巨大。数据库具有主备复制、高可用、分布式等形态。Excel天生是单体的，面向文件的</li></ol></blockquote><blockquote><p>电子表格面向个人，以文件为基础，拓展性差</p><p>数据库面向软件，支持事务、拓展性好</p></blockquote><br><h2 id="数据库软件的典型架构是怎样的"><a href="#数据库软件的典型架构是怎样的" class="headerlink" title="数据库软件的典型架构是怎样的?"></a>数据库软件的典型架构是怎样的?</h2><h2 id="常见软件架构"><a href="#常见软件架构" class="headerlink" title="常见软件架构"></a>常见软件架构</h2><h3 id="MVC-分层架构"><a href="#MVC-分层架构" class="headerlink" title="MVC 分层架构"></a>MVC 分层架构</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.6ezeek610880.webp" width="60%"><br><h3 id="事件驱动架构"><a href="#事件驱动架构" class="headerlink" title="事件驱动架构"></a>事件驱动架构</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7ad2smjsads0.webp" width="60%"><br><h3 id="管道-过滤器架构"><a href="#管道-过滤器架构" class="headerlink" title="管道-过滤器架构"></a>管道-过滤器架构</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.4r8jvxiitds0.webp" width="60%"><br><h3 id="微核架构"><a href="#微核架构" class="headerlink" title="微核架构"></a>微核架构</h3><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.jf0g5tzqe2o.webp" width="60%"><br><h2 id="MySQL软件架构是怎样的？"><a href="#MySQL软件架构是怎样的？" class="headerlink" title="MySQL软件架构是怎样的？"></a>MySQL软件架构是怎样的？</h2><ul><li>MySQL的软件架构</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.7cr8et2ktx00.webp" width="70%"><br><ul><li>以分层架构看MySQL架构</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.57w74vaulpw0.webp" width="70%"><br><ul><li>以管道过滤器-架构看MySQL架构</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.32mzf6nvr1q0.webp" width="70%"><br><ul><li>以微核-架构看MySQL架构</li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.76a2jv90tok0.webp" width="70%"><br><ul><li>软件工程当中有很多经典的架构设计</li><li>大型软件往往不是使用单一的架构设计，而是多种混合</li><li>研究问题要有清晰的视野，分清楚微观和宏观</li><li>理论要灵活实践，不要死读书</li></ul><br><h2 id="客户端怎样连接MySQL数据库"><a href="#客户端怎样连接MySQL数据库" class="headerlink" title="客户端怎样连接MySQL数据库"></a>客户端怎样连接MySQL数据库</h2><h3 id="客户端与MySQL的连接方式"><a href="#客户端与MySQL的连接方式" class="headerlink" title="客户端与MySQL的连接方式"></a>客户端与MySQL的连接方式</h3><ul><li><strong>TCP/IP 连接</strong><ul><li>TCP/IP 连接是MySQL在任何平台上都提供的连接方法</li><li>TCP/IP是目前互联网最主流的网络连接方式</li></ul></li><li><strong>命名管道</strong><ul><li>命名管道:同一台服务器通讯 (Windows)</li><li>命名管道开启方式:–enable-named-pipe</li></ul></li><li><strong>共享内存</strong><ul><li>服务端:配置-shared-memory</li><li>客户端:配置-protocol=memory</li></ul></li><li><strong>UNIX套接字</strong><ul><li>服务端:配置-socket=/tmp/mysql.sock</li><li>客户端:配置-S =/tmp/mysql.sock</li></ul></li></ul><br><h3 id="MySQL-TCP通讯协议"><a href="#MySQL-TCP通讯协议" class="headerlink" title="MySQL TCP通讯协议"></a>MySQL TCP通讯协议</h3><ul><li><strong>三次握手建立TCP连接</strong></li><li><strong>认证连接</strong><ul><li>服务端-&gt;客户端:发送握手初始化包</li><li>客户端-&gt;服务端:发送验证</li><li>服务端-&gt;客户端:认证结果消息</li></ul></li><li><strong>认证通过之后，客户端开始与服务端之间交互</strong><ul><li>客户端-&gt;服务端:发送命令包(Command Packet)</li><li>服务端-&gt;客户端:发送回应包</li></ul></li><li><strong>断开MySQL连接</strong><ul><li>客户端-&gt;服务器:发送退出命令包</li></ul></li><li><strong>四次握手断开TCP连接</strong></li></ul><br><ul><li>MySQL TCP 报文格式<ul><li>消息头:3字节报文长度、1字节序号</li><li>消息体:1字节指令、其余为参数</li><li>指令举例: 切换数据库(0x02)、查询命令(0x03)</li></ul></li></ul><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/image.19gzatr3rmio.webp" width="70%"><br><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>TCP/IP 连接是MySQL最常用的连接方式</li><li>TCP/IP连接报文可以作为其他C/S架构的参考</li><li>其他连接方式均限于本机连接，使用范围有限</li></ul><br><h2 id="一个SQL语句是怎样执行的"><a href="#一个SQL语句是怎样执行的" class="headerlink" title="一个SQL语句是怎样执行的"></a>一个SQL语句是怎样执行的</h2><img src="https://cdn.staticaly.com/gh/ratears/image-hosting@main/blog-img-bed/e9facc452b4200abad559eb2c9f4c39.380nurymdlm0.webp" width="70%"><br><h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><ul><li>之前执行过的语句会KV的形式缓存在内存中</li><li>查询之前先查找之前执行过的相同语句</li><li>不推荐使用缓存:数据表修改后，会删除所有相关缓存</li></ul><br><h3 id="分析器"><a href="#分析器" class="headerlink" title="分析器"></a>分析器</h3><ul><li>分析器的作用是知道你要“干什么“</li><li>先做词法分析，识别SQL语句中的关键字</li><li>再做句法分析，判断SQL语句是否符合语法</li></ul><br><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><ul><li>优化器的作用是要知道“怎么做”</li><li>优化器的主要工作是决定如何使用索引</li></ul><br><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><ul><li>执行器的主要工作是校验权限、调用存储引擎</li><li>执行器首先校验此用户对目标数据有无权限</li><li>执行器会以行为粒度，调用存储引擎，执行SQL</li><li>在没有索引的情况下，执行器会循环查询所有行</li></ul><br><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><ul><li>存储引擎的任务是将执行器的指令落实在数据文件上</li><li>不同存储引擎的原理和执行方法有很大不同</li></ul><br><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>SQL语句执行的过程涉及到了MySQL几乎所有的模块</li><li>一个SQL语句是按照分析-优化-执行-落盘的步骤执行的</li><li>MySQL8.0之后已经停用了缓存功能</li></ul><br><h2 id="四种常见的MySQL存储引擎"><a href="#四种常见的MySQL存储引擎" class="headerlink" title="四种常见的MySQL存储引擎"></a>四种常见的MySQL存储引擎</h2><ul><li><strong>InnoDB</strong><ul><li>MySQL5.5.5之后的默认存储引擎</li><li>支持事务、外键</li><li>支持崩溃修复能力和并发控制</li></ul></li><li><strong>MyISAM</strong><ul><li>MySQL 5.5.5之前的默认存储引擎</li><li>插入数据快</li><li>空间利用率高</li><li>不支持事务</li></ul></li><li><strong>Memory</strong><ul><li>所有的数据都在内存中，速度快</li><li>数据安全性差</li></ul></li><li><strong>Archive</strong><ul><li>数据压缩、空间利用率高</li><li>插入速度快</li><li>不支持索引，查询性能差</li></ul></li></ul><br><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>InnoDB是目前最主流的存储引擎，适合各种互联网业务</li><li>查询效率要求非常高的可以考虑MyISAM</li><li>日志信息归档可以考虑Archive</li><li>临时表可以考虑MEMORY</li></ul><br><br><br><h1 id="第4章-如何建表更符合业务"><a href="#第4章-如何建表更符合业务" class="headerlink" title="第4章 如何建表更符合业务"></a>第4章 如何建表更符合业务</h1><h2 id="索引组织表-Index-Organized-Table"><a href="#索引组织表-Index-Organized-Table" class="headerlink" title="索引组织表(Index Organized Table)"></a>索引组织表(Index Organized Table)</h2><ul><li>索引组织表不是一种“组织表“</li><li>索引组织表是由索引“组织起来的”表</li><li>InnoDB中，表都是根据主键顺序组织存放的</li></ul><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><ol><li>大多数情况下，都应该举一反三，比如课程中讲的mysql架构，应该好好熟悉。但是还有呢对应的课程专门讲解mysql架构，所以在本门课程中，我们只需要熟悉最核心的知识，或者熟悉本门课程的知识即可，其它重要的知识点在其它课程中好好学习即可。所以学习其它知识、课程亦是如此。（把握每个课程的重点，各个击破。达到系统掌握整体的目的）</li><li>注意识别课程中提到的知识，哪些是特别重要的，比如本门课程中，常见架构很重要，但是本门课并不专门讲解架构，所以应该后续找对应的课程，学习架构知识。</li><li>课程提到的mysql架构、tcp连接，都是很重要的知识，需要再深入理解。（一些底层基础知识很重要）</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="50%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第1章-课程介绍&quot;&gt;&lt;a href=&quot;#第1章-课程介绍&quot; class=&quot;headerlink&quot; title=&quot;第1章 课程介绍&quot;&gt;&lt;/a&gt;第1章 课程介绍&lt;/h1&gt;&lt;h2 id=&quot;问卷调查&quot;&gt;&lt;a href=&quot;#问卷调查&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/"/>
    
    <category term="MySQL" scheme="https://ratears.github.io/dev.ratears.life/Categories/DataBase/MySQL/"/>
    
    
    <category term="DataBase" scheme="https://ratears.github.io/dev.ratears.life/Tags/DataBase/"/>
    
    <category term="MySQL" scheme="https://ratears.github.io/dev.ratears.life/Tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Linux 常用基础操作</title>
    <link href="https://ratears.github.io/dev.ratears.life/Linux-%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://ratears.github.io/dev.ratears.life/Linux-%E5%B8%B8%E7%94%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2023-02-11T09:26:36.000Z</published>
    <updated>2023-02-11T09:26:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h1><ul><li>SELinux是Linux2.6以上版本捆绑的一个安全模块</li><li>SELinux配置复杂，容易跟其他程序冲突，所以建议关闭</li></ul><ul><li>关闭SELinux</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置SELINUX=disabled，重启系统</span></span><br></pre></td></tr></table></figure><br><br><br><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><ul><li>替换yum源</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新缓存</span></span><br><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure><br><br><br><h1 id="Linux防火墙"><a href="#Linux防火墙" class="headerlink" title="Linux防火墙"></a>Linux防火墙</h1><br><br><br><h1 id="学习备注"><a href="#学习备注" class="headerlink" title="学习备注"></a>学习备注</h1><blockquote><p>1</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;emsp;</span><span class="symbol">&amp;emsp;</span></span><br></pre></td></tr></table></figure><img src="" width="70%"><br>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h1 id=&quot;SELinux&quot;&gt;&lt;a href=&quot;#SELinux&quot; class=&quot;headerlink&quot; title=&quot;SELinux&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="Linux" scheme="https://ratears.github.io/dev.ratears.life/Categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://ratears.github.io/dev.ratears.life/Tags/Linux/"/>
    
  </entry>
  
</feed>
